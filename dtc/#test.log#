commit 34d708249a91e0d4b89f29e7b52b21b213ce7c54
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Thu Mar 11 18:49:55 2021 +0900

    dtc: Remove -O dtbo support
    
    This partially reverts 163f0469bf2e ("dtc: Allow overlays to have
    .dtbo extension").
    
    I think accepting "dtbo" as --out-format is strange. This is not
    shown by --help, at least.
    
    *.dtb and *.dtbo should have the same format, "dtb".
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Message-Id: <20210311094956.924310-1-masahiroy@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8e7ff260f755548f5b039ab4e0a970dfff8073b2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 9 14:49:35 2021 +1100

    libfdt: Fix a possible "unchecked return value" warning
    
    Apparently the unchecked return value of the first fdt_next_tag() call in
    fdt_add_subnode_namelen() is tripping Coverity Scan in some circumstances,
    although it appears not to for the scan on our project itself.
    
    This fdt_next_tag() should always return FDT_BEGIN_NODE, since otherwise
    the fdt_subnode_offset_namelen() above would have returned BADOFFSET or
    BADSTRUCTURE.
    
    Still, add a check to shut Coverity up, gated by a can_assume() to avoid
    bloat in small builds.
    
    Reported-by: Ryan Long <ryan.long@oarcorp.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 88875268c05c9cf342d958a5c65973b0ee45888e
Author: Kumar Gala <kumar.gala@linaro.org>
Date:   Wed Feb 10 13:39:12 2021 -0600

    checks: Warn on node-name and property name being the same
    
    Treat a node-name and property name at the same level of tree as
    a warning
    
    Signed-off-by: Kumar Gala <kumar.gala@linaro.org>
    Message-Id: <20210210193912.799544-1-kumar.gala@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d2279e7e6ee937d7c47250720c92dd58fa1aa68
Author: Kumar Gala <kumar.gala@linaro.org>
Date:   Tue Feb 9 12:46:41 2021 -0600

    checks: Change node-name check to match devicetree spec
    
    The devicetree spec limits the valid character set to:
      A-Z
      a-z
      0-9
      ,._+-
    
    while property can additionally have '?#'.  Change the check to match
    the spec.
    
    Signed-off-by: Kumar Gala <kumar.gala@linaro.org>
    Message-Id: <20210209184641.63052-1-kumar.gala@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f527c867a8c6db6d787a0fc30c00415d9c59131e
Author: Jonathan Gray <jsg@jsg.id.au>
Date:   Sat Feb 6 21:01:10 2021 +1100

    util: limit gnu_printf format attribute to gcc >= 4.4.0
    
    The gnu_printf format attribute was introduced in gcc 4.4.0
    https://gcc.gnu.org/legacy-ml/gcc-help/2012-02/msg00225.html.
    
    Use the printf format attribute on earlier versions of gcc and clang
    (which claims to be gcc 4.2.1 in builtin defines) to fix the build with
    gcc 4.2.1.
    
    Fixes: 588a29f ("util: use gnu_printf format attribute")
    Signed-off-by: Jonathan Gray <jsg@jsg.id.au>
    Message-Id: <20210206100110.75228-1-jsg@jsg.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 183df9e9c2b9e49f14f130fd7a4c0eae8f44288d
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Feb 3 15:26:36 2021 +0530

    gitignore: Ignore the swp files
    
    Ignore the temporary .*.swp files.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Message-Id: <15496f8669ac2bb3b4b61a1a7c978947623cb7c3.1612346186.git.viresh.kumar@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0db6d09584e19b1f313ebfc21c3da32a7e77ca82
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Feb 3 13:14:22 2021 +0530

    gitignore: Add cscope files
    
    Add cscope files in gitignore.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Message-Id: <3c39a6324ef2be64f839e6e6205f4afc63486216.1612338199.git.viresh.kumar@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 307afa1a7be8af23dee81af5c10a8a44009a768e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jan 28 11:24:20 2021 +1100

    Update Jon Loeliger's email
    
    At Jon's request update to a more current address.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ca16a723fa9dde9c5da80dba567f48715000e77c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 6 14:52:26 2021 +1100

    fdtdump: Fix gcc11 warning
    
    In one place, fdtdump abuses fdt_set_magic(), passing it just a small char
    array instead of the full fdt header it expects.  That's relying on the
    fact that in fact fdt_set_magic() will only actually access the first 4
    bytes of the buffer.
    
    This trips a new warning in GCC 11 - and it's entirely possible it was
    always UB.  So, don't do that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 64990a272e8f7cbbdfd5a53f752b5a0db7ddf41c
Author: Ignacy Kuchciński <ignacykuchcinski@gmail.com>
Date:   Wed Jan 13 00:13:23 2021 +0100

    srcpos: increase MAX_SRCFILE_DEPTH
    
    Some kernels require the MAX_SRCFILE_DEPTH to be bigger than 100, and
    since it's just a sanity check to detect infinite recursion it shouldn't
    hurt increasing it to 200.
    
    Signed-off-by: Ignacy Kuchciński <ignacykuchcinski@gmail.com>
    Message-Id: <CAJq_QG0BHBQYT4RnVi0QSxM_vFK2K-5k1eTpJnwZQtWbKnCBJA@mail.gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 163f0469bf2ed8b2fe5aa15bc796b93c70243ddc
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 6 15:26:08 2021 +0530

    dtc: Allow overlays to have .dtbo extension
    
    Allow the overlays to have .dtbo extension instead of just .dtb. This
    allows them to be identified easily by tools as well as humans.
    
    Allow the dtbo outform in dtc.c for the same.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    
    Message-Id: <30fd0e5f2156665c713cf191c5fea9a5548360c0.1609926856.git.viresh.kumar@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3b01518e688d7c7d9d46ac41b11dd2b0c4788775
Author: Justin Covell <jujugoboom@gmail.com>
Date:   Mon Dec 28 20:17:49 2020 -0800

    Set last_comp_version correctly in new dtb and fix potential version issues in fdt_open_into
    
    Changes in v3:
    - Remove noop version sets
    - Set version correctly on loaded fdt in fdt_open_into
    
    Fixes: f1879e1a50eb ("Add limited read-only support for older (V2 and V3) device tree to libfdt.")
    
    Signed-off-by: Justin Covell <jujugoboom@gmail.com>
    
    Message-Id: <20201229041749.2187-1-jujugoboom@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f7e5737f26aa7198db476c94463766910db48941
Author: Paul Barker <pbarker@konsulko.com>
Date:   Sat Dec 19 14:35:21 2020 +0000

    tests: Fix overlay_overlay_nosugar test case
    
    This test was accidentally skipped as the wrong test dts file was built.
    The fragment numbering in this sugar-free test case needed adjusting to
    match the numbering generated by dtc for overlay_overlay.dts.
    
    Signed-off-by: Paul Barker <pbarker@konsulko.com>
    Message-Id: <20201219143521.2118-1-pbarker@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7cd5d5fe43d56e3017397fa3a086096e11920c3e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 16 16:51:38 2020 +1100

    libfdt: Tweak description of assume-aligned load helpers
    
    There's a small inaccuracy in the comment describing these new helpers.
    This corrects it, and reformats while we're there.
    
    Fixes: f98f28ab ("libfdt: Internally perform potentially unaligned loads")
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a7c40409934971ac1bd934ccc411bc6932b86564
Author: Tom Rini <trini@konsulko.com>
Date:   Thu Dec 10 21:27:36 2020 -0500

    libfdt: Internally perform potentially unaligned loads
    
    Commits 6dcb8ba4 "libfdt: Add helpers for accessing unaligned words"
    introduced changes to support unaligned reads for ARM platforms and
    11738cf01f15 "libfdt: Don't use memcpy to handle unaligned reads on ARM"
    improved the performance of these helpers.
    
    On further discussion, while there are potential cases where we could be
    used on platforms that do not fixup unaligned reads for us, making this
    choice the default is very expensive in terms of binary size and access
    time.  To address this, introduce and use new fdt{32,64}_ld_ functions
    that call fdt{32,64}_to_cpu() as was done prior to the above mentioned
    commits.  Leave the existing load functions as unaligned-safe and
    include comments in both cases.
    
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Tom Rini <trini@konsulko.com>
    Message-Id: <20201211022736.31657-1-trini@konsulko.com>
    Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bab85e48a6f4c32a9e8ab201cdaf4a0568c74da7
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Mon Dec 7 17:00:53 2020 +0400

    meson: increase default timeout for tests
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20201207130055.462734-4-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f8b46098824d846675103d9b1ce0a3f7b4548623
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Mon Dec 7 17:00:52 2020 +0400

    meson: do not assume python is installed, skip tests
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20201207130055.462734-3-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 30a56bce4f0bdf59ca52af244d4da5250924bfdd
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Mon Dec 7 17:00:51 2020 +0400

    meson: fix -Wall warning
    
    Meson already handles Wall via the built-in warning_level option.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20201207130055.462734-2-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5e735860c4786418c12751de639b519891a61192
Author: Tom Rini <trini@konsulko.com>
Date:   Wed Nov 4 08:06:05 2020 -0500

    libfdt: Check for 8-byte address alignment in fdt_ro_probe_()
    
    The device tree must be loaded in to memory at an 8-byte aligned
    address.  Add a check for this condition in fdt_ro_probe_() and a new
    error code to return if we are not.
    
    Signed-off-by: Tom Rini <trini@konsulko.com>
    Message-Id: <20201104130605.28874-1-trini@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 67849a327927e1028010e973b36f7b1280ce8184
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Mon Oct 12 11:34:04 2020 +0400

    build-sys: add meson build
    
    The meson build system allows projects to "vendor" dtc easily, thanks to
    subproject(). QEMU has recently switched to meson, and adding meson
    support to dtc will help to handle the QEMU submodule.
    
    meson rules are arguably simpler to write and maintain than
    the hand-crafted/custom Makefile. meson support various backends, and
    default build options (including coverage, sanitizer, debug/release
    etc, see: https://mesonbuild.com/Builtin-options.html)
    
    Compare to the Makefiles, the same build targets should be built and
    installed and the same tests should be run ("meson test" can be provided
    extra test arguments for running the equivalent of checkm/checkv).
    
    There is no support EXTRAVERSION/LOCAL_VERSION/CONFIG_LOCALVERSION,
    instead the version is simply set with project(), and vcs_tag() is
    used for git/dirty version reporting (This is most common and is
    hopefully enough. If necessary, configure-time options could be added
    for extra versioning.).
    
    libfdt shared library is build following regular naming conventions:
    instead of libfdt.so.1 -> libfdt-1.6.0.so (with current build-sys),
    libfdt.so.1 -> libfdt.so.1.6.0. I am not sure why the current build
    system use an uncommon naming pattern. I also included a libfdt.pc
    pkg-config file, as convenience.
    
    Both Linux native build and mingw cross-build pass. CI pass. Tests are
    only run on native build.
    
    The current Makefiles are left in-tree, and make/check still work.
    Eventually, the Makefiles could be marked as deprecated, to start a
    transition period and avoid having to maintain 2 build systems in the
    near future.
    
    (run_tests.sh could eventually be replaced by the meson test runner,
    which would have several advantages in term of flexibility/features,
    but this is left for another day)
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20201012073405.1682782-3-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 05874d08212d23dafd753ab52a5762c9b69b25de
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Mon Oct 12 11:34:03 2020 +0400

    pylibfdt: allow build out of tree
    
    With meson, we have to support out-of-tree build.
    
    Introduce a --top-builddir option, which will default to the current
    directory to lookup generated filed such as version_gen.h and output
    directories.
    
    Other source paths are derived from the location of the setup.py script
    in the source tree.
    
    --build-lib is changed to be relative to the current directory, instead
    of relative to setup.py. This has less surprising results!
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20201012073405.1682782-2-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3bc3a6b9fe0cba171bef7d1cc2b04a362228dd1c
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Oct 12 17:19:45 2020 +0100

    dtc: Fix signedness comparisons warnings: Wrap (-1)
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in dtc's data_copy_file().
    
    Even though maxlen is of an unsigned type, we compare against "-1",
    which is passed in from the parser to indicate an unknown size.
    
    Cast the "-1" to an unsigned size to make the comparison match.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201012161948.23994-9-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e1147b159e9209e1c3102f350445ba9927048b4d
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Oct 12 17:19:43 2020 +0100

    dtc: Fix signedness comparisons warnings: change types
    
    With -Wsign-compare, compilers warn about a mismatching signedness in
    comparisons in various parts of dtc.
    
    Many variables are using signed types unnecessarily, as we never use
    negative value in them.
    Change their types to be unsigned, to prevent issues with comparisons.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201012161948.23994-7-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 04cf1fdc0fcf471c2e77376101bda65f727b3812
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Oct 12 17:19:39 2020 +0100

    convert-dtsv0: Fix signedness comparisons warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness in
    comparisons in the generated lexer code.
    
    In this case we walk over an array, and never use negative indicies, so
    we can change the loop counter variable to be unsigned.
    
    This fixes "make convert-dtsv0", when compiled with -Wsign-compare.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201012161948.23994-3-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b30013edb878a0e4fbe7235f38d8fd6e644479e5
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Oct 12 17:53:31 2020 +0100

    libfdt: Fix kernel-doc comments
    
    The API documentation in libfdt.h seems to follow the Linux kernel's
    kernel-doc format[1].
    
    Running "scripts/kernel-doc -v -none" on the file reports some problems,
    mostly missing return values and missing parameter descriptions.
    
    Fix those up by providing the missing bits, and fixing the other small
    issues reported by the script.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    
    [1] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/doc-guide/kernel-doc.rst
    Message-Id: <20201012165331.25016-1-andre.przywara@arm.com>
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cbca977ea121d7483b0c2351b17dca08a21cb1ca
Author: Rob Herring <robh@kernel.org>
Date:   Mon Sep 28 15:19:41 2020 -0500

    checks: Allow PCI bridge child nodes without an address
    
    Some PCI bridge nodes have child nodes such as an interrupt controller
    which are not PCI devices. Allow these nodes which don't have a
    unit-address.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20200928201942.3242124-1-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 73e0f143b73d80889124e209548ee46834c6b559
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:30 2020 +0100

    libfdt: fdt_strerror(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_strerror().
    
    Force FDT_ERRTABSIZE to be signed (it's surely small enough to fit), so
    that the types match. Also move the minus sign to errval, as this is
    actually what we use in the next line.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-7-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c2be7d85315008be974984c0c86a8c8e55adeea
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:29 2020 +0100

    libfdt: fdt_get_string(): Fix sequential write comparison warnings
    
    With -Wsign-compare, compilers warn about a mismatching signedness in
    comparisons in fdt_get_string().
    
    Introduce a new usigned variable, which holds the actual (negated)
    stroffset value, so we avoid negating all the other variables and have
    proper types everywhere.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-6-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 82525f41d59ec57a4e9325796a6f1baefc036236
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:28 2020 +0100

    libfdt: libfdt_wip: Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_setprop_inplace_namelen_partial().
    
    fdt_getprop_namelen() will only return negative error values in "proplen"
    if the return value is NULL. So we can rely on "proplen" being positive
    in our case and can safely cast it to an unsigned type.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-5-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fb1f65f158327895acd360683e5c6da56d6944ea
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:27 2020 +0100

    libfdt: fdt_create_with_flags(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_create_with_flags().
    
    By making hdrsize a signed integer (we are sure it's a very small
    number), we avoid all the casts and have matching types.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-4-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f28aa271000bfeaa765b824a8a3e7b170da12925
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:26 2020 +0100

    libfdt: fdt_move(): Fix comparison warnings
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in comparisons in fdt_move().
    
    This stems from "bufsize" being passed in as a signed integer, even
    though we would expect a buffer size to be positive.
    
    Short of changing the prototype, check that bufsize is not negative, and
    cast it to an unsigned type in the comparison.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-3-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3d7c6f44195a78dfa52b1b8c9efd7efd706b0dd9
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Oct 1 17:46:25 2020 +0100

    libfdt: fdt_add_string_(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_add_string_().
    
    Make all variables unsigned, and express the negative offset trick via
    subtractions in the code.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20201001164630.4980-2-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 10f682788c3023d319cdc14f59ffe9d91cb6d2fc
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:53:02 2020 +0100

    libfdt: fdt_node_offset_by_phandle(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_node_offset_by_phandle().
    
    Uses a better suited bitwise NOT operator to denote the special value of
    -1, which automatically results in an unsigned type.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-14-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 07158f4cf2a2fa2267b7a86f138a4f16ecb54172
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:53:00 2020 +0100

    libfdt: overlay: Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness in
    a comparison in overlay_update_local_node_references().
    
    This happens because the division of a signed int by an unsigned int
    promotes the dividend to unsigned first (ANSI C standard 6.1.3.8).
    
    As in this case we basically just divide by 4, we can do the division
    separately earlier, which preserves the original type.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-12-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ce9e1f25a7de457734d0fb314224c99102e7ebbe
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:52:58 2020 +0100

    libfdt: fdt_resize(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_resize().
    
    A negative buffer size will surely do us no good, so let's rule this
    case out first.
    In the actual comparison we then know that a cast to an unsigned type is
    safe.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-10-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit faa76fc10bc5819899d6bc78535d212acaccbd6a
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:52:56 2020 +0100

    libfdt: fdt_splice_(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_splice_().
    
    Since we just established that oldlen is not negative, we can safely
    cast it to an unsigned type.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-8-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 54dca098531699dc8beeaf97e3525b9b5eb23b0a
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Sep 21 17:52:55 2020 +0100

    libfdt: fdt_get_string(): Fix comparison warnings
    
    With -Wsign-compare, compilers warn about a mismatching signedness in
    comparisons in fdt_get_string().
    
    In the first two cases, we have just established that the signed values
    are not negative, so it's safe to cast the values to an unsigned type.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-7-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f8e11e61624e7ea9307655fe4b5bb66f2d0c1be8
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:52:52 2020 +0100

    libfdt: fdt_grab_space_(): Fix comparison warning
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in a comparison in fdt_grab_space_().
    
    All the involved values cannot be negative, so let's switch the types of
    the local variables to unsigned to make the compiler happy.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-4-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0c43d4d7bf5a3a2e83d2005daf1e44ea5bd7f069
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:52:51 2020 +0100

    libfdt: fdt_mem_rsv(): Fix comparison warnings
    
    With -Wsign-compare, compilers warn about a mismatching signedness
    in comparisons in fdt_mem_rsv().
    
    Since all involved values must be positive, change the used types to be
    unsigned.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-3-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 442ea3dd157906ce23df8001095562d3492a471c
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Mon Sep 21 17:52:50 2020 +0100

    libfdt: fdt_offset_ptr(): Fix comparison warnings
    
    With -Wsign-compare, compilers warn about mismatching signedness in
    comparisons in fdt_offset_ptr().
    
    This mostly stems from "offset" being passed in as a signed integer,
    even though the function would not really tolerate negative values.
    
    Short of changing the prototype, check that offset is not negative, and
    use an unsigned type internally.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200921165303.9115-2-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ca19c3db2bf62000101ae8f83c37cd6e0d44d218
Author: Emmanuel Vadot <manu@FreeBSD.org>
Date:   Tue Aug 25 12:34:18 2020 +0200

    Makefile: Specify cflags for libyaml
    
    Some systems don't install third party software includes in a default
    path (like FreeBSD), add yaml cflags to fix compilation.
    
    Signed-off-by: Emmanuel Vadot <manu@FreeBSD.org>

commit 7bb86f1c09563f502c6ab0166feacf346e4e8c40
Author: Frank Mehnert <frank.mehnert@kernkonzept.com>
Date:   Thu Aug 13 17:26:26 2020 +0200

    libfdt: fix fdt_check_node_offset_ w/ VALID_INPUT
    
    fdt_check_node_offset_() checks for a valid offset but also changes the
    offset by calling fdt_next_tag(). Hence, do not skip this function if
    ASSUME_VALID_INPUT is set but only omit the initial offset check in that
    case.
    
    As this function works very similar to fdt_check_prop_offset_(), do the
    offset check there as well depending on ASSUME_VALID_INPUT.
    Message-Id: <1913141.TlUzK5foHS@noys4>
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3d522abc7571e1851ce71fcf0c3452ef287b1bab
Author: Andrei Ziureaev <andrei.ziureaev@arm.com>
Date:   Tue Jul 21 16:58:57 2020 +0100

    dtc: Include stdlib.h in util.h
    
    If used on its own, util.h needs stdlib.h for exit(), malloc() and
    realloc().
    
    Signed-off-by: Andrei Ziureaev <andrei.ziureaev@arm.com>
    Message-Id: <20200721155900.9147-2-andrei.ziureaev@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 808cdaaf524f6beb95e0ea87fc42711dbddef21a
Author: Andrei Ziureaev <andrei.ziureaev@arm.com>
Date:   Tue Jul 14 16:45:37 2020 +0100

    dtc: Avoid UB when shifting
    
    Prevent undefined behavior when shifting by a number that's bigger than
    or equal to the width of the first operand.
    
    Signed-off-by: Andrei Ziureaev <andrei.ziureaev@arm.com>
    Message-Id: <20200714154542.18064-2-andrei.ziureaev@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3e3138b4a9565934487d7b39019282e75a894487
Author: Patrick Oppenlander <patrick.oppenlander@gmail.com>
Date:   Thu Jul 9 14:14:51 2020 +1000

    libfdt: fix fdt_check_full buffer overrun
    
    fdt_check_header assumes that its argument points to a complete header
    and can read data beyond the FDT_V1_SIZE bytes which fdt_check_full
    can provide.
    
    fdt_header_size can safely return a header size with FDT_V1_SIZE bytes
    available and will return a usable value even for a corrupted header.
    
    Signed-off-by: Patrick Oppenlander <patrick.oppenlander@gmail.com>
    Message-Id: <20200709041451.338548-1-patrick.oppenlander@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d7888cbf19c2930992844e69a097dc71e5a7354
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Jun 23 11:43:43 2020 +0200

    dtc: Consider one-character strings as strings
    
    When using overlays, a target-path property pointing to the root node is
    quite common.  However, "dtc -O dts" prints it as a byte array:
    
        target-path = [2f 00];
    
    instead of a string:
    
        target-path = "/";
    
    For guess_value_type() to consider a value to be a string, it must
    contain less nul bytes than non-nul bytes, thus ruling out strings
    containing only a single character.  Allow printing such strings by
    relaxing the condition slightly.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Message-Id: <20200623094343.26010-1-geert+renesas@glider.be>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8259d59f59def85194bd71e855176a3b2ef8702f
Author: Joel Stanley <joel@jms.id.au>
Date:   Mon Jun 22 12:40:05 2020 +0930

    checks: Improve i2c reg property checking
    
    The i2c bindings in the kernel tree describe support for 10 bit
    addressing, which must be indicated with the I2C_TEN_BIT_ADDRESS flag.
    When this is set the address can be up to 10 bits. When it is not set
    the address is a maximum of 7 bits.
    
    See Documentation/devicetree/bindings/i2c/i2c.txt.
    
    Take into account this flag when checking the address is valid.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Message-Id: <20200622031005.1890039-3-joel@jms.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fdabcf2980a467bb255ea6661eba7273cfa7d708
Authorq: Joel Stanley <joel@jms.id.au>
Date:   Mon Jun 22 12:40:04 2020 +0930

    checks: Remove warning for I2C_OWN_SLAVE_ADDRESS
    
    dtc does a sanity check on reg properties that they are within the 10
    bit address range for i2c slave addresses. In the case of multi-master
    buses or devices that act as a slave, the binding may describe an
    address that the bus will listen on as a device. Do not warn when this
    flag is set.
    
    See Documentation/devicetree/bindings/i2c/i2c.txt.
    
    This fixes the following build warnings reported by Stephen and by Arnd:
    
    arch/arm/boot/dts/aspeed-bmc-facebook-yosemitev2.dts:126.11-130.4:
      Warning (i2c_bus_reg): /ahb/apb/bus@1e78a000/i2c-bus@80/ipmb1@10:
        I2C bus unit address format error, expected "40000010"
    arch/arm/boot/dts/aspeed-bmc-facebook-yosemitev2.dts:128.3-30:
      Warning (i2c_bus_reg): /ahb/apb/bus@1e78a000/i2c-bus@80/ipmb1@10:reg:
        I2C address must be less than 10-bits, got "0x40000010"
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Message-Id: <20200622031005.1890039-2-joel@jms.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2478b1652c8d39ce7921cda83eaba9c86cadbd36
Author: Patrick Oppenlander <patrick.oppenlander@gmail.com>
Date:   Tue Jun 16 11:12:17 2020 +1000

    libfdt: add extern "C" for C++
    
    Signed-off-by: Patrick Oppenlander <patrick.oppenlander@gmail.com>
    Message-Id: <20200616011217.15253-1-patrick.oppenlander@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f68bfc2668b2e090b5b2f55cce93aad42fb08c6c
Author: Patrick Oppenlander <patrick.oppenlander@gmail.com>
Date:   Thu Jun 18 14:21:17 2020 +1000

    libfdt: trivial typo fix
    
    Signed-off-by: Patrick Oppenlander <patrick.oppenlander@gmail.com>
    Message-Id: <20200618042117.131731-1-patrick.oppenlander@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7be250b4d059771c47be00ec8d4df7f47e4ac77c
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Jun 15 10:00:33 2020 -0600

    libfdt: Correct condition for reordering blocks
    
    This condition uses bitwise OR but should be logical OR. Fix it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Message-Id: <20200615160033.87328-1-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 81e0919a3e211844245a3c19be28610f930c13c0
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 15 15:18:25 2020 +0100

    checks: Add interrupt provider test
    
    An interrupt provider (an actual interrupt-controller node or an
    interrupt nexus) should have both #address-cells and #interrupt-cells
    properties explicitly defined.
    
    Add an extra test for this. We check for the #interrupt-cells property
    already, but this does not cover every controller so far, only those that
    get referenced by an interrupts property in some node. Also we miss
    interrupt nexus nodes.
    
    A missing #address-cells property is less critical, but creates
    ambiguities when used in interrupt-map properties, so warn about this as
    well now.
    This removes the now redundant warning in the existing interrupts test.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Message-Id: <20200515141827.27957-2-andre.przywara@arm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 85e5d839847af54efab170f2b1331b2a6421e647
Author: Claudio Fontana <cfontana@suse.de>
Date:   Tue May 12 12:33:15 2020 +0200

    Makefile: when building libfdt only, do not add unneeded deps
    
    implemented originally for the QEMU consumer of libfdt.
    
    Signed-off-by: Claudio Fontana <cfontana@suse.de>
    Message-Id: <20200512103315.1926-1-cfontana@suse.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b28464a550c536296439b5785ed8852d1e15b35b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 14 15:02:51 2020 +1000

    Fix some potential unaligned accesses in dtc
    
    Because of the convention of packed representations in property layouts,
    it's not uncommon to have integer values in properties which aren't
    naturally aligned.  Thus, there are several places in the dtc code where we
    cast a potentially unaligned byte pointer into an integer pointer and load
    it directly.  On a number of architectures (including sparc64 and arm) this
    won't work and will cause a fault.  In some cases it may be trapped and
    emulated by the kernel, but not always.
    
    Therefore, replace such direct unaligned reads with a helper which will
    handle unaligned data reads (a variant on the fdtXX_ld() functions already
    used in libfdt).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 87a656ae5ff96c4903e68eb2f999532a3b98e3a7
Author: Arkadiusz Drabczyk <arkadiusz@drabczyk.org>
Date:   Sun Mar 8 17:56:43 2020 +0100

    check: Inform about missing ranges
    
    In check_unit_address_vs_reg() warning message already says 'reg _or_
    ranges' when reg or ranges are present but unit name is missing.  Add
    this message for compatibility to say "reg _or_ ranges" when unit name
    is present but neither reg nor ranges are present.
    
    Signed-off-by: Arkadiusz Drabczyk <arkadiusz@drabczyk.org>
    Message-Id: <20200308165643.19281-1-arkadiusz@drabczyk.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 73d6e9ecb4179b510408bc526240f829262df361
Author: Jan Beulich <jbeulich@suse.com>
Date:   Thu Mar 5 15:04:45 2020 +0100

    libfdt: fix undefined behaviour in fdt_splice_()
    
    libfdt: fix undefined behaviour in fdt_splice_()
    
    Along the lines of commit d0b3ab0a0f46 ("libfdt: Fix undefined behaviour
    in fdt_offset_ptr()"), fdt_splice_() similarly may not use pointer
    arithmetic to do overflow checks. (The left side of the checks added by
    d4c7c25c9ed1 ["libfdt: check for potential overrun in _fdt_splice()"]
    doesn't really lend itself to similar replacement though.)
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Message-Id: <f2d09e81-7cb8-c5cc-9699-1ac05b0626ff@suse.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2525da3dba9beceb96651dc2986581871dbeca30
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 17:14:58 2020 +1100

    Bump version to v1.6.0
    
    We've accumulated some new features and a bunch of fixes.  Also the
    versioning on v1.5.1 was messed up :(.  Prepare for another release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 62cb4ad286ff82648232f769f78401bf6b00deda
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 16:40:00 2020 +1100

    Execute tests on FreeBSD with Cirrus CI
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1f9a417508837fca4dd0e3bf0e3c0e5c9fb93edf
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 16:26:33 2020 +1100

    tests: Allow running the testsuite on already installed binary / libraries
    
    Currently the test runner script always expects to be run from within the
    tests/ subdirectory of a dtc source tree: it looks for dtc and other
    binaries in the parent of the current directory and for the libfdt shared
    library in ../libfdt.
    
    That works great with make check and for testing a build you've just made.
    However, sometimes it's useful to test a dtc & libfdt which have already
    been installed on the system, or which for whatever reason are located
    somewhere else.
    
    This patch allows the test runner script to do this when TEST_BINDIR and/or
    TEST_LIBDIR environment variables are set.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c5995ddf4c20345886120048bf0cd8e8d7cc597f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 16:10:06 2020 +1100

    tests: Honour NO_YAML make variable
    
    Support for YAML output in dtc is optional (to cover systems that don't
    have libyaml).  Currently the tests for yaml output test if the libyaml
    package is locally installed.
    
    That duplicates similar logic in the Makefile, and worse it will cause
    failed tests if the user explicitly disables YAML support, rather than
    simply not having libyaml installed.
    
    Fix this by having the test script use the NO_YAML variable exported by
    make.  Fall back to the current test if the variable isn't set, such as
    when running the script manually.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e4ce227e89d7334c44e0018ae837e0a2a824a812
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 16:05:31 2020 +1100

    tests: Properly clean up .bak file from tests
    
    One of our testcases creates a .bak file from invoking sed.  Fix that to be
    removed by make clean, and also ignore it in git to avoid clutter.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9b75292c335ca4d4f93ba91db92d4de1f0269e93
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 15:45:47 2020 +1100

    tests: Honour $(NO_PYTHON) flag from Makefile in run_tests.sh
    
    Currently the test script bases whether to run the Python tests on whether
    it can see a built Python module.  That can easily be fooled if there is
    a stale module there.
    
    Instead, have it actually look at the NO_PYTHON variable exported from the
    Makefile.  If the variable doesn't exist (such as if we're running the
    script manually) fall back on the old logic.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c253afd07d4722aaa7f72d33ca7cbeba973ccfb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 15:44:00 2020 +1100

    Encode $(NO_PYTHON) consistently with other variables
    
    We have several $(NO_*) variables used to disable optional features.
    $(NO_PYTHON) is encoded as empty for "include Python support" and anything
    else for "disable Python support".
    
    However the other variables - $(NO_YAML) and $(NO_VALGRIND) - use 0 for
    "include" and 1 for "disable".  Change $(NO_PYTHON) to work consistently
    with the others.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 95ec8ef706bd776f3154f6a4dfa11b07433a2a80
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 15:38:48 2020 +1100

    tests: No need to explicitly pass $PYTHON from Make to run_tests.sh
    
    Make automatically passes its variables through the environment, so
    we don't need to explicitly copy this one into the test script.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2b5f62d109a24fd7032ed790dbf74f8dc7962313
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 4 15:32:47 2020 +1100

    tests: Let run_tests.sh run Python tests without Makefile assistance
    
    Currently run_tests.sh needs the $PYTHON environment variable set to
    correctly run pylibfdt tests.  The Makefile does this for make check, but
    it breaks if the script is run manually.  Add a fallback to handle that
    case.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 76b43dcbd18a67fa366d6383093621dfa4f7f28c
Author: Rob Herring <robh@kernel.org>
Date:   Tue Mar 3 13:39:31 2020 -0600

    checks: Add 'dma-ranges' check
    
    Generalize the existing 'ranges' check to also work for 'dma-ranges'
    which has the same parsing requirements.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20200303193931.1653-1-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e5c92a4780c636fcfa6a84080d365f74393071aa
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Mar 2 12:02:55 2020 -0700

    libfdt: Use VALID_INPUT for FDT_ERR_BADSTATE checks
    
    This error indicates a logic bug in the code calling libfdt, so VALID_DTB
    is not really the right check. Update it to use VALID_INPUT instead.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200302190255.51426-4-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e5cc26b68bc094c9260caaf330e03bb71129082e
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Mar 2 12:02:54 2020 -0700

    libfdt: Add support for disabling internal checks
    
    If libfdt returns -FDT_ERR_INTERNAL that generally indicates a bug in the
    library. Add a new assumption for these cases since it should be save to
    disable these checks regardless of the input.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200302190255.51426-3-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 28fd7590aad2ab4c0aae6b6674b15f103c492d64
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Mar 2 12:02:53 2020 -0700

    libfdt: Improve comments in some of the assumptions
    
    Add a little more detail in a few of these comments.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200302190255.51426-2-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fc207c32341bb58ee2a43d105540674d44ba0f7b
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Mar 2 12:02:52 2020 -0700

    libfdt: Fix a few typos
    
    Fix 'saftey' and 'additional' typos noticed in the assumption series.
    Reword the ASSUME_NO_ROLLBACK slightly to improve clarity.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200302190255.51426-1-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0f61c72dedc4bf11cd19a78fc36a7bde99d653e0
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:57 2020 -0700

    libfdt: Allow exclusion of fdt_check_full()
    
    This function is used to perform a full check of the device tree. Allow
    it to be excluded if all assumptions are enabled.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200220214557.176528-9-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f270f45fd5d2baac37d559f0063110cb646b2332
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:56 2020 -0700

    libfdt: Add support for disabling ordering check/fixup
    
    Add a way to remove this check and the reordering code, which is
    unnecessary if the dtb is known to be correctly ordered.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200220214557.176528-8-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c18bae9a4c96a9258fdcee30fe4b0c4fc3730036
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:55 2020 -0700

    libfdt: Add support for disabling version checks
    
    Allow enabling FDT_ASSUME_LATEST to disable version checks.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200220214557.176528-7-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fc03c4a2e04ef76f54582bfcd3ad17d0b0507e9a
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:54 2020 -0700

    libfdt: Add support for disabling rollback handling
    
    Allow enabling FDT_ASSUME_NO_ROLLBACK to disable rolling back after a
    failed operation.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20200220214557.176528-6-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 77563ae72b7c3349008e712669253f6c54b752a7
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:53 2020 -0700

    libfdt: Add support for disabling sanity checks
    
    Allow enabling ASSUME_VALID_INPUT to disable sanity checks on the device
    tree and the parameters to libfdt. This assumption covers that cases where
    the problem could be with either.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20200220214557.176528-5-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 57bc6327b80bc95bee9fc5f07d4fc83186a8f167
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:52 2020 -0700

    libfdt: Add support for disabling dtb checks
    
    Support ASSUME_VALID_DTB to disable some sanity checks
    
    If we assume that the DTB itself is valid then we can skip some checks and
    save code space. Add various conditions to handle this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20200220214557.176528-4-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 464962489dcc563e354ff64c9e58856185f32728
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:51 2020 -0700

    Add a way to control the level of checks in the code
    
    Add a new ASSUME_MASK option, which allows for some control over the
    checks used in libfdt. With all assumptions enabled, libfdt assumes that
    the input data and parameters are all correct and that internal errors
    cannot happen.
    
    By default no assumptions are made and all checks are enabled.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20200220214557.176528-3-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0c5326cb2845922ad809190dae783940e1df2f0c
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Feb 20 14:45:50 2020 -0700

    libfdt: De-inline fdt_header_size()
    
    There does not seem to be a strong reason to inline this function. Also
    we are about to add some extra code to it which will increase its size.
    
    Move it into fdt.c and use a simple declaration in libfdt.h
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20200220214557.176528-2-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cc6a5a07150427b7b527fc753cd09f8bf518cd9c
Author: Rob Herring <robh@kernel.org>
Date:   Fri Jan 24 08:46:57 2020 -0600

    Revert "yamltree: Ensure consistent bracketing of properties with phandles"
    
    This reverts commit 18d7b2f4ee45fec422b7d82bab0b3c762ee907e4.
    
    This doesn't work for properties such as 'interrupt-map' that has
    phandle in the middle of an entry. It would also not work for a 0 or -1
    phandle value that acts as a NULL.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20200124144657.29749-1-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0e9225eb0dfec51def612b928d2f1836b092bc7e
Author: Dirk Mueller <dmueller@suse.com>
Date:   Tue Jan 14 18:53:41 2020 +0100

    Remove redundant YYLOC global declaration
    
    gcc 10 will default to -fno-common, which causes this error at link
    time:
    
      (.text+0x0): multiple definition of `yylloc'; dtc-lexer.lex.o (symbol from plugin):(.text+0x0): first defined here
    
    This is because both dtc-lexer as well as dtc-parser define the same
    global symbol yyloc. Before with -fcommon those were merged into one
    defintion. The proper solution would be to to mark this as "extern",
    however that leads to:
    
      dtc-lexer.l:26:16: error: redundant redeclaration of 'yylloc' [-Werror=redundant-decls]
       26 | extern YYLTYPE yylloc;
          |                ^~~~~~
    In file included from dtc-lexer.l:24:
    dtc-parser.tab.h:127:16: note: previous declaration of 'yylloc' was here
      127 | extern YYLTYPE yylloc;
          |                ^~~~~~
    cc1: all warnings being treated as errors
    
    which means the declaration is completely redundant and can just be
    dropped.
    
    Signed-off-by: Dirk Mueller <dmueller@suse.com>
    Message-Id: <20200114175341.2994-1-dmueller@suse.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cab09eedd644cebdb4390b8b269012350d291cba
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 19 13:14:45 2019 +1100

    Move -DNO_VALGRIND into CPPFLAGS
    
    Since -D sets preprocessor directives, it applies for the preprocessor not
    just the C compiler proper and so belongs in CPPFLAGS rather than CFLAGS.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0eb1cb0b531eeaf79b572baec978d40eefe06ca8
Author: Ed Maste <emaste@freebsd.org>
Date:   Tue Dec 10 16:30:33 2019 +0000

    Makefile: pass $(CFLAGS) also during dependency generation
    
    When Valgrind is not available NO_VALGRIND is set in CFLAGS, and this
    is needed during dependency generation as well as compilation.
    Message-Id: <20191210163033.9888-1-emaste@freefall.freebsd.org>
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c40aeb60b47a56e3d4d3aebb6fffff2117f8c9eb
Author: Thomas Huth <thuth@redhat.com>
Date:   Tue Dec 3 13:20:20 2019 +0100

    travis.yml: Run tests on the non-x86 builders, too
    
    Travis recently added the possibility to compile on aarch64, ppc64le
    and s390x hosts, so let's add this possibility to the dtc CI, too.
    Unfortunately, there are some weird valgrind errors when running
    on ppc64le (which rather look like a problem on the valgrind side to
    me, and not in dtc), so we can not use "checkm" on ppc64le yet.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20191203122020.14442-1-thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9f86aff444f4df9d5b12a8013ffb136562009631
Author: Ed Maste <emaste@freebsd.org>
Date:   Wed Nov 20 21:11:33 2019 +0000

    Add .cirrus.yml for FreeBSD build
    
    Right now this is just a build test for FreeBSD, along with a Linux build
    and "make check."  A later change will add "gmake check" for FreeBSD.
    
    Signed-off-by: Ed Maste <emaste@freebsd.org>
    Message-Id: <20191120211133.69281-1-emaste@freefall.freebsd.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 34c82275bae6a1ff1350af036bfb5127f6bc1407
Author: Ed Maste <emaste@freebsd.org>
Date:   Wed Nov 20 21:04:22 2019 +0000

    Avoid gnu_printf attribute when using Clang
    
    Clang does not support gnu_printf, so just use printf when using it to
    compile.
    
    Signed-off-by: Ed Maste <emaste@freebsd.org>
    Message-Id: <20191120210422.61327-1-emaste@freefall.freebsd.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 743000931bc975810e13da2965ac2ef07166b4f3
Author: Ed Maste <emaste@freebsd.org>
Date:   Fri Nov 15 15:51:08 2019 +0000

    tests: default to 'cc' if CC not set
    
    By default FreeBSD does not have 'gcc' in the PATH (on common platforms).
    As on Linux 'cc' is available as a link to the default compiler (Clang or
    GCC), so just use 'cc'.
    
    Signed-off-by: Ed Maste <emaste@freebsd.org>
    Message-Id: <20191115155108.39488-1-emaste@freefall.freebsd.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit adcd676491ccbefc17da551cf911b2f4d7d330f6
Author: Stefan Mavrodiev <stefan@olimex.com>
Date:   Mon Nov 11 10:04:44 2019 +0200

    Add test-case for trailing zero
    
    If there is trailing zero, fdtget adds extra chacarter to the
    property value. Thus comparing the expected with the actual
    value, an error is emitted.
    
    Signed-off-by: Stefan Mavrodiev <stefan@olimex.com>
    Message-Id: <20191111080444.9819-3-stefan@olimex.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d9c55f855b65872e9cc74799499416414441c217
Author: Stefan Mavrodiev <stefan@olimex.com>
Date:   Mon Nov 11 10:04:43 2019 +0200

    Remove trailing zero from the overlay path
    
    The overlay path ends with trailing zero. When adding this path
    as property value, this character should be removed. This is the case
    when the overlay adds a node with an alias.
    
    Signed-off-by: Stefan Mavrodiev <stefan@olimex.com>
    Message-Id: <20191111080444.9819-2-stefan@olimex.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7a22132c79ecbefc6dccfc14ee5d4aae5ef2f452
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Nov 12 18:24:10 2019 -0700

    pylibfdt: Adjust for deprecated test methods
    
    Python recently deprecated some test methods in favour of others. Adjust
    the code to avoid warnings.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20191113012410.62550-1-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit dbe80d577ee2670a132ab5b7458bf4d3ca94c4f4
Author: Ed Maste <emaste@freebsd.org>
Date:   Thu Nov 14 20:36:15 2019 +0000

    tests: add extension to sed -i for GNU/BSD sed compatibility
    
    BSD sed requires that an extension is provided to the -i (in-place edit)
    flag, which may immediately follow the -i or may be separated by a space -
    sed -i .bak and sed -i.bak are equivalent.  The extension is optional with
    GNU sed, but if provided must immediately follow the -i.  Thus, sed -i.bak
    behaves identically with both GNU and BSD sed.
    
    Signed-off-by: Ed Maste <emaste@freebsd.org>
    Message-Id: <20191114203615.2866-1-emaste@freefall.freebsd.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit af57d440d887c03d305cc6b18d53daf06766cd5b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 8 14:42:53 2019 +0000

    libfdt: Correct prototype for fdt_ro_probe_()
    
    This function returns an int32_t, however the prototype in
    libfdt_internal.h shows it returning an int.  We haven't caught this before
    because they're the same type on nearly all platforms this gets built on.
    Apparently it's not the case on FreeRTOS, so someone hit this mismatch
    building for that platform.
    
    Reported-by: dharani kumar <dharanikumarsrvn@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6ce585ac153b1bcf4d9110d1cf589bdbeab301cf
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 7 17:46:43 2019 +0100

    Use correct inttypes.h format specifier
    
    The type here is uint32_t which should use PRIx32, not plain %x which is
    for an int, we've just gotten away with it so far.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7150286225476345bd6e7312331e3baf4d621c32
Author: Ethan Sommer <e5ten.arch@gmail.com>
Date:   Tue Oct 29 12:26:19 2019 -0400

    support byacc in addition to bison
    
    Use -b to explicitly set file prefix, so that byacc generates files with
    the same names as bison.
    
    Add %locations to dtc-parser.y to explicitly enable location tracking
    for byacc, and define YYERROR_CALL to prevent byacc from defining it to
    call yyerror with 2 parameters because of the locations directive,
    because dtc-parser.y defines yyerror to accept one parameter.
    
    Signed-off-by: Ethan Sommer <e5ten.arch@gmail.com>
    Message-Id: <20191029162619.32561-1-e5ten.arch@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fdf3f6d897ab8759fb7d7277ba5224beb4727d1d
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Oct 24 19:02:26 2019 -0600

    pylibfdt: Correct the type for fdt_property_stub()
    
    This function should use a void * type, not char *. This causes an error:
    
    TypeError: in method 'fdt_property_stub', argument 3 of type 'char const *'
    
    Fix it and update the tests.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20191025010226.34378-1-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 430419c28100960c554cf753a5309231c03ec780
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:23 2019 +0400

    tests: fix some python warnings
    
    Fixes:
    ResourceWarning: unclosed file <_io.BufferedReader name='test_tree1.dtb'>
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-9-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 588a29ff2e4e9291143d837daa6b9b5f0a9fa91c
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:22 2019 +0400

    util: use gnu_printf format attribute
    
    dtc uses non-portable formats. Using gnu_printf attributes (for
    warnings) in combination with __USE_MINGW_ANSI_STDIO allows to build
    for win32.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-8-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bc876708ab1dbb41f3890fa801b69e9ca01cefa1
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:21 2019 +0400

    fstree: replace lstat with stat
    
    Fixes mingw cross-compilation. lstat() doesn't exist on win32.
    
    It seems to me that stat() is the right function there, to return
    informations about the file it refers to.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-7-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4c3c4ccb9916411aaa682cb60acfbfd7d6232a33
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:18 2019 +0400

    dumptrees: pass outputdir as first argument
    
    Instead of outputing files to current directory, allow to specificy an
    output directory. This helps with meson build system out-of-tree support.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-4-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aa522da9fff610e9fdad62f5d191e9cbd4ff0fc5
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:17 2019 +0400

    tests: allow out-of-tree test run
    
    meson runs out-of-tree, add absolute path location where necessary.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-3-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0d0d0fa51b1f9703d324bac1d8cf000adca6be62
Author: Valter Minute <valter.minute@toradex.com>
Date:   Wed Oct 9 12:33:52 2019 +0000

    fdtoverlay: Return non-zero exit code if overlays can't be applied
    
    At present the tool terminates its execution if one of the overlays passed
    as command-line arguments can't be successfully read or applied, but the exit
    code of the process is zero, making failures hard to detect inside scripts.
    
    Signed-off-by: Valter Minute <valter.minute@toradex.com>
    Message-Id: <20191009123256.14248-1-valter.minute@toradex.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4605eb047b38f5b3d0d03182d90273f01c68a857
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Oct 9 14:20:16 2019 +0400

    Add .editorconfig
    
    Set code style for various editors.
    
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20191009102025.10179-2-marcandre.lureau@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 18d7b2f4ee45fec422b7d82bab0b3c762ee907e4
Author: Rob Herring <robh@kernel.org>
Date:   Wed Sep 18 13:35:34 2019 -0500

    yamltree: Ensure consistent bracketing of properties with phandles
    
    The dts syntax allows for '<>' around phandles and arg cells or not
    which it didn't matter until adding type information. However, the YAML
    encoding expects each phandle + args to be bracketed.
    
    If TYPE_UINT32 markers are not present before each REF_PHANDLE, fix up
    the markers and add the TYPE_UINT32 markers. This allows the subsequent
    YAML emitting code to work as-is.
    
    Adding the markers at an earlier stage doesn't work because of
    possible labels in dts output. We'd have to define the ordering of
    labels and brackets. Also, it is probably best to have dts output match
    the input.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190918183534.24205-1-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 67f790c1adccdf56f6560739a2a6194b99fdc838
Author: Luc Michel <luc.michel@greensocs.com>
Date:   Tue Sep 10 12:48:24 2019 +0200

    libfdt.h: add explicit cast from void* to uint8_t* in fdt(32|64)_st
    
    Including libfdt.h in a C++ project fails during compilation with recent
    version of GCC or Clang.
    
    This simple example:
    
    extern "C" {
     #include <libfdt.h>
    }
    
    int main(void) { return 0; }
    
    leads to the following errors with GCC 9.1.0:
    
    /usr/include/libfdt.h: In function ‘void fdt32_st(void*, uint32_t)’:
    /usr/include/libfdt.h:139:16: error: invalid conversion from ‘void*’ to ‘uint8_t*’ {aka ‘unsigned char*’} [-fpermissive]
      139 |  uint8_t *bp = property;
          |                ^~~~~~~~
          |                |
          |                void*
    /usr/include/libfdt.h: In function ‘void fdt64_st(void*, uint64_t)’:
    /usr/include/libfdt.h:163:16: error: invalid conversion from ‘void*’ to ‘uint8_t*’ {aka ‘unsigned char*’} [-fpermissive]
      163 |  uint8_t *bp = property;
          |                ^~~~~~~~
          |                |
          |                void*
    
    This commit adds an explicit cast to uint8_t* to fix this issue.
    
    Signed-off-by: Luc Michel <luc.michel@greensocs.com>
    Message-Id: <20190910104824.1321594-1-luc.michel@greensocs.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b111122ea5eb15325c493dde43fdf94732c97d44
Author: Luca Weiss <luca@z3ntu.xyz>
Date:   Sat Sep 7 17:25:31 2019 +0200

    pylibfdt: use python3 shebang
    
    The default Python version for pylibfdt is already Python 3 but if
    called without specifiying an interpreter, the setup.py script gets
    called with Python 2.
    
    It's of course still possible to call setup.py with python2 directly.
    
    Signed-off-by: Luca Weiss <luca@z3ntu.xyz>
    Message-Id: <20190907152530.25102-1-luca@z3ntu.xyz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 60e0db3d65a1218b0d5a29474e769f28a18e3ca6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 4 14:58:28 2019 +1000

    Ignore phandle properties in /aliases
    
    The 'alias_paths' check verifies that each property in /aliases is a valid
    path to another node.  However this can cans false positives trees where
    the /aliases node has a phandle property, which isn't in this format but
    is allowed.  In particular this situation can be common with trees dumped
    from some real OF systems (which typically generate a phandle for every
    node).
    
    Special case this to avoid the spurious error.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 95ce19c14064170e2a3998e487892f07fc5cbdac
Author: Luca Weiss <luca@z3ntu.xyz>
Date:   Sat Aug 17 23:25:32 2019 +0200

    README: update for Python 3
    
    Convert the usage to be compatible with Python 3 and the current API.
    
    Signed-off-by: Luca Weiss <luca@z3ntu.xyz>
    Message-Id: <20190817212532.15661-2-luca@z3ntu.xyz>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5345db19f615b9147b3d0d8e04e83767b7457e92
Author: Denis Efremov <efremov@linux.com>
Date:   Tue Aug 27 23:41:48 2019 +0300

    livetree: simplify condition in get_node_by_path
    
    The "strlen && strprefixeq" check in get_node_by_path is
    excessive, since strlen is checked in strprefixeq macro
    internally. Thus, "strlen(child->name) == p-path"
    conjunct duplicates after macro expansion and could
    be removed.
    
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Message-Id: <20190827204148.20604-1-efremov@linux.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b8d6eca78210952c6d93235c38ebd5836d6409c4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jul 28 16:25:51 2019 +1000

    libfdt: Allow #size-cells of 0
    
    c12b2b0c20eb "libfdt: fdt_address_cells() and fdt_size_cells()" introduced
    a bug as it consolidated code between the helpers for getting
    #address-cells and #size-cells.  Specifically #size-cells is allowed to
    be 0, and is frequently found so in practice for /cpus.  IEEE1275 only
    requires implementations to handle 1..4 for #address-cells, although one
    could make a case for #address-cells == #size-cells == 0 being used to
    represent a bridge with a single port.
    
    While we're there, it's not totally obvious that the existing implicit
    cast of a u32 to int will give the correct results according to strict C,
    although it does work in practice.  Straighten that up to cast only after
    we've made our range checks.
    
    Reported-by: yonghuhaige via https://github.com/dgibson/dtc/issues/28
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 184f51099471341715bc81a4c09b56a3c6f9d687
Author: Joel Stanley <joel@jms.id.au>
Date:   Mon Jul 22 12:32:44 2019 +0930

    Makefile: Add EXTRA_CFLAGS variable
    
    Distributions packaging dtc may need to set extra flags. Currently when
    they do that it overrides the ones set by the makefile. This is
    particularly problematic when compiling without yaml, as the yaml
    detection is ignored.
    
     ld: dtc.o: in function `main':
     dtc.c:(.text.startup+0x718): undefined reference to `dt_to_yaml'
    
    This patch provides a EXTRA_CFLAGS variable that is added to the list of
    CFLAGS, and can be set on the command line when packaging.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Message-Id: <20190722030244.9580-1-joel@jms.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 812b1956a07603fb56139f812395eb369727dd82
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jul 5 13:42:40 2019 +1000

    libfdt: Tweak data handling to satisfy Coverity
    
    In libfdt we often sanity test fdt_totalsize(fdt) fairly early, then
    trust it (but *only* that header field) for the remainder of our work.
    However, Coverity gets confused by this - it sees the byteswap in
    fdt32_ld() and assumes that means it is coming from an untrusted source
    everytime, resulting in many tainted data warnings.
    
    Most of these end up with logic in fdt_get_string() as the unsafe
    destination for this tainted data, so let's tweak the logic there to make
    it clearer to Coverity that this is ok.
    
    We add a sanity test on fdt_totalsize() to fdt_probe_ro_().  Because the
    interface allows bare ints to be used for offsets, we already have the
    assumption that totalsize must be 31-bits or less (2GiB would be a
    ludicrously large fdt).  This makes this more explicit.
    
    We also make fdt_probe_ro() return the size for convenience, and change the
    logic in fdt_get_string() to keep it in a local so that Coverity can see
    that it has already been bounds-checked.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5c715a44776a450106d8a59ad5abc9ac5830bc1d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 4 15:10:01 2019 +1000

    fdtoverlay: Ignore symbols in overlays which don't apply to the target tree
    
    Symbols from overlays are merged into the target tree, and are required to
    have the form:
            /fragment@XXX/__overlay__/...
    If any symbols don't have this form, the overlay is rejected.
    
    But there's not really anything wrong with an overlay having "local"
    labels referring to a fragment node or some other metadata, that's not
    expected to end up in a target tree.
    
    So change our overlay application to simply ignore such symbols rather than
    fail.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b99353474850969a1f856d344d273325ddb069c7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 4 14:39:02 2019 +1000

    fdtoverlay: Allow adding labels to __overlay__ nodes in overlays
    
    When applying overlays, we merge symbols from the overlay into the target
    tree.  At the moment the logic for this assumes all symbols in the overlay
    are attached to a node of the form:
            /fragment@XXX/__overlay__/relative/path
    
    And will end up applied to the relative/path node under the fragment's
    target.
    
    However, this disallows the case of a symbol in the form just:
            /fragment@XXX/__overlay__
    
    This does have a pretty obvious sensible meaning: attach the new symbol
    directly to the fragment's target, but we don't currently do that.
    
    It's pretty easy to workaround this limitation in one's overlays, but it's
    also easy to handle in the overlay applying code, so we might as well
    extend it to cover this case.
    
    Reported-by: Christophe Braillon
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d6de81b81b68f9e559adf42366574233be338fd8
Author: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
Date:   Wed Jul 3 10:38:07 2019 +0530

    pylibfdt: Add support for fdt_get_alias()
    
    Add this into the class to simplify use of this function.
    
    Signed-off-by: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
    Message-Id: <1562130487-27028-1-git-send-email-appana.durga.rao@xilinx.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1c17714dbb3aa43e5b7927dfc073e5e88ae20655
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 2 18:08:15 2019 -0600

    pylibfdt: Correct the FdtSw example
    
    At present this example is incorrect since it is missing the call to
    finish_reservemap() and does not add a root node. Fix these problems.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Message-Id: <20190703000815.102459-1-sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ad57e4574a379e8f383058f730e4e8e1939b4fc7
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Oct 3 09:55:02 2018 +0200

    tests: Add a failed test case for 'fdtoverlay' with long target path
    
    This adds a test case to demonstrate some issue seen when applying
    overlays using 'fdtoverlay'. It fails with FDT_ERR_NOSPACE:
    - with long target path
    - symbols in order to use these nodes in possible subsequent overlay.
    
    This is seen with this patch, by running:
    $ make check # Reports a failed test
    $ ./fdtoverlay -i tests/overlay_base.test.dtb -o out.dtb \
      tests/overlay_overlay_long_path.fdoverlay.test.dtb
      Failed to apply tests/overlay_overlay_long_path.fdoverlay.test.dtb (-3)
    
    This overlay fails to apply, because dtb size is close to modulo 1024
    bytes chunk: utilfdt_read() -> utilfdt_read_err() -> bufsize = 1024.
    
    As there is not much extra space in the blob to resolve symbols (long
    target path), it fails with FDT_ERR_NOSPACE. In fdtoverlay, size is :
     /* grow the blob to worst case */
     blob_len = fdt_totalsize(blob) + total_len;
    
    I can see assumption is made that result should be lower than:
    - base fdt size + overlay size. Is there a simple way to find to know
    what the final size is?
    I'm not sure what the correct fix might be, for such (worst) case?
    Similar issue is also seen in u-boot/common/image-fit.c that implements
    similar approach (e.g. base fdt size + overlay size).
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Message-Id: <1538553302-1353-1-git-send-email-fabrice.gasnier@st.com>
    [dwg: To avoid breaking bisection, I committed this after a fix, so
     the "failed" description is no longer accurate]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bbe3b36f542bb2c274f5fd030456ea840cc31d94
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jun 30 15:46:25 2019 +1000

    fdtoverlay: Rework output allocation
    
    At present the fdtoverlay tool allocates space for its output based on a
    calculation of the worse case size based on the size of the input blobs.
    
    Except.. that certain edge cases with very long target paths can actually
    exceed that "worst case" calculation.
    
    This reworks the code to instead dynamically reallocate the output buffer
    if we run out of space at any point.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c2e61f08396871a34d641b8f18a05d35d552792
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jun 30 15:01:01 2019 +1000

    fdtoverlay: Improve error messages
    
    Make several improvements to the error messages from the fdtoverlay helper
    program: improve brevity, consistently quote filenames and print symbolic
    errors from libfdt rather than a raw error number.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 297f5abb362e4844ee313fdcd342fa4912e9894d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jun 30 14:58:31 2019 +1000

    fdtoverlay: Check for truncated overlay blobs
    
    The fdtoverlay helper program checks if it has read a base blob which is
    incomplete: that is, where the amount of data read in is less that the
    declared size of the blob.
    
    This applies the same check for safety to each overlay blob as well.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 702c1b6c0e73d2bcf24f0b8398aca6a940863e48
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:44 2019 -0600

    README.license: Update to reflect SPDX tag usage
    
    Update README.license since files now have SPDX tags rather than license
    text. Adding a copy of BSD-2-Clause license since that no longer exists
    within the project.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-8-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4097bbffcf1d8f3da56bedf9d0eb9414eeb7113f
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:43 2019 -0600

    dtc: Add GPLv2 SPDX tags to files missing license text
    
    A couple of dtc files are missing licenses. Add GPL-2.0-or-later SPDX
    tag to them.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-7-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 94f87cd5b7c5ec835a29e1a02f5dc4b5d61e301f
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:42 2019 -0600

    libfdt: Add dual GPL/BSD SPDX tags to files missing license text
    
    A couple of libfdt files are missing licenses. Add (GPL-2.0-or-later OR
    BSD-2-Clause) SPDX tag to them.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-6-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c4ffc05574b1d81ddb890747465c0768d76a2cd0
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:41 2019 -0600

    tests: Replace license boilerplate with SPDX tags
    
    Replace instances in tests of mostly LGPL-2.1 license boilerplate
    with SPDX tags.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-5-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a5ac29baacd2f362bb8f10d6e8c572fd50dc4cb8
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:40 2019 -0600

    pylibfdt: Replace dual GPLv2/BSD license boilerplate with SPDX tags
    
    Replace pylibfdt GPLv2/BSD license boilerplate and add missing license
    with SPDX tags.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-4-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7fb0f4db2eb7cf5a60ed769a9daefd44123575e4
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:39 2019 -0600

    libfdt: Replace GPL/BSD boilerplate/reference with SPDX tags
    
    Replace instances of dual GPLv2 or BSD license boilerplate with SPDX tags.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-3-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit acfe84f2c47ed26de26071a56c6d6979ca295e6e
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jun 20 15:19:38 2019 -0600

    dtc: Replace GPLv2 boilerplate/reference with SPDX tags
    
    Replace instances of GPLv2 or later boilerplate with SPDX tags.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190620211944.9378-2-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 87963ee2069337d0a2fb54ae7bcd003ecfd53eeb
Author: Rob Herring <robh@kernel.org>
Date:   Fri May 17 15:28:04 2019 -0500

    livetree: add missing type markers in generated overlay properties
    
    The YAML output fails for overlays and when symbol generation are enabled
    due to missing markers in the generated properties.
    
    Add type markers when generating properties under '__symbols__' and
    '__fixups__' nodes as well as target-path properties. As a side effect of
    append_to_property() changes, this also sets type markers in
    '__local_fixups__' node properties.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Message-Id: <20190517202804.9084-1-robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 825146d13dc0430e72c1c65b61cb1aa35e559fca
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon May 20 10:12:09 2019 +0200

    Fix typos in various documentation and source files
    
    The typos have been discovered with the "codespell" utility.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20190520081209.20415-1-thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 25bb080c18d1a8a96760e26257bf8c80ec7fcab4
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon May 20 09:27:20 2019 +0200

    Update the GPL2 text to the latest revision
    
    This patch replaces the GPL2 text with the latest one from:
    
     https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
    
    The FSF moved to a different location quite a while ago already, and
    the latest revision recommends to use the LGPL-2.1 ("Lesser" license)
    instead of the LGPL-2.0 ("Library" license) in certain cases.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20190520072720.14755-1-thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 243176c4ce84256913fcf8f99ffbdd82ff6c7593
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 10 11:57:19 2019 +1000

    Fix bogus error on rebuild
    
    Currently if a file is touched requiring libfdt.so rebuild, it will fail
    because the ln -s command will attempt to replace an already existing link
    an error.  Correct this by using ln -sf.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ce01b21098a48da11c5c6d39ba288f17a91c17f4
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu May 9 19:41:22 2019 +1000

    libfdt: Add FDT_CREATE_FLAG_NO_NAME_DEDUP flag that trades size for speed
    
    Searching for duplicate names scales O(n^2) with the number of names
    added to a fdt, which can cause a noticable slowdown with larger device
    trees and very slow CPU cores.
    
    Add FDT_CREATE_FLAG_NO_NAME_DEDUP that allow the caller to trade fdt size
    for speed in the creation process.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Message-Id: <20190509094122.834-4-npiggin@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fbb62754ce4529bee382390b8caa5e5b47519928
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu May 9 19:41:21 2019 +1000

    libfdt: Introduce fdt_create_with_flags()
    
    There is a need to be able to specify some options when building an FDT
    with the SW interface. This can be accomplished with minimal changes by
    storing intermediate data in the fdt header itself, in fields that are
    not otherwise needed during the creation process and can be set by
    fdt_finish().
    
    The fdt.magic field is already used exactly this way, as a state to
    check with callers that the FDT has been created but not yet finished.
    
    fdt.version and fdt.last_comp_version are used to make room for more
    intermediate state. These are adjacent and unused during the building
    process. last_comp_version is not yet used for intermediate state, but
    it is zeroed and treated as used, so as to allow future growth easily.
    
    A new interface, fdt_create_with_flags() is added, which takes 32-bit
    flag value to control creation.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Message-Id: <20190509094122.834-3-npiggin@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 228a44cce857feeae55362a0c95689bc82123ed6
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu May 9 19:41:20 2019 +1000

    libfdt: Ensure fdt_add_property frees allocated name string on failure
    
    If fdt_add_property or fdt_property_placeholder fail after allocating
    a string for the name, they return without freeing that string. This
    does not change the structure of the tree, but in very specific cases
    it could lead to undesirable space consumption.
    
    Fix this by rolling back the string allocation in this situation.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Message-Id: <20190509094122.834-2-npiggin@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8f695676227be42074711f3464d8c9f82bd80999
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon May 6 17:00:07 2019 +1000

    Avoid assertion in check_interrupts_property()
    
    If running on a tree with an 'interrupt-parent' property which contains
    an invalid phandle (0 or -1, not merely for a node which doesn't exist),
    then check_interrupts_property() will trip the assertion in
    get_node_by_phandle().
    
    There's logic that almost detects this, but it only handles the overlay
    case, where we can't fully check because the links will be fixed up later.
    
    For the non-overlay case, this is definitely a bad property, but we
    shouldn't crash.  Fix it by failing the check early.
    
    Fixes: c1e55a5513e9 ("checks: fix handling of unresolved phandles for dts plugins")
    Fixes: ee3d26f6960b ("checks: add interrupts property check")
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5c3513f68921cc15231af7ae6806c1f61c517c7c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 17:20:16 2019 +1100

    Link tools and tests against libfdt shared library
    
    Currently the libfdt based tools (fdtput, fdtget, etc.) and all the
    test binaries using libfdt are linked against the static version of libfdt.
    That's made it very easy in the past to forget to properly update the
    version.lds file which is needed to make functions publicaly accessible
    from the shared library.
    
    To avoid problems like that in future, alter the build so that we link and
    run the tests against the shared library version of libfdt.
    
    That immediately points out several important symbols that are still
    missing from the version.lds, so fix those as well.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 00f9febf9c16d932380243a3135ee5aed1adc410
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 16:31:39 2019 +1100

    tests: Rename tests.sh to testutils.sh
    
    tests.sh has a bunch of shell setup that's sourced in a number of other
    scripts.  It _doesn't_ actually run a bunch of tests, which is kind of what
    the name suggests.  So rename it to be more obvious.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c5d45188f92344759fbd70275483576c0ce42d82
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 16:15:08 2019 +1100

    Clean up LDLIBS handling
    
    We currently set LDLIBS to include libyaml globally if we're using it.
    However only dtc itself actually needs to link with libyaml - the other
    tool binaries don't.  Avoid that unnecessary inclusion by making LDLIBS
    handling per-target.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6ef8fcd05b740cbedf11d980e0a9ec0c87969448
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 14:14:46 2019 +1100

    Rebuild libfdt shared object if versioning linker script changes
    
    The usable content of the shared library varies depending on the symbol
    versions given in the version.lds linker script, however it's not currently
    in the make dependencies.  Correct that, and move the libfdt rules together
    for consistency while we're at it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 26ee65a16c38d7bed4fd6e25962f887115540ced
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 15:13:10 2019 +1100

    Use Python3 by default
    
    Python2 is deprecated upstream, lets try to move forwards. Along with it
    generalize the .gitignore file so we ignore the .pyc files in the new
    location that Python3 uses.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cca6546244cba043d8c17c1a1c5224393b544066
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 29 13:59:04 2019 +1100

    libfdt: Make fdt_get_max_phandle() an inline
    
    It's now a trivial wrapper around fdt_find_max_phandle() so we might as
    well inline it.  We also remove it from the versioning linker script.
    Theoretically, that's a breaking ABI change except that we haven't yet
    released a version with it exposed in the shared object, so we can get
    away with it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 730875016a6a94bd43e4e88b34a73a814e1051e7
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Mar 26 16:33:02 2019 +0100

    libfdt: Add phandle generation helper
    
    The new fdt_generate_phandle() function can be used to generate a new,
    unused phandle given a specific device tree blob. The implementation is
    somewhat naive in that it simply walks the entire device tree to find
    the highest phandle value and then returns a phandle value one higher
    than that. A more clever implementation might try to find holes in the
    current set of phandle values and fill them. But this implementation is
    relatively simple and works reliably.
    
    Also add a test that validates that phandles generated by this new API
    are indeed unique.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Message-Id: <20190326153302.17109-3-thierry.reding@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7dfb61ba96b130ab12afa24c7d15f4706ecbb619
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Mar 26 16:33:01 2019 +0100

    libfdt: Use fdt_find_max_phandle()
    
    Use the fdt_find_max_phandle() function instead of the deprecated
    fdt_get_max_phandle() function.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Message-Id: <20190326153302.17109-2-thierry.reding@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2bc5b66d7f6c441bf6183a6f769a95de6f90297b
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Mar 26 16:33:00 2019 +0100

    libfdt: Add new maximum phandle lookup function
    
    The fdt_get_max_phandle() function has some shortcomings. On one hand
    it returns just a uint32_t which means to check for the "negative"
    error code a caller has to explicitly check against the error code
    (uint32_t)-1. In addition, the -1 is the only error code that can be
    returned, so a caller cannot tell the difference between the various
    failures.
    
    Fix this by adding a new fdt_find_max_phandle() function that returns an
    error code on failure and 0 on success, just like other APIs, and stores
    the maximum phandle value in an output argument on success.
    
    This also refactors fdt_get_max_phandle() to use the new function. Add a
    note pointing out that the new fdt_find_max_phandle() function should be
    preferred over fdt_get_max_phandle().
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Message-Id: <20190326153302.17109-1-thierry.reding@gmail.com>
    [dwg: Reword for some inaccuracies in the commit message]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7fcf8208b8a98f65ce938a64fab674add3656f27
Author: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date:   Wed Mar 27 15:15:52 2019 +0900

    libfdt: add fdt_append_addrrange()
    
    This function will append an address range property using parent node's
    "#address-cells" and "#size-cells" properties.
    
    It will be used in implementing kdump with kexec_file_load system call
    at linux kernel for arm64 once it is merged into kernel tree.
    
    Signed-off-by: AKASHI Takahiro <takahiro.akashi@linaro.org>
    Message-Id: <20190327061552.17170-2-takahiro.akashi@linaro.org>
    [dwg: Correct a SEGV error in the testcase]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ae795b2db7a43f8f076a8b688761244ed0f93128
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Wed Mar 27 11:53:52 2019 +0800

    checks: Do not omit nodes with labels if symbol generation is requested
    
    Commit 4038fd90056e ("dtc: add ability to make nodes conditional on them
    being referenced") added the new /omit-if-no-ref/ directive to mark
    nodes as eligible to be discarded if not referenced. The mechanism to
    process this happens before the symbol generation phase. This means even
    if symbol generation is requested and the node has a label, it will be
    discarded if there are no references to it within the same file.
    
    This is probably not what people expect. When using symbol generation to
    compile base device trees for applying overlays, nodes with labels could
    be referenced by the overlays, and therefore should be preserved.
    
    Check if the node has a label and symbol generation was requested before
    dropping the node.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Message-Id: <20190327035352.24036-1-wens@csie.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit eac2ad495b29f15d78daa2a7226653f36515cd7a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 25 14:52:47 2019 +1100

    Update version.lds again
    
    Yet again, we've added several functions to libfdt that were supposed
    to be exported, but forgotten to add them to the versio.lds script.
    This adds them.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f67b47135523863c17a4af55d31de8f47d672834
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 25 14:51:27 2019 +1100

    Revert "libfdt: Add phandle generation helper"
    
    This reverts commit 54ea41c22415cb0e283d22faf71202051c89400c.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 54ea41c22415cb0e283d22faf71202051c89400c
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Mar 20 16:10:03 2019 +0100

    libfdt: Add phandle generation helper
    
    The new fdt_generate_phandle() function can be used to generate a new,
    unused phandle given a specific device tree blob. The implementation is
    somewhat naive in that it simply walks the entire device tree to find
    the highest phandle value and then returns a phandle value one higher
    than that. A more clever implementation might try to find holes in the
    current set of phandle values and fill them. But this implementation is
    relatively simple and works reliably.
    
    Also add a test that validates that phandles generated by this new API
    are indeed unique.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Message-Id: <20190320151003.28941-1-thierry.reding@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4762ad051ee0a654a17c67eb6d8e33196b475b81
Author: Leonard Crestez <leonard.crestez@nxp.com>
Date:   Mon Mar 11 18:24:20 2019 +0000

    checks: Fix spelling in check_graph_endpoint
    
    Should be "endpoint" rather than "endpont"
    
    Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
    Message-Id: <6fcb6e160163467b706c312ffe307ee8a5d9255d.1552328099.git.leonard.crestez@nxp.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d37f6b20107e952064e3f77e9d6915a9c09d10a6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 6 15:51:37 2019 +1100

    Bump version to v1.5.0
    
    We've accumulated several new features as well as a number of bugfixes,
    so prepare for another release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a4b1a307ff3a1ae7ca9d4a8ac212025ab07f17eb
Author: Lumir Balhar <lbalhar@redhat.com>
Date:   Mon Feb 18 17:48:56 2019 +0100

    pylibfdt:tests: Extend the way how to find a Python module
    
    Python 3 C extensions have suffix containing platform, Python version
    and another details in the name so the condition has to be extended.
    
    Signed-off-by: Lumir Balhar <lbalhar@redhat.com>
    Message-Id: <20190218164856.23861-5-frenzy@frenzy.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 625dd8aaf20f8fc403c30385c9a1d423fb8e3957
Author: Lumir Balhar <lbalhar@redhat.com>
Date:   Mon Feb 18 17:48:55 2019 +0100

    pylibfdt: Change how passing tests are recognized
    
    When some warning appears in test result, "ok" is still
    at the end of the line but without three dots.
    
    Signed-off-by: Lumir Balhar <lbalhar@redhat.com>
    Message-Id: <20190218164856.23861-4-frenzy@frenzy.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 364631626bb78a40c1a1c70d5502ab0e953a7829
Author: Petr Viktorin <pviktori@redhat.com>
Date:   Mon Feb 18 17:48:54 2019 +0100

    pylibfdt: Test fdt.setprop take bytes on Python 3, add error handling
    
    Signed-off-by: Petr Viktorin <pviktori@redhat.com>
    Message-Id: <20190218164856.23861-3-frenzy@frenzy.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cb0f454f73cc85019b0b844e3fd66caa2d219d5c
Author: Lumir Balhar <lbalhar@redhat.com>
Date:   Mon Feb 18 17:48:53 2019 +0100

    pylibfdt: check_err accepts only integer as a first argument.
    
    A list passed as an argument to check_err() means that
    there is no error code to check and therefore it should
    be returned back.
    
    Signed-off-by: Lumir Balhar <lbalhar@redhat.com>
    Message-Id: <20190218164856.23861-2-frenzy@frenzy.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4b68c6b3605ac3ef47e1594c0cde415f6f286134
Author: Lumir Balhar <lbalhar@redhat.com>
Date:   Mon Feb 18 17:48:52 2019 +0100

    pylibfdt: Proper handling of bytes/unicode strings and octal literals
    
    Signed-off-by: Lumir Balhar <lbalhar@redhat.com>
    Message-Id: <20190218164856.23861-1-frenzy@frenzy.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 78e113e81c9d33d0f33704b187a46399d5a75419
Author: Andreas Schwab <schwab@linux-m68k.org>
Date:   Wed Jan 2 12:30:13 2019 +0100

    Use PRIxPTR for printing uintptr_t values
    
    Fixes: 49903aed77 ("use ptrdiff_t modifier for printing pointer differences")
    Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>

commit ea7a8f6dad67d1d668df7e12adecf7783ac1874b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Dec 21 17:32:23 2018 +0100

    libfdt: Fix FDT_ERR_NOTFOUND typos in documentation
    
    The actual error is FDT_ERR_NOTFOUND, not FDT_ERR_NOT_FOUND.
    
    Fixes: d29126c90acb0d70 ("libfdt: Add iterator over properties")
    Fixes: 902d0f0953d0074b ("libfdt: Add a subnodes iterator macro")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5aafd7ca43e0beb6b078388e789088b3ea1a51f5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Dec 21 14:01:32 2018 +0100

    libfdt: Fix fdt_getprop_by_offset() parameter name in documentation
    
    The second parameter of fdt_getprop_by_offset() is called "offset", not
    "ffset".
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7cbc550f903b23f2291c7ca5d347ae0236ce27b6
Author: Kumar Gala <kumar.gala@linaro.org>
Date:   Thu Dec 13 13:30:14 2018 -0600

    checks: Add unit address check if node is enabled
    
    There are various SoCs that have 2 different peripheral blocks at the
    same register offset.  However, we might have one block marked as
    status = "disabled" and the other status = "ok".  In such cases we
    shouldn't warn about duplicate unit-address.
    
    Here's a cut down example that we would warning about before:
    
    /dts-v1/;
    
    / {
            #address-cells = <0x01>;
            #size-cells = <0x01>;
    
            soc {
                    #address-cells = <0x01>;
                    #size-cells = <0x01>;
                    compatible = "simple-bus";
                    ranges;
    
                    i2c0: i2c@40003000 {
                            compatible = "nordic,nrf-i2c";
                            reg = <0x40003000 0x1000>;
                            status = "ok";
                    };
    
                    spi0: spi@40003000 {
                            compatible = "nordic,nrf-spi";
                            reg = <0x40003000 0x1000>;
                            status = "disabled";
                    };
            };
    };
    
    We introduce 'unique_unit_address_if_enabled' check that is disabled by
    default.
    
    Signed-off-by: Kumar Gala <kumar.gala@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f267e674d1452d381bb2f180695801454d3549ad
Author: Rob Herring <robh@kernel.org>
Date:   Tue Nov 27 08:16:30 2018 -0600

    checks: Fix crash with multiple source annotations
    
    Commit 3616b9a811b6 ("checks: Use source position information for check
    failures") causes crashes when there's a check message with multiple
    source annotations. Drop the errant addition to the str pointer left
    over from the previous version.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3616b9a811b66744b4b818c2930462b480ddae44
Author: Rob Herring <robh@kernel.org>
Date:   Sat Nov 24 14:47:56 2018 -0600

    checks: Use source position information for check failures
    
    Now that we retain source position information of nodes and properties,
    make that the preferred file name (and position) to print out in check
    failures. This will greatly simplify finding and fixing check errors
    because most errors are in included source .dtsi files and they get
    duplicated every time the source file is included.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2bdbd07a1223e26c73caccb54f9af51f958c5b8f
Author: Rob Herring <robh@kernel.org>
Date:   Sat Nov 24 14:47:55 2018 -0600

    checks: Make each message output atomic
    
    Printing to stderr as we build up the check message results in
    interleaving of messages when multiple instances of dtc are running.
    Change the message output to use an intermediate buffer for constructing
    the message and then output the message to stderr with a single fputs.
    
    While perhaps there is no guarantee that fputs will be atomic, this gets
    rid of any interleaved output that previously occurred on Linux.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a1eff70c02cfd3a6263adfd6aab25290211f31aa
Author: Rob Herring <robh@kernel.org>
Date:   Sat Nov 24 14:47:54 2018 -0600

    util: Add xa{v}sprintf_append functions
    
    Add variadic and va_list functions, xa{v}sprintf, which appends a
    formatted string to an existing string and re-allocate the string buffer
    if necessary. xasprintf becomes just a special case of xasprintf_append
    with a NULL starting string.
    
    Rather than looping to get a big enough buffer, simply the implementation
    by assuming we have a C99 compliant vsnprintf implementation to return the
    necessary size. A side effect is glibc 2.0 support is dropped which seems
    unnecessary.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 82a52ce4573b7cd0039786f65b280fb99431fe5d
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Nov 22 13:15:06 2018 -0700

    libfdt: Add a test for fdt_getprop_by_offset()
    
    This function does not have its own test at present. Add one.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 607b8586b3837f60221c0da2af4f5333a34e50cc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 22:11:33 2018 +1100

    PEP8 / Flake8 cleanups for setup.py
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f9c0a425b64817ba91563a84d9a7ea9033e3c14f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 21:58:42 2018 +1100

    Remove broken objdir / srcdir support
    
    The dtc makefiles have support for building into a separate directory from
    the sources... except that it's broken and probably always has been.
    
    Remove the pretense.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5182b5e6f28cbe3563ed058988801b90a97b6b70
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 21:51:35 2018 +1100

    pylibfdt: Use common PREFIX variable
    
    For no particularly good reason, the install target for the Python library
    uses a different PREFIX variable to give the installation destination
    to the rest of dtc & libfdt.  Make it use the same one.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d45bf1f5f2a6b8e46c5c600dc5879ff4662344d8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 21:33:28 2018 +1100

    Refine make tests_clean target
    
    Remove some redundancy, and also clean up *.test.dt.yaml files generated
    during the tests.  Also add the latter to gitignore.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 99284c4db9cbb5a8d2f0c8d16fd8490b1ea19bea
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 21:24:44 2018 +1100

    Refine pylibfdt_clean target
    
    Move it to the subdir Makefile, generalize some of the patterns, remove
    the 'build' directory made by setup.py and __pycache__ directory made by
    Python3.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a4629cfaedfbcab98619757554f0636de06e25e2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 21:11:47 2018 +1100

    Refine libfdt_clean target
    
    Move it to the libfdt Makefile piece, use neater make syntax, and remove
    redundant command (already included in STD_CLEANFILES).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 08380fc43aa2dd7e01b65bd87e8b20519db0d397
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 23 17:47:41 2018 +1100

    tests: Use modern octal literals for Python
    
    Python3 removes support for C-style octal literals, using 0oXXXX instead.
    Python2 also supports this form, so move to the new style.
    
    Reported-by: Lumir Balhar <lbalhar@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8113c00b99d303c8073a2493f6b8978600e54967
Author: Lumir Balhar <lbalhar@redhat.com>
Date:   Mon Jul 9 12:38:59 2018 +0200

    pylibfdt: Allow switch to Python 3 via environment variable PYTHON
    
    Python 2 is still the default but it can be changed by
    setting environment variable PYTHON before build/test.
    
    Signed-off-by: Lumir Balhar <lbalhar@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 11738cf01f150afae913b88fb68675a272803d63
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 19 16:36:15 2018 +1100

    libfdt: Don't use memcpy to handle unaligned reads on ARM
    
    6dcb8ba4 "libfdt: Add helpers for accessing unaligned words" introduced
    the fdt32_ld() and fdt64_ld() helpers for loading values from the FDT blob
    which might not be naturally aligned.  This matters for ARM, where
    attempting a plain unaligned load will often cause an exception.
    
    However, it seems the memcpy() we used here was surprisingly expensive,
    making libfdt nearly 6x slower on at least some ARM platforms.
    
    This patch takes an alternative approach, using a bunch of 1-byte loads
    and shifts to implement the helpers.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 86a288a7367086bb8dad60ea293811d62f59671b
Author: Rob Herring <robh@kernel.org>
Date:   Wed Nov 21 15:53:57 2018 -0600

    checks: Restructure check_msg to decrease indentation
    
    The entire check_msg function is under the if condition except for
    va_start/va_end. Move these and invert the if condition saving a level
    of indentation.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5667e7ef9a9a30c54a572ae976ed5b65ccf24d8b
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Fri Nov 16 17:30:00 2018 +0100

    annotations: add the annotation functionality
    
    Provide the new command-line option:
    
    --annotate (abbreviated -T)
    
    --annotate provides one or more filenames and line numbers indicating
    the origin of a given line.  The filename is expressed relative the the
    filename provided on the command line.  Nothing is printed for overlays,
    etc.
    
    -T can be repeated giving more verbose annotations.  These consist of
    one or more tuples of: filename, starting line, starting column, ending
    line ending column.  The full path is given for the file name.
    Overlays, etc are annotated with <no-file>:<no-line>.
    
    The verbose annotations may be too verbose for normal use.
    
    There are numerous changes in srcpos.c to provide the relative filenames
    (variables initial_path, initial_pathlen and initial_cpp, new functions
    set_initial_path and shorten_to_initial_path, and changes in
    srcfile_push and srcpos_set_line).  The change in srcpos_set_line takes
    care of the case where cpp is used as a preprocessor.  In that case the
    initial file name is not the one provided on the command line but the
    one found at the beginnning of the cpp output.
    
    shorten_to_initial_path only returns a string if it has some shortening
    to do.  Otherwise it returns NULL and relies on the caller to use the
    initial string.  This simplifies memory management, by making clear to
    the caller whether a new string is allocated.
    
    The new functions srcpos_string_comment, srcpos_string_first, and
    srcpos_string_last print the annotations.  srcpos_string_comment is
    recursive to print a list of source file positions.
    
    Various changes are sprinkled throughout treesource.c to print the
    annotations.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8e20ccf52f90ed7e5ee29f870c7ee8bd0854794c
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Fri Nov 16 17:29:59 2018 +0100

    annotations: add positions
    
    Extend the parser to record positions, in build_node,
    build_node_delete, and build_property.
    
    srcpos structures are added to the property and node types, and to the
    parameter lists of the above functions that construct these types.
    Nodes and properties that are created by the compiler rather than from
    parsing source code have NULL as the srcpos value.
    
    merge_nodes, defined in livetree.c, uses srcpos_extend to combine
    multiple positions, resulting in a list of positions.  srcpos_extend
    is defined in srcpos.c.  New elements are added at the end.  This
    requires the srcpos type, define in srcpos.h, to be a list structure
    with a next field.  This next field is initialized to NULL in
    srcpos.h, in the macro YYLLOC_DEFAULT invoked implicitly by the
    generated parser code.
    
    Another change to srcpos.c is to make srcpos_copy always do a full
    copy, including a copy of the file substructure.  This is required
    because when dtc is used on the output of cpp, the successive detected
    file names overwrite the file name in the file structure.  The next
    field does not need to be deep copied, because it is always NULL when
    srcpos_copy is called; an assert checks for this. File names are only
    updated in uncopied position structures.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ca930e20bb54d823a90598f1f861a76bd18bc7c7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 14 16:37:39 2018 +1100

    tests: Don't lose errors from make checkm
    
    For unclear reasons we had some code to copy a transcript of "make checkm"
    runs to a vglog.XXX file.  It's not really clear why this was there, and
    it had the nasty side effect of discarding errors from run_tests.sh,
    meaning that an error on the valgrind run wouldn't show up clearly in
    Travis CI builds.  Remove that logic so that we see errors more clearly.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 43366bb4eeee868bf44f15be220e0b16d77ddd34
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 14 16:13:30 2018 +1100

    tests: Property count valgrind errors in wrapped tests
    
    The logic in wrap_test() was effectively squashing valgrind errors into
    the "FAIL" bucket rather than their own bucket as intended.  Correct it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5062516fb8cb52e2a8739695a27abc533da9abcd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 14 16:12:43 2018 +1100

    srcpos: Remove srcpos_empty
    
    Nothing was actually using it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a3143fafbf83868748c99aa14daf274de5549826
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 14 15:24:49 2018 +1100

    Revert "annotations: add positions"
    
    This reverts commit baa1d2cf7894a32bf2f640ef40ebce561b2df565.
    
    Turns out this introduced memory badness.  valgrind picks it up on
    x86, but it straight out SEGVs on x86.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 403cc79f06a135aee00f35cea975f068a72dbd92
Author: Kumar Gala <kumar.gala@linaro.org>
Date:   Tue Nov 13 16:40:10 2018 -0600

    checks: Update SPI bus check for 'spi-slave'
    
    If the SPI bus controller is being used for 'spi-slave' mode some of the
    checks we have need to change:
    
    In 'spi-slave' mode #address-cells should be 0, as any children don't
    have a reg property.
    
    Signed-off-by: Kumar Gala <kumar.gala@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit baa1d2cf7894a32bf2f640ef40ebce561b2df565
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Fri Oct 26 17:44:33 2018 +0200

    annotations: add positions
    
    Extend the parser to record positions, in build_node, build_node_delete,
    and build_property.
    
    srcpos structures are added to the property and node types, and to the
    parameter lists of the above functions that construct these types.
    Nodes and properties that are created by the compiler rather than from
    parsing source code have NULL as the srcpos value.
    
    merge_nodes, defined in livetree.c, uses srcpos_extend to combine
    multiple positions, resulting in a list of positions.  srcpos_extend is
    defined in srcpos.c.  New elements are added at the end.  The srcpos
    type, define in srcpos.h, is now a list structure with a next field.
    
    Another change to srcpos.c is to make srcpos_copy always do a full copy,
    including a copy of the file substructure.  This is required because
    when dtc is used on the output of cpp, the successive detected file
    names overwrite the file name in the file structure.  The next field
    does not need to be deep copied, because it is only updated in newly
    copied positions and the positions to which it points have also been
    copied.  File names are only updated in uncopied position structures.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ff2ad38f6a5a87603c519096fd7066082c4c6f75
Merge: aa7254d 49903ae
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 15:59:36 2018 +1100

    Merge remote-tracking branch 'origin/pr/18'

commit aa7254d9cb173b43714013eef3769475948956f9
Author: John Clarke <johnc@kirriwa.net>
Date:   Fri Nov 2 12:46:22 2018 +1100

    libfdt: return correct value if #size-cells property is not present
    
    According to the device tree specification, the default value for
    #size-cells is 1, but fdt_size_cells() was returning 2 if this property
    was not present.
    
    This patch also makes fdt_address_cells() and fdt_size_cells() conform
    to the behaviour documented in libfdt.h. The defaults are only returned
    if fdt_getprop() returns -FDT_ERR_NOTFOUND, otherwise the actual error
    is returned.
    
    Signed-off-by: John Clarke <johnc@kirriwa.net>

commit 49903aed77832e47f052d094d10ebe75077835e6
Author: Dan Horák <dan@danny.cz>
Date:   Mon Oct 22 12:14:44 2018 +0200

    use ptrdiff_t modifier for printing pointer differences
    
    Use ptrdiff_t modifier (%tx) for printing a difference between 2 pointers. Currently
    %zx (size_t) is used, but it fails on platforms where size_t and ptrdiff_t are
    defined differently (like s390).
    
    Comes from
    https://src.fedoraproject.org/rpms/dtc/c/f3da2d1b00d01d83fef7001d5767baa3d5a6df87?branch=master
    originally.
    
    Signed-off-by: Dan Horák <dan@danny.cz>

commit da2b691ccf6863b2f5039d98e71f09d4244e5aa1
Author: Rob Herring <robh@kernel.org>
Date:   Wed Oct 10 10:19:30 2018 -0500

    treesource: Fix dts output for phandles in middle of a sequence of ints
    
    If we have a phandle in the middle of a sequence of numbers and
    it is not bracketed (e.g. <0x1234 &phandle 0x5678>), the dts output will
    be corrupted due to missing a space between the phandle value and the
    following number.
    
    Fixes: 8c59a97ce096 ("Fix missing labels when emitting dts format")
    Cc: Grant Likely <grant.likely@arm.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8f8b77a0d62dbc0e7abee873a03ef34e9041a051
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Wed Oct 3 15:12:11 2018 +0200

    tests: Wrap check_align() calls with base_run_test()
    
    Otherwise the FAIL results won't be accounted for in the summary.
    Easily testable by artifically causing them to fail:
    
    -        if [ $(($size % $align)) -eq 0 ] ;then
    +        if [ $(($size % $align)) -eq 666 ] ;then
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 522d81d572f2f8ae683c39089df64f5c74205451
Author: Rob Herring <robh@kernel.org>
Date:   Wed Sep 26 14:27:08 2018 -0500

    Fix dts output with a REF_PATH marker
    
    Commit 8c59a97ce096 ("Fix missing labels when emitting dts format")
    fixed label output, but broke output when there is a REF_PATH marker.
    
    The problem is a REF_PATH marker causes a zero length string to be
    emitted. The write_propval_string() function requires a length of at
    least 1 (including the terminating '\0'), but that was not being
    checked.
    
    For the integer output, a length of 0 is valid as it is possible to have
    labels inside the starting '<':
    
    int-prop = < start: 0x1234>;
    
    REF_PHANDLE is another marker that we don't explicitly handle, but it
    doesn't cause a problem as it is fundamentally just an int.
    
    Fixes: 8c59a97ce096 ("Fix missing labels when emitting dts format")
    Reported-by: Kumar Gala <kumar.gala@linaro.org>
    Cc: Grant Likely <grant.likely@arm.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e45198c9835901efc4763bcafa3cf50b5bdcb6b5
Author: Fredrik Markstrom <fredrik.markstrom@gmail.com>
Date:   Tue Sep 25 21:32:37 2018 +0200

    Added test cases for target references
    
    This commit adds test cases for commits "Correct overlay syntactic
    sugar for generating target-path fragments" and "Merge nodes with
    local target label references".
    
    It verifies that target path references are not resolved locally and
    that target label references that can be resolved locally are.
    
    Signed-off-by: Fredrik Markstrom <fredrik.markstrom@gmail.com>
    [dwg: Fixed some whitespace problems]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0fcffda15e9f4510aa8cd2a495bec66242d1898f
Author: Fredrik Markstrom <fredrik.markstrom@gmail.com>
Date:   Mon Sep 24 13:27:27 2018 +0200

    Merge nodes with local target label references
    
    This change makes sure that nodes with target label references doesn't
    create additional fragments if the label can been resolved
    locally. Target path references are not resolved locally and will
    generate a fragment.
    
    Previously the dts below would generate two fragments:
    
    /dts-v1/;
    /plugin/;
    &x { a: a@0 {};};
    &a { b {}; };
    
    This commit essentially reverts part of the commit "Correct overlay
    syntactic sugar for generating target-path fragments". The main reason
    we want to do this is that it breaks consumers of dtbo:s that can't
    resolve references between fragments in the same dtbo (like the linux
    4.1 kernel). In addition creating a fragment for each label reference
    substantially increases the size of the resulting dtbo for some use
    cases.
    
    Signed-off-by: Fredrik Markstrom <fredrik.markstrom@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1e4a0928f3b3b827824222572e551a60935607e3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 17:33:24 2018 +1000

    pylibfdt: Don't have setup.py depend on where it's invoked from
    
    Currently setup.py depends on being invoked from the right directory
    (specifically it needs to be run from the root of the project).  That's a
    bit confusing.
    
    This updates setup.py to no longer depend on the invoking directory by
    instead having it change directory to the location of the script itself,
    then using internal paths relative to that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit ca399b14956f1d57fff46e4e847f1448b955d0ec
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 14:37:52 2018 +1000

    pylibfdt: Eliminate run_setup make function
    
    This function no longer does anything useful, so get rid of it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 98972f1b3e33f17d290fc39e037a78b863c92cf6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 14:25:42 2018 +1000

    pylibfdt: Improved version extraction
    
    Currently setup.py expects the library version in a VERSION environment
    variable, or it exctracts the version from the Makefile.  The latter is
    for the case where the script is run standalone, rather than from make.
    But parsing the Makefile is ugly and fragile, and won't always get the
    same version we put into the C code.
    
    This changes to instead extracting the version from the trivial .h file we
    already generate to put the version into C code.  It's still slightly ugly,
    but it's simpler and since we can control the precise format of that .h,
    not as fragile.
    
    This lets us remove the remains of the makefile parsing code from setup.py.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 7ba2be6cda5f3d55aad18f0a5d585c0638e57c95
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 13:55:38 2018 +1000

    pylibfdt: Don't silence setup.py when V=1
    
    At the moment we unconditionally pass --quiet to setup.py.  Change that to
    get more debugging output from it when V=1 is passed to make.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 7691f9d39301aaf411437ee991583559f962ac03
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 13:52:33 2018 +1000

    pylibfdt: Make SETUP make variable
    
    This points to the Python setup script, since we reference it in a couple
    of places.  While we're there correct two small problems:
    
    1) setup.py is part of the checked in sources and so lives in
       $(PYLIBFDT_srcdir) not $(PYLIBFDT_objdir) [this only worked because
       those are the same by default]
    
    2) The module itself should depend on the setup script so it is rebuilt
       if the script is changed
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 855b9963def9cccf1cd6a74a8bb784c44ce497f7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 13:43:50 2018 +1000

    pylibfdt: Simpler CFLAGS handling
    
    At the moment we have some fiddly code to either pass in make's CPPFLAGS to
    setup.py, or have setup.py extract them from the Makefile.  But really the
    only thing we need from here is the include paths.  We already know what
    include paths we need (libfdt/) so we can just set that directly in
    setup.py.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 47cafbeeb977a896387c06e0cedea30022b19100
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 8 23:34:11 2018 +1000

    pylibfdt: Link extension module with libfdt rather than rebuilding
    
    Currently we build the Python extension module from all the libfdt source
    files as well as the swig wrapper file.  This is a bit silly, since we've
    already compiled libfdt itself.
    
    This changes the build to instead build the extension module from just the
    swig wrapper, linking it against the libfdt.a we've already build.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit dd695d6afb19359f9b1efb8aa649c0e508817f95
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 10 12:39:18 2018 +1000

    pylibfdt: Correctly set build output directory
    
    Our Makefile currently passes PYLIBFDT_objdir into setup.py in an attempt
    to set the correct place to put the Python extension module output.  But
    that gets passed in the 'package_dir' map in distutils.
    
    But that's basically not what package_dir controls.  What actually makes us
    find the module in the right place is the --inplace passed to setup.py
    (causing the module to go into the current directory), and the following
    'mv' in the Makefile to move it into the right final location.
    
    We can simplify setup.py by dropping the useless objdir stuff, and get the
    module put in the right place straight way by instead using the --build-lib
    setup.py option.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 59327523d0d827ba7d8ff311ec89f0f32a1b2ebe
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 8 17:52:49 2018 +1000

    pylibfdt: We don't need include files from the base directory
    
    pylibfdt/setup.py currently adds include flags to the extension module
    build to allow include files in the base dtc directory.  But pylibfdt
    doesn't rely on any headers there, only on headers in libfdt/ - it also
    shouldn't rely on dtc headers at any future time.
    
    So, remove that from the include list, allowing some simplifications to
    setup.py.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit e84742aa7b934cd6603e3a64f8c0966f683c5711
Author: Rob Herring <robh@kernel.org>
Date:   Thu Sep 20 14:30:03 2018 -0700

    checks: fix simple-bus compatible matching
    
    Since commit 7975f6422260 ("Fix widespread incorrect use of strneq(),
    replace with new strprefixeq()") simple-bus checks have been silently
    skipped. The problem was 'end - str' is one more than the string length
    and the strnlen in strprefixeq fails. This can't be fixed simply by
    subtracting one as it is possible to have multiple '\0' at the end of
    the property. Fix this by making the 'compatible' property string list
    check a dependency, and then we can assume the property is null
    terminated and we can just use streq() for comparisons.
    
    Add some tests so the problem doesn't happen again.
    
    Fixes: 7975f6422260 ("Fix widespread incorrect use of strneq(), replace with new strprefixeq()")
    Reported-by: Kumar Gala <kumar.gala@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8c59a97ce096ab1e25fa828cbff371b3953e990c
Author: Grant Likely <grant.likely@arm.com>
Date:   Fri Sep 14 14:01:09 2018 +0100

    Fix missing labels when emitting dts format
    
    When there is a label inside a sequence of ints at the end of a
    property, an assertion is hit because write_propval() expects all the
    labels to be at the very end of the property data. This is clearly wrong
    behaviour.
    
    To reproduce run: "dtc -O dts tests/label01.dts". dtc fails on property
    /randomnode/blob.
    
    Fix by reworking the write_propval() loop to remove the separate
    iterating over label markers. Instead handle the label markers as part
    of the main marker iteration loop. This guarantees that each label
    marker is handled at the right location, even if all the data markers
    have already been handled, and has the added advantage of making the
    code simpler.
    
    However, a side effect of this code is that a label at the very end of
    an int sequence will be emitted outside the sequence delimiters. For
    example:
    
            Input:  intprop = < 1 2 L1: >, L2: < 3 4 L3: > L4:;
            Output: intprop = < 1 2 >, L1: L2: < 3 4 > L3: L4:;
    
    The two representations are equivalent in the data model, but the
    current test case was looking for the former, but needed to be modified
    to look for the later. The alternative would be to render labels before
    closing the sequence, but that makes less sense syntactically because
    labels between sequences are normally to point at the next one, not the
    former. For example:
    
            Input:  intprop = < 1 2 L1: >, L2: < 3 4 L3: > L4:;
            Output: intprop = < 1 2 L1: L2: >,  < 3 4 L3: L4: >;
    
    DTC doesn't current have the information to know if the label should be
    inside or outside the sequence, but in common usage, it is more likely
    that L1 & L2 refer to the second sequence, not the end of the first.
    
    Fixes: 32b9c6130762 ("Preserve datatype markers when emitting dts
    format")
    
    Reported-by: Łukasz Dobrowolski <lukasz.dobrowolski@nokia.com>
    Signed-off-by: Grant Likely <grant.likely@arm.com>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d448f9a5fd941a69cceb7008d3ac9ac0396f64d8
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 14 13:39:06 2018 -0500

    Revert dts output formatting changes of spaces around brackets
    
    Commit 32b9c6130762 ("Preserve datatype markers when emitting dts format")
    add spaces between <> and [] and the encapsulated numbers. Fix this to
    keep the prior formatting and not break some users needlessly.
    
    Fixes: 32b9c6130762 ("Preserve datatype markers when emitting dts format")
    Reported-by: Stewart Smith <stewart@linux.ibm.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c86da84d30e4b72cfb4fee22b62bea4257bc14bf
Author: Grant Likely <grant.likely@arm.com>
Date:   Tue Sep 11 15:41:31 2018 -0500

    Add support for YAML encoded output
    
    YAML encoded DT is useful for validation of DTs using binding schemas.
    
    The YAML encoding is an intermediate format used for validation and
    is therefore subject to change as needed. The YAML output is dependent
    on DTS input with type information preserved.
    
    Signed-off-by: Grant Likely <grant.likely@arm.com>
    [robh: make YAML support optional, build fixes, Travis CI test,
     preserve type information in paths and phandles]
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 361b5e7d80673e7d3613cfdf989449013bf109a0
Author: Rob Herring <robh@kernel.org>
Date:   Tue Sep 11 15:41:30 2018 -0500

    Make type_marker_length helper public
    
    Make type_marker_length available to other users of TYPE_* markers.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bfbfab047e45445dd59bcdba98b61843e086d0d2
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Sep 11 03:28:39 2018 -0600

    pylibfdt: Add a means to add and delete notes
    
    These methods are needed to permit larger changes to the device tree blob.
    Add two new methods and an associate test.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9005f4108e7c440764153d3ea0c85e927a75ae55
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Sep 11 03:28:38 2018 -0600

    pylibfdt: Allow delprop() to return errors
    
    At present this method always raised an exception when an error occurs.
    Add a 'quiet' argument so it matches the other methods.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b94c056b137e59deefc62fbfe0cd3a23edfcc07c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 10 16:46:59 2018 +1000

    Make valgrind optional
    
    Some platforms don't have valgrind support, and sometimes you simply might
    not want to use valgrind.  But at present, dtc, or more specifically its
    testsuite, won't compile without valgrind because we use the valgrind
    client interface in some places to improve our testing and suppress false
    positives.
    
    This adds some Makefile detection to correctly handle the case where
    valgrind is not available.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fd06c54d4711f20d16bb1e18cba4d7bed09e5ad2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 10 12:59:53 2018 +1000

    tests: Better testing of dtc -I fs mode
    
    Greg Kurz added a trivial test of the -I fs mode recently, which was
    previously basically untested.  This is an oversight, since we
    recently had a bug which completely broke it.
    
    This replaces Greg's test with a more thorough test of -I fs mode.  We
    use a test helper to create the familiar test_tree1 in "fs" form, then use
    dtc -I fs to process it, and check that the results match what they
    should.
    
    We only check the content in -I fs -O dtb mode, since that's simplest,
    but we do run -I fs -O dts mode as well to make sure it doesn't blow
    up (the aforementioned bug caused just such a blow up, specific to -O
    dts mode, for example).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c3f50c9a86d91758d9ca3885adcad0622eac66aa
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 10 12:41:20 2018 +1000

    tests: Allow dtbs_equal_unordered to ignore mem reserves
    
    For some upcoming tests we want to be able to test if two trees are
    equal, but we don't care about the memory reservation map.  So, this
    adds an option to the dtbs_equal_unordered test helper which tells it
    to ignore the reserve map.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0ac9fdee37c7afe42285bbf197e6e3152b6c6c45
Author: Greg Kurz <groug@kaod.org>
Date:   Mon Sep 3 10:50:36 2018 +0200

    dtc: trivial '-I fs -O dts' test
    
    Some recent changes caused '-I fs -O dts' to crash instantly when
    emitting the first property holding actual data, ie, coming from
    a non-empty file. This got fixed already by another patch.
    
    This simply adds a test for the original problem.
    
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0fd1c8c783f3ee31af934ce7aacf8211961e23f2
Author: Dan Horák <dan@danny.cz>
Date:   Sat Sep 1 14:15:41 2018 +0200

    pylibfdt: fdt_get_mem_rsv returns 2 uint64_t values
    
    Fix typemap for fdt_get_mem_rsv so it returns 64-bit values.
    
    Fixes https://github.com/dgibson/dtc/issues/15.
    
    Signed-off-by: Dan Horák <dan@danny.cz>
    [dwg: Adjusted commit message for typo and context]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 04853cad18f423647d283062d1cb98f63c401720
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Aug 27 11:36:28 2018 +1000

    pylibfdt: Don't incorrectly / unnecessarily override uint64_t typemap
    
    In libfdt.i we set the handling of uint64_t parameters to use
    PyLong_AsUnsignedLong.  But for 32-bit platforms, where an unsigned long
    is 32-bits, this will truncate the value we need.
    
    It turns out swig's default typemapping for uint64_t correctly handles
    conversions both to python ints and python longs, so we don't need this
    typemap at all.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9619c8619c37b9aea98100bcc15c51a5642e877e
Author: Greg Kurz <groug@kaod.org>
Date:   Thu Aug 30 12:01:59 2018 +0200

    Kill bogus TYPE_BLOB marker type
    
    Since commit 32b9c6130762 "Preserve datatype markers when emitting dts
    format", we no longer try to guess the value type. Instead, we reuse
    the type of the datatype markers when they are present, if the type
    is either TYPE_UINT* or TYPE_STRING.
    
    This causes 'dtc -I fs' to crash:
    
    Starting program: /root/dtc -q -f -O dts -I fs /proc/device-tree
    /dts-v1/;
    
    / {
    
    Program received signal SIGSEGV, Segmentation fault.
    __strlen_power8 () at ../sysdeps/powerpc/powerpc64/power8/strlen.S:47
    47              ld      r12,0(r4)     /* Load doubleword from memory.  */
    (gdb) bt
    #0  __strlen_power8 () at ../sysdeps/powerpc/powerpc64/power8/strlen.S:47
    #1  0x00007ffff7de3d10 in __GI__IO_fputs (str=<optimized out>,
        fp=<optimized out>) at iofputs.c:33
    #2  0x000000001000c7a0 in write_propval (prop=0x100525e0,
        f=0x7ffff7f718a0 <_IO_2_1_stdout_>) at treesource.c:245
    
    The offending line is:
    
                    fprintf(f, "%s", delim_start[emit_type]);
    
    where emit_type is TYPE_BLOB and:
    
    static const char *delim_start[] = {
            [TYPE_UINT8] = "[",
            [TYPE_UINT16] = "/bits/ 16 <",
            [TYPE_UINT32] = "<",
            [TYPE_UINT64] = "/bits/ 64 <",
            [TYPE_STRING] = "",
    };
    
    /* Data blobs */
    enum markertype {
            TYPE_NONE,
            REF_PHANDLE,
            REF_PATH,
            LABEL,
            TYPE_UINT8,
            TYPE_UINT16,
            TYPE_UINT32,
            TYPE_UINT64,
            TYPE_BLOB,
            TYPE_STRING,
    };
    
    Because TYPE_BLOB < TYPE_STRING and delim_start[] is a static array,
    delim_start[emit_type] is 0x0. The glibc usually prints out "(null)"
    when one passes 0x0 to %s, but it seems to call fputs() internally if
    the format is exactly "%s", hence the crash.
    
    TYPE_BLOB basically means the data comes from a file and we don't know
    its type. We don't care for the former, and the latter is TYPE_NONE.
    
    So let's drop TYPE_BLOB completely and use TYPE_NONE instead when reading
    the file. Then, try to guess the data type at emission time, like the
    code already does for refs and labels.
    
    Instead of adding yet another check for TYPE_NONE, an helper is introduced
    to check if the data marker has type information, ie, >= TYPE_UINT8.
    
    Fixes: 32b9c61307629ac76c6ac0bead6f926d579b3d2c
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ac68ff92ae20f7447f7af6c154a95f528df46851
Author: Rob Herring <robh@kernel.org>
Date:   Mon Jul 30 21:57:35 2018 -0600

    parser: add TYPE_STRING marker to path references
    
    Path references are also a string, so add TYPE_STRING marker in addition
    to REF_PATH.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 90a190eb04d926655b643328ae995336568b705b
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jul 26 21:19:32 2018 -0600

    checks: add SPI bus checks
    
    Add SPI bus type detection and checks. The node name is the
    preferred way to find SPI buses as there is no common compatible or
    property which can be used. There are a few common properties used in
    child nodes, so they can be used as a fallback detection method. This
    lets us warn if the SPI controller is not properly named 'spi@...'.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 53a1bd5469055af7049a0ddaf00524a56d21bca2
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jul 26 21:19:31 2018 -0600

    checks: add I2C bus checks
    
    Add I2C bus type detection and checks. The node name is used to find I2C
    buses as there is no common compatible or property which can be used to
    identify I2C controllers/buses. There are some common I2C properties,
    but they are not used frequently enough to match on.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 88f18909db731a627456f26d779445f84e449536
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 23 13:00:50 2018 +1000

    dtc: Bump version to v1.4.7
    
    We've accumulated a bunch of bugfixes, including considerable improvements
    to libfdt's memory safety, so get ready for another release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 85bce8b2f06d17a909d9e20358630a2034f381ff
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 23 12:16:09 2018 +1000

    tests: Correction to vg_prepare_blob()
    
    vg_prepare_blob() assumes a valid return from fdt_num_mem_rsv() in order
    to make sensible initialization of the valgrind mem checker.  Usually
    that's fine, but it breaks down on the (deliberately corrupted)
    truncated_memrsv testcase.
    
    That led to marking a negative-size (== enormously sized once cast to
    size_t) as defined with VALGRIND_MAKE_MEM_DEFINED, which casued valgrind
    to freeze up and consume ludicrous amounts of memory until OOMing.
    
    This correction makes us robust in that case.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 57f7f9e7bc7cbcf1eb4dc00692d0229c73057d69
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jul 20 14:35:12 2018 +1000

    tests: Don't call memcmp() with NULL arguments
    
    You're not supposed to pass NULL to memcmp(), and some sanitizers complain
    about it, even when the length is zero.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c12b2b0c20eb8fbe1a22065f1d5f0f155ab56b0a
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Thu Jul 19 08:19:43 2018 +0200

    libfdt: fdt_address_cells() and fdt_size_cells()
    
    Add internal fdt_cells() to avoid copy and paste.  Test error cases and
    default values.  Fix typo in fdt_size_cells() documentation comment.
    
    Signed-off-by: Sebastian Huber <sebastian.huber@embedded-brains.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3fe0eeda0b7f275cd01f29773d2ad6b8888d6701
Author: Rob Herring <robh@kernel.org>
Date:   Thu Jul 12 18:20:05 2018 -0600

    livetree: Set phandle properties type to uint32
    
    Generated phandle property values are a single cell, so set the type
    marker to uint32. Otherwise, we default to uint8.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 853649accebaaa780142916a9c676a3a1fe0f2e5
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 10 14:49:07 2018 -0600

    pylibfdt: Support the sequential-write interface
    
    It is useful to be able to create a device tree from scratch using
    software. This is supported in libfdt but not currently available in the
    Python bindings.
    
    Add a new FdtSw class to handle this, with various methods corresponding
    to the libfdt functions. When the tree is complete, calling AsFdt() will
    return the completed device-tree object.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9b0e4fe26093cf3846868543b24b874990ec76e1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 9 11:00:21 2018 +1000

    tests: Improve fdt_resize() tests
    
    We primarily test fdt_resize() in the sw_tree1 testcase, but it has
    some deficiencies:
    
      - It didn't check for errors actually originating in fdt_resize(),
        just for errors before and after
    
      - It only tested cases where the resized buffer was at the same
        address as the original one, whereas fdt_resize() is also supposed
        to work if the new buffer is entirely separate, or partly
        overlapping
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1087504bb3e8b00988e7bb99784eb02d4d9d9fd1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 9 14:50:38 2018 +1000

    libfdt: Add necessary header padding in fdt_create()
    
    At present fdt_create() will succeed if there is exactly enough space to
    put in the fdt header.  However, it sets the off_mem_rsvmap field, a few
    bytes past that in order to align the memory reservation block.
    
    Having block pointers pointing past the end of the fdt is pretty ugly, even
    if it is just a transient state.  Worse, if fdt_resize() is called at
    exactly the wrong time, it can end up accessing data past the blob's
    allocated space because of this.
    
    So, correct fdt_create() to ensure that there is sufficient space for the
    alignment padding as well as the plain header.  For paranoia, also add a
    check in fdt_resize() to make sure we don't copy data from outside the
    blob's bounds.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c72fa777e61383850436f9f9cac3b0ddae41317b
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Jul 7 13:57:19 2018 -0600

    libfdt: Copy the struct region in fdt_resize()
    
    At present this function appears to copy only the data before the struct
    region and the data in the string region. It does not seem to copy the
    struct region itself.
    
    From the arguments of this function it seems that it should support fdt
    and buf being different. This patch attempts to fix this problem.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 32b9c61307629ac76c6ac0bead6f926d579b3d2c
Author: Grant Likely <grant.likely@arm.com>
Date:   Thu Jun 28 15:37:01 2018 -0600

    Preserve datatype markers when emitting dts format
    
    If datatype markers are present in the property value, use them to
    output the data in the correct format instead of trying to guess the
    datatype. This also will preserve data grouping, such as in an
    interrupts list.
    
    This is a step forward for preserving and using datatype information
    when processing DTS/DTB files. Schema validation tools can use the
    datatype information to make sure a DT is correctly formed and
    intepreted.
    
    Signed-off-by: Grant Likely <grant.likely@arm.com>
    [robh: rework marker handling and fix label output]
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6dcb8ba408ec18009083acaa9f85429afa39e453
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 21 15:32:40 2018 +1000

    libfdt: Add helpers for accessing unaligned words
    
    This adds some helpers to load (32 or 64 bit) words from an fdt blob, even
    if they're unaligned and we're on a platform that doesn't like plain
    unaligned loads and stores.  We then use the helpers in a number of places.
    There are two purposes for this:
    
    1) This makes libfdt more robust against a blob loaded at an unaligned
       address.  It's usually good practice to load a blob at a 64-bit
       alignment, but it's nice to work even then.
    
    2) Users can use these helpers to load integer values from within property
       values.  These can often be unaligned, even if the blob as a whole is
       aligned, since some property encodings have integers and strings mixed
       together without any alignment gaps.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 42607f21d43e44aafc7ac7d9ca4f0ea1e3bda904
Author: Rob Herring <robh@kernel.org>
Date:   Fri Jun 15 15:37:15 2018 -0600

    tests: Fix incorrect check name 'prop_name_chars'
    
    'prop_name_chars' is not a valid check name, but the test was passing due
    to a bug in dtc-checkfails.sh. Fix it to be the correct name,
    'property_name_chars'.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d78c33bf8a122eb3a97934e71b8c651cc1b1e4b
Author: Rob Herring <robh@kernel.org>
Date:   Fri Jun 15 15:37:14 2018 -0600

    tests: fix grep for checks error messages
    
    I noticed the error type passed in didn't matter for check tests to pass.
    There's a couple of problems with the grep regex. The error/warning
    messages begin with the output filename now, so "ERROR" or "Warning" is not
    at the beginning of the line. Secondly, the parentheses seem to be wrong.
    It's not clear to me what was intended.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b770f3d1c13f63a22c7015bd2438dbc1164b5362
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 13 21:44:44 2018 -0600

    pylibfdt: Support setting the name of a node
    
    Add a method to call fdt_set_name().
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2f0d07e678e05f260b575342867a26d466bdec85
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 13 21:44:43 2018 -0600

    pylibfdt: Add functions to set and get properties as strings
    
    It is common to want to set a property to a nul-terminated string in a
    device tree. Add python methods to handle this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 354d3dc55939499954b5e1f4948517da24591cd2
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 13 05:38:23 2018 -0600

    pylibfdt: Update the bytearray size with pack()
    
    At present pack() calls fdt_pack() which may well reduce the size of the
    device-tree data. However this does not currently update the size of the
    bytearray to take account of any reduction. This means that there may be
    unused data at the end of the bytearray and any users of as_bytearray()
    will see this extra data.
    
    Fix this by resizing the bytearray after packing.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3c374d46accee1911f5679ccb131d1404abbdbbf
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jun 12 23:37:31 2018 -0600

    pylibfdt: Allow reading integer values from properties
    
    Extend the Properties class with some functions to read a single integer
    property. Add a new getprop_obj() function to return a Property object
    instead of the raw data.
    
    This suggested approach can be extended to handle other types, as well as
    arrays.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 49d32ce40bb44a35536326236c4f82ca6848b0f0
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jun 12 23:24:11 2018 -0600

    pylibfdt: Use an unsigned type for fdt32_t
    
    The members of struct fdt_header are declared as fdt32_t which is a
    32-bit, big-endian, unsigned integer. These fields are accessed by macros
    in libfdt.h so no return type is declared. But the correct return type is
    uint32_t, not fdt32_t, since the endianness conversion is done within the
    macro before returning the value.
    
    The macros are re-declared as normal functions in pylibfdt since swig does
    not support macros. The return type is currently int. Change it to
    uint32_t, which allows us to drop the work-around mask in Fdt.magic().
    
    Also change the typedef for fdt32_t to uint32_t. The currently has no
    obvious effect, since use of big-endian values should always be internal
    to pylibfdt, but it is more correct.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 481246a0c13a364081579c97fc4efbba5213cac1
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:07 2018 -0600

    pylibfdt: Avoid accessing the internal _fdt member in tests
    
    We can use the accessor now, so do so.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9aafa33d99ed8a6fd9af827480b58a3f463917fb
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:05 2018 -0600

    pylibfdt: Add functions to update properties
    
    Allow updating and creating properties, including special methods for
    integers.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5a598671fdbf20355ecbaf59d9f502e689df683f
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:04 2018 -0600

    pylibfdt: Support device-tree creation/expansion
    
    Add support for fdt_open_into() and fdt_create_empty_tree() from the
    Python library. The former is named resize() since it better fits with
    what the Python binding actually does.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 483e170625e1b6905fc4c40db92ee48d47ee3283
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:03 2018 -0600

    pylibfdt: Add support for reading the memory reserve map
    
    Add a way to access this information from Python.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 29bb05aa4200285ae3de07a45efd4e5bf1999980
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:02 2018 -0600

    pylibfdt: Add support for the rest of the header functions
    
    Export all of these through Python.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 582a7159a5d0e1f4c96d5bdaab63defc69762c95
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:01 2018 -0600

    pylibfdt: Add support for fdt_next_node()
    
    This function requires a bit of typemap effort to get the depth parameter
    to work correctly. Add support for it, along with a test.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f0f8c9169819e5505e63e247e40e9593625e01a4
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 15:37:00 2018 -0600

    pylibfdt: Reorder functions to match libfdt.h
    
    The ordering of the Python functions loosely matches the corresponding
    function in the C header file, but not exactly. As we add more functions
    it is easier to track what is missing if they are in the same order.
    
    Move some functions around to achieve this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 64a69d123935511f35da1a6101e32d4276f57cd3
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 13:58:12 2018 -0600

    pylibfdt: Return string instead of bytearray from getprop()
    
    The return value is not actually mutable, so it seems more correct to
    return bytes rather than a bytearray.
    
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4d09a83420df9b971415133b1904bcd9cc4f6fdd
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 12:33:32 2018 -0600

    fdtput: Add documentation
    
    This is missing at present and the fdtput tool could use a litle more
    information than just its help text.
    
    This might be useful for distributions which want to provide a man page.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e617cbe1bd6739a4c530643252264a90e566a5f6
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 6 12:33:31 2018 -0600

    fdtget: Add documentation
    
    This is missing at present and the fdtget tool is no-longer trivial. Add
    a little bit of information.
    
    This might be useful for distributions which want to provide a man page.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 180a93924014dcf57fb46b538b8ec6b017831c6a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 5 09:55:15 2018 +1000

    Use <inttypes.h> format specifiers in a bunch of places we should
    
    Rather than assuming that uint32_t is the same thing as unsigned.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b9af3b39657681e2d76b7a22f6736e8c3d64e392
Author: nixiaoming <nixiaoming@huawei.com>
Date:   Thu May 24 10:50:18 2018 +0800

    scripts/dtc: Fixed format mismatch in fprintf
    
    format specifier "d" need arg type "int" , but the according arg
    "fdt32_to_cpu(xxx)" has type "unsigned int"
    
    Signed-off-by: nixiaoming <nixiaoming@huawei.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4b8fcc3d015c6b70c74997fb735614c2ef9e6610
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Mar 18 00:12:12 2018 +1100

    libfdt: Add fdt_check_full() function
    
    This new function implements a complete and thorough check of an fdt blob's
    structure.  Given a buffer containing an fdt, it should return 0 only if
    the fdt within is structurally sound in all regards.  It doesn't check
    anything about the blob's contents (i.e. the actual values of the nodes and
    properties), of course.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit c14223fb229255c4e7e2719022c77653630ad28c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Mar 17 19:02:58 2018 +1100

    tests: Use valgrind client requests for better checking
    
    libfdt is never supposed to access memory outside the the blob, or outside
    the sub-blocks within it, even if the blob is badly corrupted.
    
    We can leverage valgrind's client requests to do better testing of this.
    This adds a vg_prepare_blob() function which marks just the valid parts of
    an fdt blob as properly initialized, explicitly marking the rest as
    uninitialized.  This means valgrind should catch any bad accesses.
    
    We add a call to vg_prepare_blob() to load_blob() so that lots of the
    existing testcases will benefit from the extra checking.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit 5b67d2b955a3ef6bc4ce6fec3b06c660539aa8ce
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Mar 17 20:05:24 2018 +1100

    tests: Better handling of valgrind errors saving blobs
    
    Currently we have 3 valgrind suppression files in the tests, all of which
    are to handle memcheck errors that originate from saving entire buffers
    containing blobs where the gaps between sub-blocks might not be
    initialized.
    
    We can more simply suppress those errors by having the save_blob() helper
    use valgrind's client interface to mark the data as initialized before we
    write it out.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit e2556aaeb50678647d654b7ab279301e839a679c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Mar 17 14:56:30 2018 +1100

    tests: Remove unused #define
    
    This was leftover from an earlier implementation of load_blob().
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit fb9c6abddaa818a0261eaa11dce5fd8cfbd61b18
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Mar 17 14:53:23 2018 +1100

    Use size_t for blob lengths in utilfdt_read*
    
    It's more appropriate than off_t since it is, after all, a size not an
    offset.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit 0112fda03bf653e36592b22dee97767aaa524232
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 16 22:40:26 2018 +1100

    libfdt: Add fdt_header_size()
    
    We have a couple of places within libfdt and its tests where we need to
    find the size of the header, based on the version.  Add a helper function
    for it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit 6473a21d8bfe0eb923e4adfd2b536e79ca248081
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 16 18:27:03 2018 +1100

    Consolidate utilfdt_read_len() variants
    
    There are no less than _four_ variants on utilfdt_read() which is a bit
    excessive.  The _len() variants are particularly pointless, since we can
    achieve the same thing with very little extra verbosity by using the usual
    convention of ignoring return parameters if they're NULL.  So, get rid of
    them (we keep the shorter names without _len, but add now-optional len
    parameters).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit d5db5382c5e583d184e4484662eb87f1999d4a46
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 9 23:28:56 2018 +1100

    libfdt: Safer access to memory reservations
    
    fdt_num_mem_rsv() and fdt_get_mem_rsv() currently don't sanity check their
    parameters, or the memory reserve section offset in the header.  That means
    that on a corrupted blob they could access outside of the range of memory
    that they should.
    
    This improves their safety checking, meaning they shouldn't access outside
    the blob's bounds, even if its contents are badly corrupted.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 719d582e98ec9c696c3e3c74e6efb357fd2168f8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Mar 25 22:54:22 2018 +1100

    libfdt: Propagate name errors in fdt_getprop_by_offset()
    
    fdt_getprop_by_offset() doesn't check for errors from fdt_string() - after
    all, until very recently it couldn't fail.  Now it can, so we need to
    propagate errors up to the caller.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 70166d62a27f39b15f931b7bf3ffbaa1478fadcf
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 14 22:45:56 2017 +1100

    libfdt: Safer access to strings section
    
    fdt_string() is used to retrieve strings from a DT blob's strings section.
    It's rarely used directly, but is widely used internally.
    
    However, it doesn't do any bounds checking, which means in the case of a
    corrupted blob it could access bad memory, which libfdt is supposed to
    avoid.
    
    This write a safe alternative to fdt_string, fdt_get_string().  It checks
    both that the given offset is within the string section and that the string
    it points to is properly \0 terminated within the section.  It also returns
    the string's length as a convenience (since it needs to determine to do the
    checks anyway).
    
    fdt_string() is rewritten in terms of fdt_get_string() for compatibility.
    
    Most of the diff here is actually testing infrastructure.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit eb890c0f77dcd98bb3f24755d50dfbe5eba11340
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Oct 23 06:45:56 2017 +0300

    libfdt: Make fdt_check_header() more thorough
    
    Currently fdt_check_header() performs only some rudimentary checks, which
    is not really what the name suggests.  This strengthens fdt_check_header()
    to check as much about the blob as is possible from the header alone:  as
    well as checking the magic number and version, it checks that the total
    size is sane, and that all the sub-blocks within the blob lie within the
    total size.
    
     * This broadens the meaning of FDT_ERR_TRUNCATED to cover all sorts of
       improperly terminated blocks as well as just a structure block without
       FDT_END.
    
     * This makes fdt_check_header() only succeed on "complete" blobs, not
       in-progress sequential write blobs.  The only reason this didn't fail
       before was that this function used to be called by many RO functions
       which are supposed to also work on incomplete SW blobs.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 899d6fad93f328872477f28e0d69989a33607be7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 10 17:06:18 2018 +1000

    libfdt: Improve sequential write state checking
    
    When creating a tree with the sequential write functions, certain things
    have to be done in a certain order.  You must create the memory reserve map
    and only then can you create the actual tree structure.
    
    The -FDT_ERR_BADSTATE return code is for if you try to do things out of
    order.  However, we weren't checking that very thoroughly, so it was
    possible to generate a corrupted blob if, for example, you started calling
    fdt_begin_node() etc. before calling fdt_finish_reservemap().
    
    This makes the state checking more thorough disallow that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit 04b5b4062ccd55ea7caf04c0eb02753e6986df76
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 22 16:32:15 2017 +1100

    libfdt: Clean up header checking functions
    
    Many of the libfdt entry points call some sort of sanity check function
    before doing anything else.  These need to do slightly different things for
    the various classes of functions.
    
    The read-only version is shared with the exported fdt_check_header(), which
    limits us a bit in how we can improve it.  For that reason split the two
    functions apart (though the exported one just calls the ro one for now).
    
    We also rename the functions for more consistency - they're all named
    fdt_XX_probe_() where the XX indicates which class of functions they're
    for.  "probe" is a better "term" than the previous check, since they really
    only do minimal validation.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

commit 44d3efedc81618e2d51ebbc2305ff020d1107988
Author: Grant Likely <grant.likely@arm.com>
Date:   Tue May 15 17:42:54 2018 -0500

    Preserve datatype information when parsing dts
    
    The current code throws away all the data type and grouping information
    when parsing the DTS source file, which makes it difficult to
    reconstruct the data format when emitting a format that can express data
    types (ie. dts and yaml). Use the marker structure to mark the beginning
    of each integer array block (<> and []), and the datatype contained in
    each (8, 16, 32 & 64 bit widths).
    
    Signed-off-by: Grant Likely <grant.likely@arm.com>
    Reviewed-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [robh: s/MARKER_/TYPE_/]
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f0be81bd8de093e1c775e62b92449c9773e7f732
Author: Simon Glass <sjg@chromium.org>
Date:   Thu May 17 23:09:14 2018 -0600

    Make Property a subclass of bytearray
    
    It is annoying to have to add .value when we want the value of a Property.
    Make Property a subclass of bytearray so that it can be used directly when
    the value is required.
    
    Fix the Property class comment while we are here.
    
    Suggested-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 24b1f3f064d4fde60ab7ba3ec40161edb3fab4b3
Author: Simon Glass <sjg@chromium.org>
Date:   Thu May 17 23:09:13 2018 -0600

    pylibfdt: Add a method to access the device tree directly
    
    When calling libfdt functions which are not supported by the Fdt class it
    is necessary to get direct access to the device tree data. At present this
    requries using the internal _fdt member. Add a new method to provide
    public access to this, without allowing the data to be changed.
    
    Note that a bytearray type is returned rather than str, since the swig
    types are set up for bytearray to map correctly to const void *.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 84e414b0b5bcea3a82875d79cc15520440e1e49b
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Thu May 3 22:27:27 2018 +0200

    tests: Add a test case for the omit-if-no-ref keyword
    
    The newly introduced /omit-if-no-ref/ needs a few test cases, make
    sure to test them.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4038fd90056e81f9a9dc107570431e4e20e526bd
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Thu May 3 22:27:26 2018 +0200

    dtc: add ability to make nodes conditional on them being referenced
    
    A number of platforms have a need to reduce the number of DT nodes,
    mostly because of two similar constraints: the size of the DT blob, and
    the time it takes to parse it.
    
    As the DT is used in more and more SoCs, and by more projects, some
    constraints start to appear in bootloaders running from SRAM with an
    order of magnitude of 10kB. A typical DT is in the same order of
    magnitude, so any effort to reduce the blob size is welcome in such an
    environment.
    
    Some platforms also want to reach very fast boot time, and the time it
    takes to parse a typical DT starts to be noticeable.
    
    Both of these issues can be mitigated by reducing the number of nodes in
    the DT. The biggest provider of nodes is usually the pin controller and
    its subnodes, usually one for each valid pin configuration in a given
    SoC.
    
    Obviously, a single, fixed, set of these nodes will be used by a given
    board, so we can introduce a node property that will tell the DT
    compiler to drop the nodes when they are not referenced in the tree, and
    as such wouldn't be useful in the targetted system.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e1f139ea4900fd0324c646822b4061fec6e08321
Author: Rob Herring <robh@kernel.org>
Date:   Fri Apr 20 08:08:23 2018 -0500

    checks: drop warning for missing PCI bridge bus-range
    
    Having a 'bus-range' property for PCI bridges should not be required,
    so remove the warning when missing. There was some confusion with the
    Linux kernel printing a message that no property is present and the OS
    assigned the bus number. This message was intended to be informational
    rather than a warning.
    
    When the firmware doesn't enumerate the PCI bus and leaves it up to the
    OS to do, then it is perfectly fine for the OS to assign bus numbers
    and bus-range is not necessary.
    
    There are a few cases where bus-range is needed or useful as Arnd
    Bergmann summarized:
    
    - Traditionally Linux avoided using multiple PCI domains, but instead
      configured separate PCI host bridges to have non-overlapping
      bus ranges so we can present them to user space as a single
      domain, and run the kernel without CONFIG_PCI_DOMAINS.
      Specifying the bus ranges this way would and give stable bus
      numbers across boots when the probe order is not fixed.
    
    - On certain ARM64 systems, we must only use the first
      128 bus numbers based on the way the IOMMU identifies
      the device with truncated bus/dev/fn number. There are probably
      others like this, with various limitations.
    
    - To leave some room for hotplugged devices, each slot on
      a host bridge can in theory get a range of bus numbers
      that are available when assigning bus numbers at boot time
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f4eba68d89ee8d35d1f94ec8b38481a64a5395e7
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Mar 27 14:13:31 2018 +0200

    checks: Print duplicate node name instead of parent name
    
    When refactoring node path printing, the code checking for duplicate
    node names was accidentally changed to print the name of the parent
    node, instead of the name of the duplicated child node.
    
    Fixes: 88960e3989073207 ("checks: centralize printing of node path in check_msg")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 46df1fb1b211ec65b004c79b0f7adae25fb49dc3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 9 13:55:17 2018 +1100

    .travis.yml: Run valgrind checks via Travis
    
    To improve our coverage, run the testsuite under Valgrind via Travis.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 14a3002a1aee3224cc0db437ee41d3b90a9cef45
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 9 13:47:37 2018 +1100

    tests: Update valgrind suppressions for sw_tree1
    
    This test builds a tree in a previously uninitialized buffer, then writes
    the whole buffer out to a file to be used by other tests.  Because part of
    the buffer may be uninitialized this causes a valgrind error.
    
    Pre-initializing the buffer would remove the error, however it would make
    valgrind not notice any accesses to the uninitialized portion *before* the
    write out, and those would be genuine errors.
    
    So, instead we use a valgrind suppressions file - however it has a couple
    of problems.  First it unnecessarily lists the same call path twice.
    Second, the call path is only right for some C library versions.  Change
    the second copy to cover possible path that occurs with a different glibc
    version.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 02c5fe9debc0e31e97ee0f158627d5cb512c7940
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 9 13:38:15 2018 +1100

    tests: Remove valgrind error from tests/get_path
    
    In the case where fdt_get_path() returns an error, a debug print will
    attempt to display a poisoned buffer, running over the end and accessing
    uninitialized memory.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit df536831d02c51556a8e88cd8da0be0244484156
Author: Rob Herring <robh@kernel.org>
Date:   Tue Feb 13 17:00:59 2018 -0600

    checks: add graph binding checks
    
    Add checks for DT graph bindings. These checks check node names,
    unit-addresses and link connections on ports, port, and endpoint nodes.
    
    The graph nodes are matched by finding nodes named 'endpoint' or with a
    'remote-endpoint' property. We can't match on 'ports' or 'port' nodes
    because those names are used for non-graph nodes. While the graph nodes
    aren't really buses, using the bus pointer to tag matched nodes is
    convenient.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2347c96edcbea4cf59f47430a0de14d4fdedb0af
Author: Rob Herring <robh@kernel.org>
Date:   Tue Mar 6 18:49:15 2018 -0600

    checks: add a check for duplicate unit-addresses of child nodes
    
    Child nodes with the same unit-address (and different node names) are
    either an error or just bad DT design. Typical errors are the unit-address
    is just wrong (i.e. doesn't match reg value) or multiple children using the
    same overlapping area. Overlapping regions are considered an error in new
    bindings, but do exist in some existing trees. This check should flag
    most but not all of those errors. Finding all cases would require doing
    address translations and creating a full map of address spaces.
    
    Mixing more than one address/number space at a level is bad design. It only
    works if both spaces can use the same #address-cells and #size-cells sizes.
    It also complicates parsing have a mixture of types of child nodes. The
    best practice in this case is adding child container nodes for each
    address/number space or using additional address bits/cells to encode
    different address spaces.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8f1b35f88395adea01ce1100c5faa27dacbc8410
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 6 13:27:53 2018 +1100

    Correct overlay syntactic sugar for generating target-path fragments
    
    We've recently added "syntactic sugar" support to generate runtime dtb
    overlays using similar syntax to the compile time overlays we've had for
    a while.  This worked with the &label { ... } syntax, adjusting an existing
    labelled node, but would fail with the &{/path} { ... } syntax attempting
    to adjust an existing node referenced by its path.
    
    The previous code would always try to use the "target" property in the
    output overlay, which needs to be fixed up, and __fixups__ can only encode
    symbols, not paths, so the result could never work properly.
    
    This adds support for the &{/path} syntax for overlays, translating it into
    the "target-path" encoding in the output.  It also changes existing
    behaviour a little because we now unconditionally one fragment for each
    overlay section in the source.  Previously we would only create a fragment
    if we couldn't locally resolve the node referenced.  We need this for
    path references, because the path is supposed to be referencing something
    in the (not yet known) base tree, rather than the overlay tree we are
    working with now.  In particular one useful case for path based overlays
    is using &{/} - but the constructed overlay tree will always have a root
    node, meaning that without the change that would attempt to resolve the
    fragment locally, which is not what we want.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit afbddcd418fbf70467419b91f73cce972482449c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 6 14:45:50 2018 +1100

    Suppress warnings on overlay fragments
    
    Overlay fragments are traditionally named "fragment@NNN" but don't have
    have a 'reg' property, amongst other differences from normal nodes.  Really
    we should treat overlay fragments fundamentally differently, but for the
    moment, suppress the common warnings about the fragment names with this
    simple hack.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 119e27300359b309e27bfd94b506ea5ad24f1cfc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 6 13:45:23 2018 +1100

    Improve tests for dtc overlay generation
    
    So far, the tests for generating runtime overlays with dtc weren't checking
    the syntactic sugar.  This adds such a test.
    
    Furthermore the existing tests were only minimally testing dtc's output
    for the overlay.  This adds a test comparing the dtc output with the
    more or less manually constructed overlays we already have for testing
    libfdt's overlay application code.  This does require some minor changes
    to that manually constructed overlay which don't change the sematics but
    re-order / rename things to match the way dtc does it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aadd0b65c987d21776354800fdf24ad35c0ffe68
Author: Rob Herring <robh@kernel.org>
Date:   Wed Jan 31 08:57:04 2018 -0600

    checks: centralize printing of property names in failure messages
    
    Some failure messages apply to a specific property. Add a FAIL_PROP()
    macro for failure messages which are specific to a property. With that,
    failure messages can print the property name in a standard way. Once
    source line numbers are supported, then the file and line number of the
    property can be used instead of the node file and line number.
    
    Convert the existing messages related to properties to use the FAIL_PROP
    macro and reword the messages as necessary.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 88960e3989073207e31d6273309247bb46407d6c
Author: Rob Herring <robh@kernel.org>
Date:   Wed Jan 31 08:57:03 2018 -0600

    checks: centralize printing of node path in check_msg
    
    Most error/warning messages print the node path as part of their error
    message. Move printing of the node path into check_msg() so the
    formatting can be standardized to the form:
    
    <output file>: (ERROR|warning) (<check name>): <full node name>: <check message>
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f1879e1a50ebc3786540a075701ccaead2bfbe1f
Author: Nathan Whitehorn <nwhitehorn@freebsd.org>
Date:   Thu Jan 25 05:13:40 2018 +0000

    Add limited read-only support for older (V2 and V3) device tree to libfdt.
    
    This can be useful in particular in the kernel when booting on systems
    with FDT-emitting firmware that is out of date. Releases of kexec-tools
    on ppc64 prior to the end of 2014 are notable examples of such.
    
    Signed-off-by: Nathan Whitehorn <nwhitehorn@freebsd.org>
    [dwg: Some whitespace cleanups]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 37dea76e9700fa4799b4cb1abfd74b121f6e3dd8
Author: Julia Lawall <julia.lawall@lip6.fr>
Date:   Mon Jan 22 09:08:45 2018 +0100

    srcpos: drop special handling of tab
    
    Align column number with those reported by gcc.  Thus, do not make a tab
    count as 8 spaces.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 65893da4aee04882affc30f3ff3265fa483bdb8e
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon Jan 8 11:56:33 2018 +0100

    libfdt: overlay: Add missing license
    
    The overlay support has been introduced, but the copyright and license
    header was missing. Make sure that this is no longer the case.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 962a45ca034d5cb8a0d40de46d28f4c98d341707
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Jan 5 11:54:12 2018 -0700

    Avoid installing pylibfdt when dependencies are missing
    
    At present we have a build check that python-dev and swig are available.
    If they are not, we print a message and skip building pylibfdt.
    
    However this check is not currently present with 'make install'. The
    install is attempted, and fails. See crbug.com/789189
    
    Split the check out into a separate script and use it twice, once for the
    build and once for the install. This corrects the error.
    
    Reported-by: Mike Frysinger <vapier@chromium.org>
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cd6ea1b2bea62fc11ee56116a60896d527a792b8
Author: kevans@FreeBSD.org <kevans@FreeBSD.org>
Date:   Wed Jan 3 21:49:23 2018 -0600

    Makefile: Split INSTALL out into INSTALL_{PROGRAM,LIB,DATA,SCRIPT}
    
    For adoption into systems that may have additional arguments to be passed into
    install(1) upon install, split out INSTALL into the different types of files to
    be installed and use them appropriately. This allows, for instance, passing -s
    to strip binaries and libs while not botching directory installs or data/script
    installations.
    
    Signed-off-by: Kyle Evans <kevans@FreeBSD.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 51b3a16338df06cc5fba94c21e1184698ca4afd4
Author: kevans@FreeBSD.org <kevans@FreeBSD.org>
Date:   Wed Jan 3 22:30:13 2018 -0600

    Makefile.tests: Add LIBDL make(1) variable for portability sake
    
    Some platforms (many, if not all, of the *BSD projects) do not provide a libdl,
    and instead provide the same functionality in libc. Instead of forcing these
    platforms to patch out the link against libdl, add a LIBDL make(1) variable to
    allow the -ldl argument to be excluded easily via make(1) arguments.
    
    Signed-off-by: Kyle Evans <kevans@FreeBSD.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 333d533a8f4dd38f5d8ae6489f675cc02dd6ee5e
Author: kevans@FreeBSD.org <kevans@FreeBSD.org>
Date:   Wed Jan 3 10:34:44 2018 -0600

    Attempt to auto-detect stat(1) being used if not given proper invocation
    
    GNU stat(1) uses '-c "%s"' as the proper invocation to print filesize of the
    file in question, while BSD stat(1) uses '-f "%Uz"'. Do some trivial
    autodetection to check if we're using GNU stat(1) and assume we're using BSD
    stat(1) if we don't detect otherwise.
    
    This should allow the test suite to run properly out-of-the-box on *BSDs and
    MacOS in addition to the current Linux support.
    
    Signed-off-by: Kyle Evans <kevans@FreeBSD.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e54388015af1fb4bf04d0bca99caba1074d9cc42
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 3 17:04:32 2018 +1100

    dtc: Bump version to v1.4.6
    
    We've accumulated a number of bugfixes since v1.4.5, so prepare for another
    release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a1fe86f380cbae3fb1aea85654d44637dd13d6c3
Author: kevans@FreeBSD.org <kevans@FreeBSD.org>
Date:   Tue Jan 2 21:05:38 2018 -0600

    fdtoverlay: Switch from using alloca to malloc
    
    alloca entails a complicated header situation when using other platforms, where
    some split it out in alloca.h while others include it as a standard part of
    stdlib.h.
    
    The cons don't seem to outweigh the pros, so switch it to malloc.
    
    Signed-off-by: Kyle Evans <kevans@FreeBSD.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c8d5472de3ff24baa9f331b12ada43abc2058737
Author: kevans@FreeBSD.org <kevans@FreeBSD.org>
Date:   Tue Jan 2 20:55:32 2018 -0600

    tests: Improve compatibility with other platforms
    
    stat -c %s's equivalent on FreeBSD is stat -f %Uz; these differ enough, allow
    STATSZ in the environment to specify local replacement for a stat that outputs
    size in bytes of an argument.
    
    Signed-off-by: Kyle Evans <kevans@FreeBSD.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c81d389a10ccf4a2af7e170aa216f38ca3ad1961
Author: Rob Herring <robh@kernel.org>
Date:   Thu Dec 14 16:40:01 2017 -0600

    checks: add chosen node checks
    
    Add some checks for /chosen node. These check that chosen is located at
    the root level and that bootargs and stdout-path properties are strings.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e671852042a77b15ec72ca908291c7d647e4fb01
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 12 16:46:28 2017 -0600

    checks: add aliases node checks
    
    Add checks for aliases node that all properties follow alias naming
    convention and the values are a valid path.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d0c44ebe3f4265dab3c9797eda1dacc569a1e953
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 12 16:46:27 2017 -0600

    checks: check for #{size,address}-cells without child nodes
    
    Add a check for unnecessary "#{size,address}-cells" when there's neither
    a 'ranges' property nor child nodes with a 'reg' property.
    
    An exception may be an overlay that adds nodes, but this case would need
    "#{size,address}-cells" in the overlay to properly compile already.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 18a3d84bb802d3281d8df91a973dce271f5523fb
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 12 16:46:26 2017 -0600

    checks: add string list check for *-names properties
    
    Add a string list check for common properties ending in "-names" such as
    reg-names or interrupt-names.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8fe94fd6f19f9065b9147d364d35167a3c9b016a
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 12 16:46:25 2017 -0600

    checks: add string list check
    
    Add a check for string list properties with compatible being the first
    check.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c573081960442dbec11a9ae96daedc75a9d84a7
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 12 16:46:24 2017 -0600

    checks: add a string check for 'label' property
    
    Add a string property check for 'label' property. 'label' is a human
    readable string typically used to identify connectors or ports on devices.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a384191eba095164e986215a71a44023610dc0c9
Author: Peter Rosin <peda@axentia.se>
Date:   Mon Dec 4 10:07:23 2017 +0100

    checks: fix sound-dai phandle with arg property check
    
    The property is named "sound-dai", not "sound-dais".
    
    Fixes: b3bbac02d5e3 ("checks: add phandle with arg property checks")
    Signed-off-by: Peter Rosin <peda@axentia.se>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b260c4f610c004c6e9e36c5f7bbb58d23e605bf1
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Nov 20 17:12:18 2017 +0000

    Fix ambiguous grammar for devicetree rule
    
    Commit 737b2df3, "overlay: Add syntactic sugar version of overlays"
    introduced an empty rule for "devicetree" that created ambiguities in
    the grammar and causes the following warning:
    
             BISON dtc-parser.tab.c
      dtc-parser.y: warning: 3 shift/reduce conflicts [-Wconflicts-sr]
    
    Fix the grammar by explicitly testing for the condition the
    new overlay grammar wants to use. This means duplicating a very small
    amount of grammar processing code, but the alternative seems to be a
    more invasive reorganization of the devicetree rule. Better to fix it
    this way now and save the reorg for a separate patch.
    
    Signed-off-by: Grant Likely <grant.likely@arm.com>
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fe667e382bac9326eaea304da2ade5ecb10997d3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Nov 11 17:52:50 2017 +1100

    tests: Add some basic tests for the pci_bridge checks
    
    This adds some simple tests for the checks of correctly formatted PCI
    bridge nodes.  Doesn't test all that much, but it's a start.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7975f6422260af4ac7ae2fcdff0ef2a6e391ab71
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 29 22:54:09 2017 +0100

    Fix widespread incorrect use of strneq(), replace with new strprefixeq()
    
    Every remaining usage of strneq() is, in fact, incorrect.  They're trying
    to check that the first n characters of one string exactly match another
    string.  But, they fall into the classic trap of strncmp() on which
    strneq() is based.  If n is less than the length of the second string, they
    only check that the first string matches the start of the second, not the
    whole of it.
    
    To fix this, remove strneq() and replace it with a strprefixeq() function
    which does what we want here.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fca296445eabf3cfe986e89dd8711c0be583036d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 29 18:56:03 2017 +0100

    Add strstarts() helper function
    
    nodename_from_path() in flattree.c uses strneq() to test that one
    string starts with another. This is, in fact, the only correct usage
    of strneq() in the entire tree.  To make things harder to confuse, add
    a strstarts() function for this purpose.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cc392f089007873734ae2fbfb384df7acb4fe3c6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 29 22:56:54 2017 +0100

    tests: Check non-matching cases for fdt_node_check_compatible()
    
    The current tests for fdt_node_check_compatible() test that it returns true
    on several matching cases, but don't test that it actually returns false on
    some non-matching cases, which isn't great coverage.  Add some basic tests
    to address that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bba26a5291c8343101e0296b0e478deb4c9b60b0
Author: Tero Kristo <t-kristo@ti.com>
Date:   Tue Oct 24 17:14:18 2017 +0300

    livetree: avoid assertion of orphan phandles with overlays
    
    Right now, check_interrupts_property fails with overlays, as the phandle
    for the interrupt-parent can be orphan. Avoid this by allowing the orphan
    node to pass the assert check.
    
    The process_checks() call is also moved later during init sequence,
    so that we can use the global variable generate_fixups to check if
    we are compiling an overlay.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    [dwg: Shortcut handling of invalid phandles]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c8f8194d76cc2dc6d499548431ff62d0ddeca68d
Author: John Arbuckle <programmingkidx@gmail.com>
Date:   Wed Oct 25 21:13:46 2017 -0400

    implement strnlen for systems that need it
    
    Prior the Mac OS 10.7, the function strnlen() was not available. This patch
    implements strnlen() on Mac OS X versions that are below 10.7.
    
    Signed-off-by: John Arbuckle <programmingkidx@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c8b38f65fdec4226d43f0e8eb5cf541aff3c80a5
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 18 17:22:40 2017 +1100

    libfdt: Remove leading underscores from identifiers
    
    In a lot of places libfdt uses a leading _ character to mark an identifier
    as "internal" (not part of the published libfdt API).  This is a bad idea,
    because identifiers with a leading _ are generally reserved by the C
    library or system.  It's particularly dangerous for libfdt, because it's
    designed to be able to be integrated into lots of different environments.
    
    In some cases the leading _ has no purpose, so we simply drop it.  In most
    cases we move it to the end, as our new convention for marking internal
    identifiers.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3b62fdaebfe577566ff2387eb1c55344a7f55982
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 18 16:59:43 2017 +1100

    Remove leading underscores from identifiers
    
    In a number of places, dtc and associated tools and test code use
    leading _ characters on identifiers to flag them as "internal", an
    idiom taken from the Linux kernel.  This is a bad idea in a userspace
    program, because identifiers with a leading _ are reserved for the C
    library / system.
    
    In some cases, the extra _ served no real purpose, so simply drop it.  In
    others move to the end of the identifier, which is a convention we're free
    to use for our own purposes.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2d45d1c5c65e9b3cd020fac624ed9bf6c2855a91
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 18 16:55:08 2017 +1100

    Replace FDT_VERSION() with stringify()
    
    The FDT_VERSION() and _FDT_VERSION() macros don't really have anything
    specific to do with the fdt version.  Rather, they're the common CPP
    "stringify" idiom.  Move to util.h and rename to stringify() to
    reflect this.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2e6fe5a107b562ce0c0ba18a9a49dd30c74ae069
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 18 16:45:52 2017 +1100

    Fix some errors in comments
    
    A comment in tests/stringlist.c refers to fdt_get_string(), which is not a
    function that exists.  From the content, it's supposed to be referring to
    fdt_getprop_string().
    
    A comment in libfdt.h has an extraneous space in a function name.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b0ae9e4b0ceb3b9e220bcca0f7434923781ad715
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 26 09:08:29 2017 +0200

    tests: Correct warning in sw_tree1.c
    
    At least some clang versions (correctly) warn that 'size' is used
    unititialized, if sw_tree1 is invoked with argc > 2.  This corrects the
    warning.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c1e55a5513e9bca41dc78a0f20245cc928596a3a
Author: Rob Herring <robh@kernel.org>
Date:   Wed Oct 18 16:29:14 2017 -0500

    checks: fix handling of unresolved phandles for dts plugins
    
    In dts plugins, it is valid to have unresolved phandle values. The
    check_property_phandle_args and check_interrupts_property checks failed to
    account for this resulting in spurious warnings or asserts, respectively.
    Fix this by bailing from the checks if we're checking a dts plugin as
    there is no way to further validate the properties.
    
    Fixes: ee3d26f6960b ("checks: add interrupts property check")
    Fixes: b3bbac02d5e3 ("checks: add phandle with arg property checks")
    Reported-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f8872e29ce06d78d3db71b3ab26a7465fc8a9586
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Oct 6 23:07:30 2017 +1100

    tests: Avoid 64-bit arithmetic in assembler
    
    For testing we (ab)use the assembler to build us a sample dtb, independent
    of the other tools (dtc and libfdt) that we're trying to test.  In a few
    places this uses 64-bit arithmetic to decompose 64-bit constants into
    the individual bytes in the blob.
    
    Unfortunately, it seems that some builds of GNU as don't support >32 bit
    arithmetic, though it's not entirely clear to me which do and which don't
    (Fedora i386 does support 64-bit, Debian arm32 doesn't).
    
    Anyway, to be safe, this avoids 64-bit arithmetic in assembler at the cost
    of some extra awkwardness because we have to define the values in 32-bit
    halves.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 48c91c08bcfa3cdc10284e048b3c0c629bd67adf
Author: Reiner Huober <reiner.huober@nokia.com>
Date:   Thu Sep 14 14:36:07 2017 +0200

    libfdt: add stringlist functions to linker script
    
    The fdt_stringlist_count, fdt_stringslist_search, and fdt_stringlist_get
    are added to the libfdt linker script as global symbols
    
    Signed-off-by: Reiner Huober <reiner.huober@nokia.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b1a60033c1108ceed56e06f1ad3286e90fa77618
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jun 14 17:53:06 2017 +0300

    tests: Add a test for overlays syntactic sugar
    
    Add a single test makeing sure the &foo { }; syntax works.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 737b2df39cc8c5667e66b006618293d13905cf78
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jun 14 17:53:05 2017 +0300

    overlay: Add syntactic sugar version of overlays
    
    For simple overlays that use a single target there exists a
    simpler syntax version.
    
    &foo { }; generates an overlay with a single target at foo.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 497432fd2131967f349e69dc5d259072151cc4b4
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Sep 27 15:04:09 2017 +0200

    checks: Use proper format modifier for size_t
    
    The size of size_t can vary between architectures, so using %ld isn't
    going to work on 32-bit builds. Use the %zu modifier to make sure it is
    always correct.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 22a65c5331c22979d416738eb756b9541672e00d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 27 18:18:15 2017 +1000

    dtc: Bump version to v1.4.5
    
    Preparing for another release.  No particular trigger for this, just a
    number of accumulated enhancements since v1.4.4.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c575d8059fffec268e75dc76e828bee25688d026
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 27 19:54:33 2017 +1000

    Add fdtoverlay to .gitignore
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b6a6f9490d19317200f2b23a5934ed32797734b8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 27 19:44:50 2017 +1000

    fdtoverlay: Sanity check blob size
    
    The fdtoverlay utility reads in the base fdt blob, then expands it to make
    room for all the overlays requested.  However, it uses the totalsize field
    of the base blob without verifying that it actually read all of it in (it's
    possible the blob file could have been truncated).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8c1eb1526d2d02f34bfe6f94dacba60834ae9f79
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 27 18:10:02 2017 +1000

    pylibfdt: Use Python2 explicitly
    
    The pylibfdt code is written for Python2, not Python3.  So, it's safer to
    explicitly request Python2 in our scripts and when checking pkg-config.
    
    On Arch Linux at least, there isn't actually a plain "python" link, just
    "python2" and "python3", so the current setup won't work at all.
    
    According to https://www.python.org/dev/peps/pep-0394/ using "python2"
    should work, and is preferred.
    
    Updating pylibfdt to work with Python3 would be nice, but is a problem for
    another day.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ee3d26f6960bb5922d9a35fe266d9eac74a78ec0
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 1 13:53:03 2017 -0500

    checks: add interrupts property check
    
    Add a check for nodes with interrupts property that they have a valid
    parent, the parent has #interrupt-cells property, and the size is a
    valid multiple of #interrupt-cells.
    
    This may not handle every possible case and doesn't deal with
    translation thru interrupt-map properties, but should be enough for
    modern dts files.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c1e7738988f546aab96a43c47dfbe5ebc4646e80
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 1 13:53:02 2017 -0500

    checks: add gpio binding properties check
    
    The GPIO binding is different compared to other phandle plus args
    properties in that the property name has a variable, optional prefix.
    The format of the property name is [<name>-]gpio{s} where <name> can
    be any legal property string. Therefore, custom matching of property
    names is needed, but the common check_property_phandle_args() function
    can still be used.
    
    It's possible that there are property names matching which are not GPIO
    binding specifiers. There's only been one case found in testing which is
    "[<vendor>,]nr-gpio{s}". This property has been blacklisted and the same
    should be done to any others we find. This check will prevent getting
    any more of these, too.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b3bbac02d5e320c350c460680fc7644735d01e0b
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 1 13:53:01 2017 -0500

    checks: add phandle with arg property checks
    
    Many common bindings follow the same pattern of client properties
    containing a phandle and N arg cells where N is defined in the provider
    with a '#<specifier>-cells' property such as:
    
            intc0: interrupt-controller@0 {
                    #interrupt-cells = <3>;
            };
            intc1: interrupt-controller@1 {
                    #interrupt-cells = <2>;
            };
    
            node {
                    interrupts-extended = <&intc0 1 2 3>, <&intc1 4 5>;
            };
    
    Add checks for properties following this pattern.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fe50bd1ecc1da273a7627a76dcd38da9d77e496f
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Aug 20 06:28:54 2017 -0600

    fdtget: Split out cell list display into a new function
    
    The show_data() function is quite long. Split out the part that loops
    through the values. This makes it easier to add new features.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 62d812308d11f68a22f50e1852c425dac36edf52
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:18:02 2017 -0600

    README: Add a note about test_tree1.dts
    
    Add a little note in the README about something which confused me.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5bed86aee9e82cd8467560a9a39358943aaa4ad9
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:18:01 2017 -0600

    pylibfdt: Add support for fdt_subnode_offset()
    
    Add this into the class to simplify use of this function.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 46f31b65b3b3b1c284027ac6c287c75df64c126d
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:59 2017 -0600

    pylibfdt: Add support for fdt_node_offset_by_phandle()
    
    Add this into the class to simplify use of this function.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a3ae43723687cd9e14e8e6c95c01152887ba94ac
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:58 2017 -0600

    pylibfdt: Add support for fdt_parent_offset()
    
    Add this into the class to simplify use of this function.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a198af80344cb4ffc480dc2673ee2935ea618f1d
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:57 2017 -0600

    pylibfdt: Add support for fdt_get_phandle()
    
    Add this into the class to simplify use of this function.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b9eba92ea50f4444a49eab87942411f1f83df92a
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:56 2017 -0600

    tests: Return a failure code when any tests fail
    
    At present 'make check' succeeds even if some tests fail. Adjust this so
    that we can use things like 'git bisect run make check' to find a failure.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 155faf6cc2097422b647b8e12daf8a673c852121
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:55 2017 -0600

    pylibfdt: Use local pylibfdt module
    
    Some systems may have the Python libfdt.py library installed. Adjust the
    tests to prepend the local libfdt path so that we test the local version
    instead of the system version.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 50e5cd07f325d4eca2d3f495560077b2ca1f30b6
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Aug 19 11:17:54 2017 -0600

    pylibfdt: Add a test for use of uint32_t
    
    Using the libfdt function without going through the Python Fdt class
    requires use of the uint32_t type. Add a test that this works correctly.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ab78860f09f5817d5ad7fe3d55d4dad861b75c24
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Aug 14 13:07:28 2017 -0600

    pylibfdt: Add stdint include to fix uint32_t
    
    Some types used by libfdt.h are not understood the Python module since
    they are defined outside it. An example is an attempt to do this:
    
       import libfdt
       result = libfdt.fdt_node_offset_by_phandle(fdt, phandle)
    
    This results in:
    
    TypeError: in method 'fdt_node_offset_by_phandle', argument 2 of
            type 'uint32_t'
    
    Include the standard integer header file to fix this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 36f511fb1113a8a70defb21b7036882f122aa844
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Mon Jul 31 20:10:08 2017 +0300

    tests: Add stacked overlay tests on fdtoverlay
    
    Add a stacked overlay unit test, piggybacking on fdtoverlay.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1bb00655d3e5d7419af7bded06f1106c08deab4d
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Mon Aug 7 15:26:09 2017 +0300

    fdt: Allow stacked overlays phandle references
    
    This patch enables an overlay to refer to a previous overlay's
    labels by performing a merge of symbol information at application
    time.
    
    In a nutshell it allows an overlay to refer to a symbol that a previous
    overlay has defined. It requires both the base and all the overlays
    to be compiled with the -@ command line switch so that symbol
    information is included.
    
    base.dts
    --------
    
            /dts-v1/;
            / {
                    foo: foonode {
                            foo-property;
                    };
            };
    
            $ dtc -@ -I dts -O dtb -o base.dtb base.dts
    
    bar.dts
    -------
    
            /dts-v1/;
            /plugin/;
            / {
                    fragment@1 {
                            target = <&foo>;
                            __overlay__ {
                                    overlay-1-property;
                                    bar: barnode {
                                            bar-property;
                                    };
                            };
                    };
            };
    
            $ dtc -@ -I dts -O dtb -o bar.dtb bar.dts
    
    baz.dts
    -------
    
            /dts-v1/;
            /plugin/;
            / {
                    fragment@1 {
                            target = <&bar>;
                            __overlay__ {
                                    overlay-2-property;
                                    baz: baznode {
                                            baz-property;
                                    };
                            };
                    };
            };
    
            $ dtc -@ -I dts -O dtb -o baz.dtb baz.dts
    
    Applying the overlays:
    
            $ fdtoverlay -i base.dtb -o target.dtb bar.dtb baz.dtb
    
    Dumping:
    
            $ fdtdump target.dtb
            / {
                foonode {
                    overlay-1-property;
                    foo-property;
                    linux,phandle = <0x00000001>;
                    phandle = <0x00000001>;
                    barnode {
                        overlay-2-property;
                        phandle = <0x00000002>;
                        linux,phandle = <0x00000002>;
                        bar-property;
                        baznode {
                            phandle = <0x00000003>;
                            linux,phandle = <0x00000003>;
                            baz-property;
                        };
                    };
                };
                __symbols__ {
                    baz = "/foonode/barnode/baznode";
                    bar = "/foonode/barnode";
                    foo = "/foonode";
                };
            };
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a33c2247ac8d90d14ed622fa3c23695a82ce264f
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Thu Jul 27 19:33:11 2017 +0300

    Introduce fdt_setprop_placeholder() method
    
    In some cases you need to add a property but the contents of it
    are not known at creation time, merely the extend of it.
    
    This method allows you to create a property of a given size (filled
    with garbage) while a pointer to the property data will be provided.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    [dwg: Corrected commit message]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0016f8c2aa32423f680ec6e94a00f1095b81b5fc
Author: Rob Herring <robh@kernel.org>
Date:   Wed Jul 12 17:20:30 2017 -0500

    dtc: change default phandles to ePAPR style instead of both
    
    Currently, both legacy (linux,phandle) and ePAPR (phandle) properties
    are inserted into dtbs by default. The newer ePAPR style has been
    supported in dtc and Linux kernel for 7 years. That should be a long
    enough transition period. We can save a little space by not putting both
    into the dtb.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e3b9a9588a3515bcce776a37411f64a3ef5194c9
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jun 14 17:51:12 2017 +0300

    tests: fdtoverlay unit test
    
    Add an fdtoverlay unit test. Applies applies overlay(s) and then
    retrieves an inserted property to verify.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 42409146f2db22d71559154fa1233694c964cc14
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jun 14 17:51:11 2017 +0300

    fdtoverlay: A tool that applies overlays
    
    Since libfdt support overlay application on FDT blobs, provide
    a command line tool that applies an arbitrary number of
    overlays, one after another to a base fdt blob and output
    the result in the given file.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aae22722fc8d93d88b40c3621705917d74244ca7
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jun 14 17:50:27 2017 +0300

    manual: Document missing options
    
    The -d and -s options were undocumented. Add an entry in the manual.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 13ce6e1c2fc4549fbb53a9ca5f577166c6e315ac
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 8 14:35:16 2017 +1000

    dtc: fix sprintf() format string error, again
    
    2a42b14 "dtc: check.c fix compile error" changed a format string using
    %lx which wasn't correct for all platforms.  Unfortunately it changed it to
    %zx, which is wrong for a different set of platforms (and only right on
    the others by accident).  The parameter we're formatting here is uint64_t,
    not size_t, so we need to use the PRIx64 macro from <inttypes.h> to get
    this right.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d990b8013889b816ec054c7e07a77db59c56c400
Author: Cufi, Carles <Carles.Cufi@nordicsemi.no>
Date:   Fri May 19 09:06:54 2017 +0000

    Makefile: Fix build on MSYS2 and Cygwin
    
    The host compiler on MSYS2 and Cygwin does not allow the -fPIC option,
    issuing a warning that is treated as an error and stops the build.
    Detect whether we're running under MSYS2 or Cygwin and avoid adding
    -fPIC to prevent the error from happening.
    
    Tested on Linux, MSYS2 and Cygwin.
    
    Signed-off-by: Carles Cufi <carles.cufi@gmail.com>
    [dwg: Added explicit empty CFLAGS for clarity]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 51f56dedf8ea1108edc66150c0bf7e9f76b48daa
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 19 16:11:48 2017 +1000

    Clean up shared library compile/link options
    
    - Allow overriding of shared library compile time flags for platforms whic
      need it
    - Include -fPIC in the link flags variable instead of including it raw
      in the target rule
    - Cosmetic formatting tweaks
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 21a2bc896e3d6ccff22f9224d5e554c198eee04d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed May 17 12:15:26 2017 +1000

    Suppress expected error message in fdtdump test
    
    Since 548aea2 "fdtdump: Discourage use of fdtdump", fdtdump unconditionally
    prints a message discouraging its own use except for debugging purposes.
    This shows up messily in the "make check" output, so suppress it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2a42b14d0d0332a8b24d17dca1b68c154bf4d484
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Tue May 16 10:08:08 2017 -0600

    dtc: check.c fix compile error
    
    Fix the following compile error found on odroid-xu4:
    
    checks.c: In function ‘check_simple_bus_reg’:
    checks.c:876:41: error: format ‘%lx’ expects argument of type
    ‘long unsigned int’, but argument 4 has type
    ‘uint64_t{aka long long unsigned int}’ [-Werror=format=]
      snprintf(unit_addr, sizeof(unit_addr), "%lx", reg);
                                             ^
    checks.c:876:41: error: format ‘%lx’ expects argument of type
    ‘long unsigned int’, but argument 4 has type
    ‘uint64_t {aka long long unsigned int}’ [-Werror=format=]
    cc1: all warnings being treated as errors
    Makefile:304: recipe for target 'checks.o' failed
    make: *** [checks.o] Error 1
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    [dwg: Correct new format to be correct in general]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a10cb3c818d3024caad1efccce1b11947cf316c9
Author: Tim Montague <tmontague@ghs.com>
Date:   Mon Apr 17 16:51:05 2017 -0700

    Fix get_node_by_path string equality check
    
    When determining if to recurse into a node, get_node_by_path does not
    check if the length of each node name is equal.  If searching for
    /foo/baz, this can result in recursing into /foobar because
    strneq("foo", "foobar", 3) is true.
    
    This can result in a reference to /foo/baz to be incorrectly set to
    /foobar/baz.  A test for this was added.
    
    Signed-off-by: Tim Montague <tmontague@ghs.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 548aea2c436ab47ff09ba9ec7e902e971bbc399c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 18 13:05:08 2017 +1000

    fdtdump: Discourage use of fdtdump
    
    fdtdump is, and always has been, a quick-and-dirty debugging tool.  However
    I keep getting reports of people using it for real work.  For production
    decompiling of a dtb, dtc in -I dtb -O dts mode is the right tool. In the
    hopes of getting that message out there, add a warning message to fdtdump
    to discourage its use.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c2258841a785742a3fd5c423f4965caac73d01af
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 18 12:52:08 2017 +1000

    fdtdump: Fix over-zealous version check
    
    It's perfectly valid for a dtb to have version and last compat version set
    to the same value, and that value can be 17 (the latest defined version).
    However, since 0931cea "dtc: fdtdump: check fdt if not in scanning mode"
    fdtdump will refuse to process such a dtb.  We get away with this in many
    cases because dtc's typical output has last compat version equal to 16,
    rather than 17, but it's still a bug.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9067ee4be0e6ac5090c30907da63e24514fd569e
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Apr 8 10:14:42 2017 -0600

    Fix a few whitespace and style nits
    
    These were noticed when synching with U-Boot's downstream tree.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e56f2b07be3866eff49651cbe34be3bce79ceb38
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Apr 7 15:51:34 2017 -0600

    pylibfdt: Use setup.py to build the swig file
    
    Since we are using the standard .i extension for the swig file, we can use
    setup.py to build the wrapper. Drop the existing build code since it is
    not needed.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 896f1c1332650f5370a21c1c507106a87d17fd3d
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Apr 7 15:51:33 2017 -0600

    pylibfdt: Use Makefile constructs to implement NO_PYTHON
    
    The current mechanism uses a shell construct, but it seems better to use
    a Makefile approach.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 90db6d9989ca09ed3c32fbdc646d284ebf9fe1cf
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Apr 7 15:51:32 2017 -0600

    pylibfdt: Allow setup.py to operate stand-alone
    
    At present we require that setup.py is executed from the Makefile, which
    sets up various important things like the list of files to build and the
    version number.
    
    However many installation systems expect to be able to change to the
    directory containing setup.py and run it. This allows them to support (for
    example) building/installing for multiple Python versions, varying
    installation paths, particular C flags, etc.
    
    The problem in implementing this is that we don't want to duplicate the
    information in the Makefile. A common solution (so I am told) is to parse
    the Makefile to obtain the required information.
    
    Update the setup.py script to read a few Makefiles when it does not see
    the required information in its environment. This allows installation
    using:
    
       ./pylibfdt/setup.py install
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e20d9658cd8f1cf2c03e843678cc9e89107e87ad
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Apr 7 15:55:16 2017 +1000

    Add Coverity Scan support
    
    I've recently signed up dtc for Coverity Scan coverage.  This adds magic
    to the .travis.yml file to submit builds to Coverity for analysis.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b04a2cf08862ddac1ff7da40eef58ecb360da941
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Apr 5 10:01:39 2017 -0600

    pylibfdt: Fix code style in setup.py
    
    We should follow PEP8 even for our setup() call.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1c5170d3a466dc96ec67c08f71a570631b404c62
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Apr 5 10:01:38 2017 -0600

    pylibfdt: Rename libfdt.swig to libfdt.i
    
    The .i extension allows Python distutils to automatically handle the swig
    file. Rename it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 580a9f6c288079e952eae6707c267644338f7c7b
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Apr 1 09:31:41 2017 -0600

    Add a libfdt function to write a property placeholder
    
    The existing function to add a new property to a tree being built requires
    that the entire contents of the new property be passed in. For some
    applications it is more convenient to be able to add the property contents
    later, perhaps by reading from a file. This avoids double-buffering of the
    contents.
    
    Add a new function to support this and adjust the existing fdt_property() to
    use it.
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ab15256d8d027fc379438a18a8bd85e7765557c6
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:23 2017 -0600

    pylibfdt: Use the call function to simplify the Makefile
    
    This is in a separate patch since I not sure if GNU make features
    are permitted in the Makefile.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9f2e3a3a1f19b569b9524fa0f4cb4790e23ad983
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:22 2017 -0600

    pylibfdt: Use the correct libfdt version in the module
    
    Use the same version number in the module as with the rest of libfdt. This
    can be examined with:
    
       import pkg_resources
       print pkg_resources.require('libfdt')[0].version
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e91c652af21557698751c3944ceb7c46e5e58164
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:21 2017 -0600

    pylibfdt: Enable installation of Python module
    
    Adjust the setup script to support installation, and call it from the
    Makefile if enabled. It will be disabled if we were unable to build the
    module (e.g. due to swig being missing), or the NO_PYTHON environment
    variable is set.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8a892fd85d94c733bbf184ff6df5d0ad5422be12
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:18 2017 -0600

    pylibfdt: Allow building to be disabled
    
    Some build systems want to build python libraries separately from the
    rest of the build.
    
    Add a NO_PYTHON option to enable this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 741cdff85d3e57fbf9e71eac5c6c1140ae39a97b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 27 16:30:27 2017 +1100

    .travis.yml: Add builds with and without Python library prerequisites
    
    To make sure the Makefile behaves in both cases, make Travis matrix builds
    with and without swig installed.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 14c4171f4f9ad2674249e06c54eb9ce0b533d4b6
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:20 2017 -0600

    pylibfdt: Use package_dir to set the package directory
    
    At present we manually move _libfdt.so into the correct place. Provide a
    package directory so we can avoid needing to do this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 89a5062ab23163a7cc4f6ec3d693e6b6883ac0a1
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:19 2017 -0600

    pylibfdt: Use environment to pass C flags and files
    
    At present setup.py adjusts its command line when running, so that the
    C flags and file list can be passed as arguments. Pass them in environment
    variables instead, so we can avoid this messiness. It also allows us to
    support the 'install' command.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4e0e0d049757b15d53209a9687d9ea33ab3704c5
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 26 13:06:17 2017 -0600

    pylibfdt: Allow pkg-config to be supplied in the environment
    
    Some build systems have their own version of the pkg-config tool.
    Use a variable for this instead of hard-coding it, to allow for this.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Suggested-by: Mike Frysinger <vapier@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6afd7d9688f58436bcc6025180473aa2ec1cdec4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 22 16:34:39 2017 +1100

    Correct typo: s/pylibgfdt/pylibfdt/
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 756ffc4f52f6863ba8bf3a67129271566ba2000c
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 17 16:14:34 2017 -0600

    Build pylibfdt as part of the normal build process
    
    If swig and the Python are available, build pylibfdt automatically.
    Adjust the tests to run Python tests too in this case.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    [dwg: Make error message clearer that missing swig or python-dev isn't
     fatal to the whole build]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8cb3896358e9f70b6f742772734b038ed0d4ea19
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 17 16:14:33 2017 -0600

    Adjust libfdt.h to work with swig
    
    There are a few places where libfdt.h cannot be used as is with swig:
    
    - macros like fdt_totalsize() have to be defined as C declarations
    - fdt_offset_ptr() and fdt_getprop_namelen() need special treatment due to
        a TODO in the wrapper for fdt_getprop(). However they are not useful to
        Python so can be removed
    
    Add #ifdefs to work around these problem.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b40aa8359affa52bd79afe468c26683d6bb41c68
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 17 16:14:32 2017 -0600

    Mention pylibfdt in the documentation
    
    Add a note about pylibfdt in the README.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 12cfb740cc76c9c9fa906fee240dc028da2bddd0
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 17 16:14:31 2017 -0600

    Add tests for pylibfdt
    
    Add a set of tests to cover the functionality in pylibfdt.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 50f2507016315e0b9499dd58876ffc1acf91cc5a
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 17 16:14:30 2017 -0600

    Add an initial Python library for libfdt
    
    Add Python bindings for a bare-bones set of libfdt functions. These allow
    navigating the tree and reading node names and properties.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cdbb2b6c7a3a5aabf6f942f1b5f5b1d997555b07
Author: Rob Herring <robh@kernel.org>
Date:   Mon Mar 20 09:44:18 2017 -0500

    checks: Warn on node name unit-addresses with '0x' or leading 0s
    
    Node name unit-addresses should generally never begin with 0x or leading
    0s. Add warnings to check for these cases, but only for nodes without a
    known bus type as there should be better bus specific checks of the
    unit address in those cases. Any unit addresses that don't follow the
    general rule will need to add a new bus type. There aren't any known
    ones ATM.
    
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4c15d5da17cc966285d1b15bae821fa3599afac8
Author: Rob Herring <robh@kernel.org>
Date:   Mon Mar 20 09:44:17 2017 -0500

    checks: Add bus checks for simple-bus buses
    
    Add checks to identify simple-bus bus types and checks for child
    devices. Simple-bus type is generally identified by "simple-bus"
    compatible string. We also treat the root as a simple-bus, but only for
    child nodes with reg property.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 33c3985226d344662511f999aa1920c112a549da
Author: Rob Herring <robh@kernel.org>
Date:   Mon Mar 20 09:44:16 2017 -0500

    checks: Add bus checks for PCI buses
    
    Add PCI bridge and device node checks. We identify PCI bridges with
    'device_type = "pci"' as only PCI bridges should set that property. For
    bridges, check that node name is pci or pcie, ranges and bus-range are
    present, and #address-cells and #size-cells are correct.
    
    For devices, check the reg property fields are correct for the first
    element (the config address). Check that the unit address is formatted
    corectly based on the reg property. Device unit addresses are in the
    form DD or DD,F where DD is the device 0-0x1f and F is the function 0-7.
    Also, check that the bus number is within the expected range defined by
    bridge's bus-ranges.
    
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Rob Herring <robh@kernel.org>
    [dwg: Added a missing check dependency]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 558cd81bdd432769b59bff01240c44f82cfb1a9d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Mar 10 11:17:23 2017 +1100

    dtc: Bump version to v1.4.4
    
    Preparing for yet another release, due to a build bug in v1.4.3.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c17a811c62ebdcb3ad6e7b5c9a0e0f64d5d64d8b
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Mar 4 14:26:47 2017 +0100

    fdtput: Remove star from value_len documentation
    
    When clang checks the documentation tags (with -Wdocumentation flag), it
    reports the following warning:
    
        fdtput.c:70:11: error: parameter '*value_len' not found in the
        function declaration [-Werror,-Wdocumentation]
         * @param *value_len    Returns length of value encoded
                  ^~~~~~~~~~
        fdtput.c:70:11: note: did you mean 'value_len'?
         * @param *value_len    Returns length of value encoded
                  ^~~~~~~~~~
                  value_len
    
    As this sounds reasonable, remove the star from the documentation tag.
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 194d5caaefcb7a65f492f09f83815e200d20b3df
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Mar 4 14:26:46 2017 +0100

    fdtget: Use @return to document the return value
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d922ecdd017bc4bc81864714b0427b22de594ae5
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Mar 4 14:26:45 2017 +0100

    tests: Make realloc_fdt() really allocate *fdt
    
    This bug has been found by using clang Static Analyzer: it reported that
    the value stored to fdt was never read.
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 921cc17fec295ce46720437cb064d0a6abf298e1
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Mar 4 14:26:44 2017 +0100

    libfdt: overlay: Check the value of the right variable
    
    overlay_update_local_node_references() saves the result of
    fdt_subnode_offset() into variable tree_child but checks for variable
    ret afterwards. As this does not make sense, check tree_child instead of
    ret.
    
    This bug has been found by compiling with clang. The compiler reported
    the following warning:
    
        libfdt/fdt_overlay.c:275:7: error: variable 'ret' may be
        uninitialized when used here
              [-Werror,-Wconditional-uninitialized]
                        if (ret == -FDT_ERR_NOTFOUND)
                            ^~~
        libfdt/fdt_overlay.c:210:9: note: initialize the variable 'ret' to
        silence this
              warning
                int ret;
                       ^
                        = 0
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9ffdf60bf463b7451e0fc8f9c8ec07c14dbd077c
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Mar 4 14:26:43 2017 +0100

    dtc: Simplify asm_emit_string() implementation
    
    Using %.*s format helps making asm_emit_string() not modify its "str"
    parameter.
    
    While at it, constify the "str" parameter of bin_emit_string() and
    asm_emit_string(), as these function no longer modify it.
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 881012e443860c7662a7c53ea38f398d623f820c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 6 12:16:56 2017 +1100

    libfdt: Change names of sparse helper macros
    
    The default libfdt_env.h (for POSIXish userland builds) supports sparse
    checking.  It has a couple of helper macros, __force and __bitwise which
    expand the relevant sparse attributes to enable checking for incorrect
    or missing endian conversions.
    
    Those are bad names: for one, leading underscores are supposed to be
    reserved for the system libraries, and worse, some systems (including
    RHEL7) do define those names already.
    
    So change them to FDT_FORCE and FDT_BITWISE which are far less likely to
    have collisions.
    
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bad5b28049e5e0562a8ad91797fb77953a53fa20
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 6 12:08:53 2017 +1100

    Fix assorted sparse warnings
    
    This fixes a great many sparse warnings on the fdt and libfdt sources.
    These are mostly due to incorrect mixing of endian annotated and native
    integer types.
    
    This includes fixing a couple of quasi-bugs where we had endian conversions
    the wrong way around (this will have the right effect in practice, but is
    certainly conceptually incorrect).
    
    This doesn't make the whole tree sparse clean: there are many warnings in
    bison and lex generated code, and there are a handful of other remaining
    warnings that are (for now) more trouble than they're worth to fix (and
    are not genuine bugs).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 672ac09ea04d998dfddfdef3070a8af8d480182b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 6 12:06:15 2017 +1100

    Clean up gcc attributes
    
    We have a number of explicit __GNUC__ conditionals to tell if we want to
    use some gcc extensions for extra warnings.  This cleans this up to use
    a single conditional, defining convenience macros for those attributes.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 49300f2ade6a6ad9b19957b1fce41fccfe1246a3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 6 12:04:45 2017 +1100

    dtc: Don't abuse struct fdt_reserve_entry
    
    struct fdt_reserve_entry is defined in fdt.h to exactly mirror the
    in-memory layout of a reserve entry in the flattened tree.  Since that is
    always big-endian, it uses fdt64_t elements, which have sparse annotations
    marking them as not native endian.
    
    However, in dtc, we also use struct fdt_reserve_entry inside struct
    reserve_info, and use it with native endian values.  This will cause sparse
    errors.
    
    This stops this abuse, making struct reserve_info have its own native
    endian fields for the same information.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fa8bc7f928ac25f23532afc8beb2073efc8fb063
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Feb 28 16:10:08 2017 +1100

    dtc: Bump version to v1.4.3
    
    Preparing for new release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 34a9886a177f9e22930cec7eccda88df4a9f4838
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Feb 28 10:09:45 2017 +1100

    Add printf format attributes
    
    When compiling with gcc, we already include the attribute on check_msg()
    to give compiler warnings about mismatches between printf() like format
    strings and the corresponding arguments.  This patch adds similar
    attributes for lexical_error() and die().
    
    Suggested-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f72508e2b6ca16016862b937ca1584b282fa637c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 27 10:38:38 2017 +1100

    Correct some broken printf() like format mismatches
    
    Fix two places where a printf()-style format string does not match the
    arguments passed.
    
    Reported-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 397d5ef0203ce4fa59dae5142645d364412dc962
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 24 11:12:50 2017 +1100

    libfdt: Add fdt_setprop_empty()
    
    Device trees can contain empty (zero length) properties, which are often
    used as boolean flags.  These can already be created using fdt_setprop()
    passing a length of zero and a pointer which is ignored.  It is safe to
    pass NULL, but that may not be obvious from the interface.  To make it
    clearer, add an fdt_setprop_empty() helper macro.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 69a1bd6ad3f9272b3db36e6415864a1fb6af4b9d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 24 10:51:05 2017 +1100

    libfdt: Remove undefined behaviour setting empty properties
    
    The standard way of setting an empty property using libfdt is:
        fdt_setprop(fdt, nodeoffset, propname, NULL, 0);
    However, the implementation of this includes an unconditional:
         memcpy(prop->data, NULL, 0);
    Which although it will be a no-op (which is what we want) on many platforms
    is technically undefined behaviour.  Correct this, so that when passing
    a 0 length, passing a NULL pointer as the value to fdt_setprop() is
    definitely safe.  This should quiet static checkers which complain about
    this.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit acd1b534a5924e1fa2b8c941d1931d78ca327e18
Author: Ian Campbell <ijc@hellion.org.uk>
Date:   Fri Feb 3 08:29:39 2017 +0000

    Print output filename as part of warning messages
    
    For example:
    src/arm/at91-ariag25.dtb: Warning (unit_address_vs_reg): Node /memory has a reg or ranges property, but no unit name
    
    If output is to stdout then the prefix is "<stdout>: ".
    
    This helps to direct the developer to where to look when multiple files are
    being compiled in parallel.
    
    Signed-off-by: Ian Campbell <ijc@hellion.org.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 120775eb1cf39f8dcecd695c3ff1cfef8aeb669d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 13 15:57:54 2017 +1100

    dtc: Use streq() in preference to strcmp()
    
    dtc defines a streq() (string equality) macro to avoid the easy confusion
    of the sense of strcmp() comparison for equality.  A few places where we
    don't use it have slipped in, so remove them.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 852e9ecbe1976927057402f8a8f71ee8e8a49098
Author: Rob Herring <robh@kernel.org>
Date:   Fri Feb 10 10:47:15 2017 -0600

    checks: Add Warning for stricter node name character checking
    
    While '#', '?', '.', '+', '*', and '_' are considered valid characters,
    their use is discouraged in recommended practices.
    
    Testing this found a few cases of '.'. The majority of the warnings were
    all from underscores.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ef0e8f061534784e8697c98b5bb67aa4090039bd
Author: Rob Herring <robh@kernel.org>
Date:   Fri Feb 10 10:47:14 2017 -0600

    checks: Add Warning for stricter property name character checking
    
    While '?', '.', '+', '*', and '_' are considered valid characters their
    use is discouraged in recommended practices. '#' is also only
    recommended to be used at the beginning of property names.
    
    Testing this found one typo error with '.' used instead of ','. The
    rest of the warnings were all from underscores.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 00d7bb1f4b0e3578c69c126fa6c50a7897c4524f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 8 17:39:36 2017 +1100

    dtc: pos parameter to srcpos_string() can't be NULL
    
    None of the callers ever pass a NULL to srcpos_string(), so the check
    for it is not necessary.  Furthermore, checking it make Coverity complain
    about the raw dereferences which follow later in the function.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 95d57726bca42fdedf63178a46a15599c02b60cc
Author: Jean-Christophe Dubois <jcd@tribudubois.net>
Date:   Tue Feb 7 22:26:25 2017 +0100

    livetree.c: Fix memory leak
    
    When running coverity on dtc source code the following error is reported.
    
    ==========================================================================
    *** CID 1370967:  Resource leaks  (RESOURCE_LEAK)
    /tools/dtc/livetree.c: 850 in add_fixup_entry()
    844             if (strchr(node->fullpath, ':') || strchr(prop->name, ':'))
    845                     die("arguments should not contain ':'\n");
    846
    847             xasprintf(&entry, "%s:%s:%u",
    848                       node->fullpath, prop->name, m->offset);
    849             append_to_property(fn, m->ref, entry, strlen(entry) + 1);
    >>>     CID 1370967:  Resource leaks  (RESOURCE_LEAK)
    >>>     Variable "entry" going out of scope leaks the storage it points to.
    850     }
    ==========================================================================
    
    Fix the leak.
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3b9c97093d6e1067f4d24d2bff32f3dd24e0751e
Author: Stephen Boyd <stephen.boyd@linaro.org>
Date:   Mon Jan 30 14:06:17 2017 -0800

    dtc: Fix NULL pointer use in dtlabel + dtref case
    
    If we have a construct like this:
    
            label: &handle {
                    ...
            };
    
    Running dtc on it will cause a segfault, because we use 'target'
    when it could be NULL. Move the add_label() call into the if
    statement to fix this potentially bad use of a NULL pointer.
    
    Signed-off-by: Stephen Boyd <stephen.boyd@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 43eb551426ea05186ea07140ad4e277eb253c32c
Author: Stephen Boyd <stephen.boyd@linaro.org>
Date:   Wed Jan 25 11:30:34 2017 -0800

    manual: Fix typo it -> in
    
    Two its in a row can't be right.
    
    Signed-off-by: Stephen Boyd <stephen.boyd@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4baf15f7f13f62fe81f38afe4f871be47b79461a
Author: Stephen Boyd <stephen.boyd@linaro.org>
Date:   Thu Jan 26 10:48:14 2017 -0800

    Makefile: Add tags rule
    
    It's useful to have some tags to jump around sources. We don't
    include test sources in the toplevel Makefile because they
    probably aren't useful to main program development.
    
    Signed-off-by: Stephen Boyd <stephen.boyd@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0931cea3ba20d41013284c20b5a204dca002c058
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Thu Dec 22 00:59:06 2016 +0100

    dtc: fdtdump: check fdt if not in scanning mode
    
    Running fdtdump without scan mode for an invalid file often
    results in a segmentation fault because the fdt header is
    not checked.
    
    With the patch the header is checked both in scanning as
    well as in non-scanning mode.
    
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    [dwg: Removed unnecessary inline, changed type from int to bool]
    Reviewed-by: Simon Glass <sjg@chromium.org>

commit f88865469b65455bdc4ebe7ad8601fafea9b8ef3
Author: Gabriel Smith <ga29smith@gmail.com>
Date:   Sun Dec 11 15:13:16 2016 -0500

    dtc: Fix memory leak in character literal parsing
    
    The data struct used for parsing character literals was never freed
    resulting in a few bytes leaked for every character.
    
    Signed-off-by: Gabriel Smith <ga29smith@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 00fbb8696b665ab138406cc9522793f2096031a0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue May 31 11:58:42 2016 +1000

    Rename boot_info
    
    struct boot_info is named that for historical reasons, and isn't
    particularly meaningful.  Essentially it contains all the information -
    in "live" form from a single dts or dtb file.  As we move towards support
    for dynamic dt overlays, that name will become increasingly bad.
    
    So, in preparation, rename it to dt_info.  At the same time rename the
    'the_boot_info' global to 'parser_output' since that's its actual purpose.
    Unfortunately we do need the global unless we switch to bison's re-entrant
    parser extensions, which would introduce its own complications.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1ef86ad2c24f67567b1021ca5cb84bea82749f88
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 16:23:23 2016 +1100

    dtc: Clean up /dts-v1/ and /plugin/ handling in grammar
    
    First remove the non-terminal name 'versioninfo' - /plugin/ doesn't really
    indicate a "version" per se, and version could be confused with the dtb
    output version.
    
    Second allow the /dts-v1/; /plugin/; sequence to be repeated, for easier
    use of include files - but ensure that all copies match, so you can't
    include a file declaring /plugin/ in one that doesn't, or vice versa.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e3c769aa9c16e7b94051c5eaae6635e79ac19385
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 16:12:30 2016 +1100

    dtc: Don't always generate __symbols__ for plugins
    
    At the moment we generate a __symbols__ node if -@ is specified OR if the
    dts has the /plugin/ tag.  That difference in behaviour from handling base
    trees is unnecessary and slightly confusing.  It also means it's impossible
    to create a plugin without symbols.  Since symbols in a plugin are only
    useful in the case of stacked plugins - and libfdt doesn't even support
    merging plugin symbols as part of overlay application yet - that's a thing
    that might be useful.
    
    So make __symbols__ generation depend only on -@.  We also remove remove
    the testcases that checked explicitly for this not very useful behaviour.
    Instead we don't use -@ for our basic overlay testcase, and check that
    symbols are not generated.
    
    At some point in the future we should add support for symbol merging to
    libfdt and add testcases for stacked overlay application.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c96cb3c0169ed01bef684b49092b5b6cfab5054d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 16:07:39 2016 +1100

    tests: Don't use -@ on plugin de/recompile tests
    
    Using -@ again here obscures what's going on, because at the end we can't
    know which run actually generated the symbols node.  We should just
    generate the symbols on the first run and leave it at that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 66381538ce24d7ca275edaf00303e09b653b3a4b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 16:05:03 2016 +1100

    tests: Remove "suppression of fixups" tests
    
    I think these were for an additional command line option which got dropped
    during development.  At this point all they're testing is that fixups don't
    get generated for a non /plugin/ tree, which is already tested with one of
    the simpler cases previously.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ba765b273f0f89dd0a2ffb74b96f08d117ce2915
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 16:02:46 2016 +1100

    tests: Clarify dtc overlay tests
    
    This changes the names of the testfiles for a number of the testcases of
    the dtc overlay generation functionality to make them shorter and a bit
    cleaerer what's going on.  In addition we move some of the check_path
    sanity checks closer to the dtc commands they verify.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6ea8cd944fcd09dfbda672c6bf6205ec8a5fc152
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 15:56:44 2016 +1100

    tests: More thorough tests of libfdt overlay application without dtc
    
    At the moment we have some rudimentary tests of the fdt_overlay_apply()
    function which don't rely on overlay generation support in dtc.  This is
    done by avoiding any external references in the sample overlay, in
    particularly using the 'target-path' syntax instead of 'target' to avoid
    needing external references in the fragment targets.  Thus this test case
    doesn't exercise libfdt's processing of the __fixups__ node at all.
    
    We do test that somewhat in combination with dtc's overlay support.
    However, in the interests of being able to quickly determine which side a
    bug is on, it would be nice to exercise this without requiring the dtc
    support.
    
    This adds testcases to do so, by making some examples with manually
    constructed __symbols__ and __fixups__ nodes.  In addition we rename some
    of the test data files and add some extra check_path tests to make it a bit
    clearer what's going on here.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7d8ef6e1db9794f72805a0855f4f7f12fadd03d3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 15:17:44 2016 +1100

    tests: Correct fdt handling of overlays without fixups and base trees without symbols
    
    The fdt_overlay_apply() function purports to support the edge cases where
    an overlay has no fixups to be applied, or a base tree which has no
    symbols (the latter can only work if the former is also true).  However it
    gets it wrong in a couple of small ways:
    
      * In the no fixups case, it doesn't fail immediately, but will attempt
        fdt_for_each_property_offset() giving -FDT_ERR_NOTFOUND as the node
        offset, which will fail.  Instead it should succeed immediately, since
        there's nothing to do.
      * In the case of no symbols, it again doesn't fail immediately.  However
        if there is an actual fixup it will fail with an unexpected error,
        because -FDT_ERR_NOTFOUND is passed to fdt_getprop() when attempting to
        look up the symbols.  We should instead return -FDT_ERR_NOTFOUND
        directly.
    
    Both of these errors lead to the code returning misleading error codes in
    failing cases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b4dc0ed8b127a16ca5215a08fd2890768cde646e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 14:45:25 2016 +1100

    tests: Fix double expansion bugs in test code
    
    Two test programs - check_path and overlay - define a CHECK() helper macro
    in such a way that in the case of an error it will re-execute the checked
    code fragment, instead of using the return value from the initial call.
    
    This can lead to misreporting errors, because the code may fail in a
    different way the second time around due to changes made during the first
    failing call.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3ea879dc0c8f86e57cac0ab8768aaa08b00940ea
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 14:19:21 2016 +1100

    tests: Split overlay tests into those with do/don't exercise dtc plugin generation
    
    The various tests for overlay/plugin support are currently lumped together
    in the overlay_tests shell function, which is executed by libfdt_tests.
    
    However, this includes both tests designed primarily to exercise libfdt's
    overlay application, and tests designed to exercise dtc's overlay
    generation.  Split these up for improved clarity.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 47b4d66a2f116208493d37f8232bb55abacd803e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 13:46:02 2016 +1100

    tests: Test auto-alias generation on base tree, not overlay
    
    The current testcases for the -A "auto alias generation" option operate on
    a "plugin" tree.  Although not technically wrong, this is an odd approach,
    since a plugin will almost certainly need the __symbols__ and/or __fixups__
    syntax instead of aliases.  On the other hand -A may be useful simply for
    generating aliases on a tree which is not using the overlay / plugin
    mechanism at all.
    
    Therefore change the tests to operate on a base tree example instead of a
    plugin.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 72e1ad81152372f444133cca3686da1cf436ebbc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 9 13:35:34 2016 +1100

    tests: Make overlay/plugin tests unconditional
    
    When overlay apply supprt was added to libfdt the testcases included some
    which could only be executed with the (then) out of tree dtc with overlay
    output support.  So, the test script automatically skipped those tests if
    it wasn't available.
    
    Now that the overlay support is merged into dtc mainline there's no reason
    to keep this logic.  Instead run all the overlay tests unconditionally.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e7b3c3b5951b606cfbbb3d680cc7566b6d3badbb
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Dec 7 14:48:20 2016 +0200

    tests: Add overlay tests
    
    Add a number of tests for dynamic objects/overlays.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9637e3f772a944d28ab5b039f110763a25665fd6
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Dec 7 14:48:19 2016 +0200

    tests: Add check_path test
    
    Add a test that checks for existence or not of a node.
    It is useful for testing the various cases when generating
    symbols and fixups for dynamic device tree objects.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 20f29d8d41f6d1bd2fbe466aa5676026eb012832
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Dec 7 14:48:18 2016 +0200

    dtc: Plugin and fixup support
    
    This patch enable the generation of symbols & local fixup information
    for trees compiled with the -@ (--symbols) option.
    
    Using this patch labels in the tree and their users emit information
    in __symbols__ and __local_fixups__ nodes.
    
    The __fixups__ node make possible the dynamic resolution of phandle
    references which are present in the plugin tree but lie in the
    tree that are applying the overlay against.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Jan Luebbe <jlu@pengutronix.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a2c92cac53f806e6c1936c1c522a6c24a5ec7199
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Dec 7 14:48:17 2016 +0200

    dtc: Document the dynamic plugin internals
    
    Provides the document explaining the internal mechanics of
    plugins and options.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8f70ac39801d9bb388e2aaebbc9fe9d2a438a151
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Fri Nov 25 14:32:08 2016 +0200

    checks: Pass boot_info instead of root node
    
    As preparation for overlay support we need to pass the boot info
    parameter instead of the root node to each check method.
    
    The root node can be retrieved by accessing boot info's dt member.
    
    No other functional changes are made.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ea10f953878feea45ccdae846dbd3382e79e7f7e
Author: Benjamin Fair <b-fair@ti.com>
Date:   Thu Nov 3 10:47:42 2016 -0500

    libfdt: add missing errors to fdt_strerror()
    
    Some error values were missing from the table which meant that they could
    not be translated by fdt_strerror().
    
    Signed-off-by: Benjamin Fair <b-fair@ti.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit daa75e8fa5942caa8e97931aed3a1ee0b7edd74b
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Oct 17 15:08:24 2016 +0900

    libfdt: fix fdt_stringlist_search()
    
    If fdt_getprop() fails, negative error code should be returned.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e28eff5b787adb3f461d1653598818b2f1f25a73
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Oct 17 15:08:23 2016 +0900

    libfdt: fix fdt_stringlist_count()
    
    If fdt_getprop() fails, negative error code should be returned.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ae97c7722840148b636ac8fde2de3d0a24c04cfc
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Oct 11 16:44:07 2016 +0200

    tests: overlay: Rename the device tree blobs to be more explicit
    
    Rename the blobs to have a more explicit output that will give us a clearer
    idea about whether a DT (and the test) has been compiled using a dtc with
    our without overlays support.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 96162d2bd9cbea74c57a523b3145b8abbfd32c8d
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Oct 11 10:10:33 2016 +0200

    tests: overlay: Add test suffix to the compiled blobs
    
    The compiled blobs in the overlay tests do not have the test suffix which
    is usually used to clean up and ignore the test artifacts.
    
    Let's add that suffix.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5ce8634733b70c2051a2a88fd7255f1a5b1a0903
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Oct 11 10:10:32 2016 +0200

    libfdt: Add fdt_overlay_apply to the exported symbols
    
    fdt_overlay_apply was not usable in the shared library. Export it to allow
    its use.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 804a9db90ad284d2c2e24978d68ca40ec638a15f
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Oct 11 10:10:31 2016 +0200

    fdt: strerr: Remove spurious BADOVERLAY
    
    There's one FDT_ERR_BADOVERLAY too many in the fdt error table.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e8c3a1a493fa96153badd4b8a831edfb96d5bdc7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Oct 6 13:39:59 2016 +0200

    tests: overlay: Move back the bad fixup tests
    
    The bad fixups tests were meant to be usable even for a non-overlay-enabled
    dtc.
    
    Move them out of that check.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7a72d89d3f8112c1f4065d43e636aa572278f42e
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Oct 6 13:39:58 2016 +0200

    libfdt: overlay: Fix symbols and fixups nodes condition
    
    Some base device tree might not have any __symbols__ nodes, since they
    might not have any phandle at all.
    
    Similarly, if an overlay doesn't use any base device tree phandles, its
    __fixups__ node will be empty.
    
    In such cases, we don't want to stop the phandle parsing, but rather just
    ignore the error reported about the missing node.
    
    If it's actually an issue for the overlay we're trying to apply on a given
    base device tree, it will be caught later on, but we cannot make the
    assumption that early in the application process.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cabbaa972cddb193dbe170f3797825a5d4ca66fa
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Oct 6 13:39:57 2016 +0200

    libfdt: overlay: Report a bad overlay for mismatching local fixups
    
    The __local_fixups__ node as a structure that mimics the structure of the
    main overlay part.
    
    This means that if we have a child node somewhere in the local fixups
    sub-tree and if that node is not present in the main tree, the overlay is
    poorly formatted, and we should report it as such.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit deb0a5c1aeaa34130305d765251bbb76e888f4e7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Oct 6 13:39:56 2016 +0200

    libfdt: Add BADPHANDLE error string
    
    The BADPHANDLE error was missing a string, leading to an <unknown error>
    string being returned if you were to call fdt_strerror.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7b7a6be9ba159125a8e11b7ccc86233d17109187
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 6 20:45:14 2016 +1100

    libfdt: Don't use 'index' as a local variable name
    
    Using 'index' as a local variable name shadows the standard library index()
    function.  This causes warnings on at least some compiler versions.  The
    recently added overlay code has a number of instances of this.
    
    This patch replaces 'index' with 'poffset', since 'index' is being used to
    mean "offset within a property value" in these cases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aea8860d831ed05a147a1896c15e1312a9a66917
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Sep 30 15:57:17 2016 +0200

    tests: Add tests cases for the overlay code
    
    Add some test infrastructure to test that the overlay can be merged, but
    also that poorly formatted fixups would fail as expected.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    [dwg: Don't execute bad overlay tests without overlay aware dtc]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0cdd06c5135bd9f46853c2f58ad2ac91b0fa87f3
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Sep 30 15:57:16 2016 +0200

    libfdt: Add overlay application function
    
    The device tree overlays are a good way to deal with user-modifyable
    boards or boards with some kind of an expansion mechanism where we can
    easily plug new board in (like the BBB, the Raspberry Pi or the CHIP).
    
    Add a new function to merge overlays with a base device tree.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 39240cc865cfbd4aecf86e33a72156f7fc043df3
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Sep 30 15:57:15 2016 +0200

    libfdt: Extend the reach of FDT_ERR_BADPHANDLE
    
    So far, the BADPHANDLE error was only used for incorrect phandle values.
    Extend that meaning to an improperly formatted phandle property.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4aa3a6f5e6d92179099d466422c450ebc12e5b1a
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Sep 30 15:57:14 2016 +0200

    libfdt: Add new errors for the overlay code
    
    Add a few new error codes to report the failure conditions we might
    encounter in the overlay application code:
       - FDT_ERR_BADOVERLAY, when an overlay cannot be parsed, even though its
         structure is correct
       - FDT_ERR_NOPHANDLES, when we ran out of available phandles and we
         cannot use a new phandle without either using an invalid one (-1 or
         0), or one already used.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6d1832c9e64bc464d08c62bbd082ba06986476cb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 28 11:29:07 2016 +1000

    dtc: Remove "home page" link
    
    The supposed home page hasn't existed for some time.  We don't really have
    anything else, so remove the link from the README.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 45fd440a956112c78dc3b602e3a618f22f495db2
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon Sep 26 18:12:26 2016 +0200

    Fix some typing errors in libfdt.h and livetree.c
    
    Correct some typos discovered with the codespell utility.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a59be4939c13d907a17b190ee6baa01515300a29
Merge: a34bb72 ec02b34
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Sep 24 11:16:44 2016 +1000

    Merge tag 'v1.4.2'
    
    Fix a mistake where the v1.4.2 release tag wasn't actually merged to master.

commit a34bb721caca10964cb7d22b9d9322b0424c9042
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Sep 22 14:42:42 2016 +1000

    dtc: Fix assorted problems in the testcases for the -a option
    
    We just added the -a option to allow padding of the output dtb's size to
    a specified alignment.  Unfortunately the test cases for this had several
    bugs:
        * Didn't actually test anything since "alignbase" instead of $alignbase
          was passed to the checker function
        * Introduced an unnecessary run_local_test wrapper
        * Didn't provide very helpful output on failure
        * Only attempted to check one alignment value
    
    This patch fixes up these problems.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 874f40588d3eb7e406521117c6e24d5a3376a77e
Author: Tim Wang <timwang@asrmicro.com>
Date:   Mon Jul 18 15:56:53 2016 +0800

    Implement the -a option to pad dtb aligned
    
    There is one condition that need cat the dtb files
    into one dtb.img which can support several boards
    use same SoC platform.
    
    And the original dtb file size is not aligned to any base.
    This may cause "Synchronous Abort" when load from a unligned
    address on some SoC machine, such as ARM.
    
    So this patch implement the -a <aligned number> option to
    pad zero at the end of dtb files and make the dtb size aligned
    to <aligned number>.
    
    Then, the aligned dtbs can cat together and load without "Synchronous
    Abort".
    
    Signed-off-by: Tim Wang <timwang@asrmicro.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ec02b34c05be04f249ffaaca4b666f5246877dea
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Sep 3 21:02:30 2016 +1000

    dtc: Makefile improvements for release uploading
    
    This has some fixes to the make dist target, and a new make kup target for
    maintainer convenience uploading new releases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1ed45d40a137299671b8d0c924e87f9c080899d7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Sep 3 16:28:07 2016 +1000

    dtc: Bump version to 1.4.2
    
    Bump version in preparation for a new release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 36fd7331fb11276c09a6affc0d8cd4977f2fe100
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Aug 22 18:55:49 2016 +0900

    libfdt: simplify fdt_del_mem_rsv()
    
    The variable "err" is unneeded.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d877364e4a0f405ef24df7f4d50065c586207f5b
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Jul 29 11:55:48 2016 +0200

    libfdt: Add fdt_setprop_inplace_namelen_partial
    
    Add a function to modify inplace only a portion of a property..
    
    This is especially useful when the property is an array of values, and you
    want to update one of them without changing the DT size.
    
    Acked-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    [dwg: Remove unnecessary unsigned qualifier, correct a comment]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3e9037aaad44de3008ad77e4549962473ed71c6d
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Wed Jul 27 14:55:56 2016 +0200

    libfdt: Add fdt_getprop_namelen_w
    
    Add a function to retrieve a writeable property only by the first
    characters of its name.
    
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 84e0e1346c68ed85050177c0aef6bc365b77541d
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Wed Jul 27 14:55:55 2016 +0200

    libfdt: Add max phandle retrieval function
    
    Add a function to retrieve the highest phandle in a given device tree.
    
    Acked-by: Simon Glass <sjg@chromium.org>
    Reviewed-by: Stefan Agner <stefan@agner.ch>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d29126c90acb0d705d695b2be07162f38ee48d69
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Wed Jul 27 14:55:54 2016 +0200

    libfdt: Add iterator over properties
    
    Implement a macro based on fdt_first_property_offset and
    fdt_next_property_offset that provides a convenience to iterate over all
    the properties of a given node.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Simon Glass <sjg@chromium.org>
    [dwg: Removed a stray trailing blank line]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 902d0f0953d0074b329a2780a4b637fae0d776da
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Jul 27 14:55:53 2016 +0200

    libfdt: Add a subnodes iterator macro
    
    The fdt_for_each_subnode() iterator macro provided by this patch can be
    used to iterate over a device tree node's subnodes. At each iteration a
    loop variable will be set to the next subnode.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c539075ba8ba61fffbf7e005ce2e834868a9e0ab
Author: Jean-Christophe Dubois <jcd@tribudubois.net>
Date:   Wed Jul 13 00:36:21 2016 +0200

    fdtput.c: Fix memory leak.
    
    CID 132821 (#1 of 1): Resource leak (RESOURCE_LEAK)
    12. leaked_storage: Variable value going out of scope leaks the storage it points to.
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f79ddb83e18505b522700476e546591bae6a9d4f
Author: Jean-Christophe Dubois <jcd@tribudubois.net>
Date:   Wed Jul 13 00:36:08 2016 +0200

    fdtget.c: Fix memory leak
    
    CID 132823 (#1 of 1): Resource leak (RESOURCE_LEAK)
    5. leaked_storage: Variable blob going out of scope leaks the storage it points to.
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1074ee54b63f85603e0fc91614eebda9d7409035
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jul 24 00:50:30 2016 +1000

    convert-dtsv0-lexer.l: fix memory leak
    
    CID 132822 (#1 of 1): Resource leak (RESOURCE_LEAK)
    9. leaked_storage: Variable newname going out of scope leaks the storage it points to
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    [dwg: Removed unnecessary hunk]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e24d39a024e608476ffc896c5d02afa117a54cd7
Author: Jean-Christophe Dubois <jcd@tribudubois.net>
Date:   Wed Jul 13 02:31:13 2016 +0200

    fdtdump.c: make sure size_t argument to memchr is always unsigned.
    
    CID 132817 (#1 of 1): Integer overflowed argument (INTEGER_OVERFLOW)
    15. overflow_sink: Overflowed or truncated value (or a value computed from an overflowed or truncated value) endp - p - 4L used as critical argument to function.
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 44a59713cf0518382cb8fe705f59fd974a1ac030
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jul 13 00:44:53 2016 +1000

    Remove unused srcpos_dump() function
    
    srcpos_dump() has no current users, and I have no plans to use it.  So
    remove it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cb9241ae345378b7193b3d7c9621e8abe657faa6
Author: Jean-Christophe Dubois <jcd@tribudubois.net>
Date:   Mon Jul 11 00:16:52 2016 +0200

    DTC: Fix memory leak on flatname.
    
    If flatname was not referenced by the "node" structure, the reference to the
    allocated string is lost at function exit.
    
    We need to free it if is not used by "node".
    
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1ee0ae24ea0985589364a755d33b0159a8b0eee1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 1 23:57:17 2013 +1100

    Simplify check field and macro names
    
    Now that "node" checks are the only type of checks, simplify some names
    accordingly.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d97527a8621bb6f4a8c18a523ebb05a2a9b3a7e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 27 22:23:45 2013 +1100

    Remove property check functions
    
    Property checking functions aren't particularly useful.  They're used only
    in a handful of cases, and most of those really only check a small handful
    of specific properties.  This patches converts the few cases to node check
    functions and removes property check functions entirely.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2e709d158e11f0adf897d2eb8cd1fd7a145a4c1f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Oct 27 19:18:06 2013 +1100

    Remove tree check functions
    
    The tree check functions from the checking infrastructure aren't very
    useful.  There were only two examples using them, and they're basically
    equivalent to a node check which is applied only to the root node, so those
    are easily replaced.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c4cb12e193e314226991deb468c1b397296dea53
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jun 2 15:23:40 2014 +1000

    Alter grammar to allow multiple /dts-v1/ tags
    
    This patch allows dtc to accept multiple /dts-v1/ tags (provided they're
    all at the beginning of the input), rather than giving a syntax error.
    
    This makes it more convenient to include one .dts file from another without
    having to be careful that the /dts-v1/ tag is in exactly one of them.
    
    We a couple of existing testcases to take advantage of this, which
    simplifies them slightly.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d71d25d76012896521f937bf0c69f27b1a37cdc2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed May 25 15:15:36 2016 +1000

    Use xasprintf() in srcpos
    
    Now that we have an xasprintf() helper function, use it to simplify the
    srcpos_string() implementation.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9dc404958e9c91f33f75450f69b690a5e676af04
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Tue May 24 20:50:35 2016 +0300

    util: Add xasprintf portable asprintf variant
    
    Include a portable asprintf variant that works on any C99
    conforming platform.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit beef80b8b55f32e5d3338ac13429382336e38ead
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 6 20:12:48 2016 -0700

    Correct a missing space in a fdt_header cast
    
    The code style here is slightly incorrect. Fix it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 68d43cec125334f45bda39f819375072d4b4aea4
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 6 20:12:47 2016 -0700

    Correct line lengths in libfdt.h
    
    There are a few lines that are over 80 columns. Fix these.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b0dbceafd49a421c493e2a6ed596a12ad840fc56
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Mar 6 20:12:46 2016 -0700

    Correct space-after-tab in libfdt.h
    
    There are a few places with a space before a tab in this file. Fix them.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 53bf130b1cdd7f6262eedd5e1b224c18bf7f1498
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Feb 12 14:45:12 2016 +0900

    libfdt: simplify fdt_node_check_compatible()
    
    Because fdt_stringlist_contains() returns 1 or 0,
    fdt_node_check_compatible() can just return the inverted value.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c9d9121683b35281239305e15adddfff2b462cf9
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri Feb 19 15:59:29 2016 +1100

    Warn on node name unit-address presence/absence mismatch
    
    ePAPR 1.1 section 2.2.1.1 "Node Name Requirements" specifies that any
    node that has a reg property must include a unit address in its name
    with value matching the first entry in its reg property. Conversely, if
    a node does not have a reg property, the node name must not include a
    unit address. Also allow ranges property as it is deemed valid, but ePAPR
    is not clear about it.
    
    Implement a check for this. The code doesn't validate the format of the
    unit address; ePAPR implies this may vary from (containing bus) binding
    to binding, so doing so would be much more complex.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    [robh: also allow non-empty ranges]
    Signed-off-by: Rob Herring <robh@kernel.org>
    [moved new test in check_table]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2e53f9d2f0a8faab6cec0d78958d52c155f6c6eb
Author: Anton Blanchard <anton@samba.org>
Date:   Sun Jan 3 08:43:35 2016 +1100

    Catch unsigned 32bit overflow when parsing flattened device tree offsets
    
    We have a couple of checks of the form:
    
        if (offset+size > totalsize)
            die();
    
    We need to check that offset+size doesn't overflow, otherwise the check
    will pass, and we may access past totalsize.
    
    Found with AFL.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    [Added a testcase]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b06e55c88b9b922ff7e25cd62a4709b65524f0fc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jan 12 19:27:25 2016 +1100

    Prevent crash on modulo by zero
    
    1937095 "Prevent crash on division by zero" fixed a crash when attempting
    a division by zero using the / operator in a dts.  However, it missed the
    precisely equivalent crash with the % (modulus) operator.  This patch fixes
    the oversight.
    
    Reported-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b43345039b03ac5691961e1ce37dfb8c4c03a863
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jan 4 22:56:39 2016 +1100

    Fix some bugs in processing of line directives
    
    In order to work with preprocessed dts files more easily, dts will parse
    line number information in the form emitted by cpp.
    
    Anton Blanchard (using a fuzzer) reported that including a line number
    directive with a nul character (a literal nul in the input file, not a \0
    sequence) would cause dtc to SEGV.  I spotted several more problems on
    examining the code:
        * It modified yytext in place which seems to work, but is ugly and I'm
          not sure if it's safe on all lex/flex versions
        * The regexp used in the lexer to recognize line number information
          accepts strings with escape characters, but it won't process these
          escapes.
            - GNU cpp at least, will generate \ escapes in line number
              information, at least with files containing " or \ in the name
    
    This patch reworks the handling of line number information to address
    these problems.  \ escapes should now be handled directly.  nuls in file
    names (either with a literal nul in the input file, or with a \0 escape
    sequence) are still not permitted, but will now result in a lexical error
    rather than a SEGV.
    
    Reported-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d728ad59f53e72be21fe9bc419953c94aea798cc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jan 3 23:01:24 2016 +1100

    Fix crash on nul character in string escape sequence
    
    If a dts file contains a string with \ followed by a nul byte - an actual
    nul in the input file, not the \\0 escape - then the assert() in
    get_escape_char() will trip, crashing dtc.
    
    As far as I can tell, there isn't any valid need for this assert(), so just
    remove it.
    
    Reported-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1ab2205a6f0f9e826a623e639da02787d372de37
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jan 3 22:54:37 2016 +1100

    Gracefully handle bad octal literals
    
    The code handling integer literals in dtc-lexer.l assumes that the flex
    regexp means that strtoull() can't fail to interpret the string as a valid
    integer (either decimal, octal, or hexadecimal).  This is not true for
    octals.  For example '09' is accepted as a literal by the regexp,
    strtoull() attempts to handle it as octal, but it has a bad digit.
    
    This changes the code to give a more useful error in this case.
    
    Reported-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 19370955884ff0c49328956227c302225f4a014b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jan 3 22:27:32 2016 +1100

    Prevent crash on division by zero
    
    Currently, attempting to divide by zero in an integer expression in a dts
    file will cause dtc to crash with a division by zero (SIGFPE).
    
    This patch corrects this to properly detect this case and raise an error.
    
    Reported-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d0b3ab0a0f46ac929b4713da46f7fdcd893dd3bd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 17 17:19:11 2015 +1100

    libfdt: Fix undefined behaviour in fdt_offset_ptr()
    
    Using pointer arithmetic to generate a pointer outside a known object is,
    technically, undefined behaviour in C.  Unfortunately, we were using that
    in fdt_offset_ptr() to detect overflows.
    
    To fix this we need to do our bounds / overflow checking on the offsets
    before constructing pointers from them.
    
    Reported-by: David Binderman <dcb314@hotmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d4c7c25c9ed138df8bafbe61097c27c9d2629ee3
Author: Courtney Cavin <courtney.cavin@sonymobile.com>
Date:   Tue Dec 1 16:43:10 2015 -0800

    libfdt: check for potential overrun in _fdt_splice()
    
    This patch catches the conditions where:
     - 'splicepoint' is set to a point outside of [ fdt, fdt_totalsize(fdt) )
     - 'newlen' is negative, or 'splicepoint' plus 'newlen' results in overflow
    
    Either of these cases can be caused by math which overflows in calling
    functions, or by sizes specified through dynamic means.
    
    Signed-off-by: Courtney Cavin <courtney.cavin@sonymobile.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>

commit f58799be130e27cc729cb2d45566daa0bb3b8605
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 1 12:55:21 2015 +1100

    libfdt: Add some missing symbols to version.lds
    
    Several functions in the header file were missing from the version.lds
    script, meaning that they couldn't be used from a libfdt shared library.
    
    Reported by Ken Aaker, via github issue tracker.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit af9f26d1e5f05f524675bb3e9cbb7e36142b6615
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 16 23:45:36 2015 +1100

    Remove duplicated -Werror in dtc Makefile
    
    The "-Werror" compiler flag is currently declared twice in the
    Makefile, one time in WARNINGS, and one time in CFLAGS. Let's
    remove one of them.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    [Moved remaining -Werror from WARNINGS to CFLAGS --dwg]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 604e61e081e3c6c8fa1a8189c71cb3908a5bbc1e
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Sep 29 11:09:08 2015 +0200

    fdt: Add functions to retrieve strings
    
    Given a device tree node, a property name and an index, the new function
    fdt_stringlist_get() will return a pointer to the index'th string in the
    property's value and return its length (or an error code on failure) in
    an output argument.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    [Fix some -Wshadow warnings --dwg]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8702bd1d3b430c16aaa37056cb24b6d984da48f7
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Sep 29 11:09:07 2015 +0200

    fdt: Add a function to get the index of a string
    
    The new fdt_stringlist_search() function will look up a given string in
    the list contained in the value of a named property of a given device
    tree node and return its index.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    [Fix some -Wshadow warnings --dwg]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2218387a8cb9270a688775350a07b02db6d03103
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Sep 30 13:16:12 2015 +1000

    fdt: Add a function to count strings
    
    Given a device tree node and a property name, the fdt_stringlist_count()
    function counts the number of strings found in the property value.
    
    This also adds a new error code, FDT_ERR_BADVALUE, that the function
    returns when it encounters a non-NUL-terminated string list.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    [Changed testcase name --dwg]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 554fde2c77bd73de3f5093df3b643ce1553e1f96
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Aug 27 12:12:42 2015 +0900

    libfdt: fix comment block of fdt_get_property_namelen()
    
    The statement "Identical to fdt_get_property_namelen() ..." does not
    make sense for the comment of fdt_get_property_namelen() itself.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e5e6df7c37f7de13af33a3096e9c66127bb75d15
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 9 13:47:19 2015 +1000

    fdtdump: Fix bug printing bytestrings with negative values
    
    On systems where 'char' is signed, fdtdump will currently print the wrong
    thing on properties containing bytestring values with "negative" bytes
    (that is with values from 0x80..0xff).  The fdtdump testcase is extended
    to cover this case too.
    
    This corrects the problem by forcing use of unsigned char - although this
    is perhaps another indication that fdtdump is a buggy hack and if you want
    to do real work you should use dtc -O dts.
    
    Reported-by: Igor Prusov <Igor.V.Prusov@mcst.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 067829ea5fa9a6d22d4d09fa38ffbef16d21de78
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 9 13:41:21 2015 +1000

    Remove redundant fdtdump test code
    
    The overall test runner script, for the fdtdump tests invokes the helper
    script fdtdump-runtest.sh.  It then includes directly some code very
    similar to fdtdump-runtest.sh, which is never reached due to a "return".
    
    Remove the never-reached test code.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 897a429199da12eb8b071a497ffd02538ada26b5
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 9 13:29:42 2015 +1000

    Move fdt_path_offset alias tests to right tests section
    
    The test script includes several specific tests for the handling of aliases
    in fdt_path_offset().  These are primarily tests of the fdt_path_offset()
    libfdt function itself, although dtc is used to generate a test file for
    convenience.
    
    Move these from the dtc tests section to the libfdt tests section
    accordingly.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2d1417cd9e4d9cb6f8446a3927e612787a56b04a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jul 2 12:36:12 2015 +1000

    Add simple .travis.yml
    
    This adds the .travis.yml file allowing for dtc building and testing in
    the Travis Continuous Integration system.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f6dbc6ca9618391e4f30c415a0a09b7af35f7647
Author: Andre Przywara <osp@andrep.de>
Date:   Wed Jul 1 00:31:28 2015 +0100

    guess output file format
    
    If no output file type is specified via the -O parameter, guess the
    desired file type by looking at the file name extension.
    If that provides no useful hints, assume "dtb" as long as the input
    type is "dts". Any other input type will lead to "dts" being used as
    the guessed output type.
    Any explicit specification of the output type will skip this guessing.
    
    Signed-off-by: Andre Przywara <osp@andrep.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5e78dff4248da3f4efe3a399d66b091b97940ddf
Author: Andre Przywara <osp@andrep.de>
Date:   Wed Jul 1 00:31:27 2015 +0100

    guess input file format based on file content or file name
    
    Always needing to specify the input file format can be quite
    annoying, especially since a dtb is easily detected by its magic.
    Looking at the file name extension sounds useful as a hint, too.
    
    Add heuristic file type guessing of the input file format in case
    none has been specified on the command line.
    The heuristics are as follows (in that order):
    - Any issues with opening the file drop back to the current default
    behaviour.
    - A directory will be treated as the /proc/device-tree type.
    - If the first 4 bytes are the DTB magic, assume "dtb".
    - If no other test succeeded so far, use a file name based
    guessing method: if the filename ends with .dts or .DTS, device tree
    source text is assumed, .dtb or .DTB hint at a device tree blob.
    
    For the majority of practical use cases this gets rid of the tedious
    -I specification on the command line and simplifies actual typing of
    dtc command lines.
    Any explicit specification of the input type by using -I still avoids
    any guessing, which resembles the current behaviour.
    
    Signed-off-by: Andre Przywara <osp@andrep.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8b927bf3b80de4b0a49e6b6e4a56293e9baec364
Author: Mike Frysinger <vapier@chromium.org>
Date:   Sun May 24 21:57:32 2015 -0400

    tests: convert `echo -n` to `printf`
    
    The -n option is not standard in POSIX, so convert to printf which should
    work the same in every shell.
    
    Signed-off-by: Mike Frysinger <vapier@chromium.org>

commit 64c46b098b969502a74c8b0fd97e6f5e4aa07e21
Author: Jack Miller <jack@codezen.org>
Date:   Wed Apr 29 14:02:24 2015 -0500

    Fix crash with poorly defined #size-cells
    
    If you have a parent block with #size-cells improperly set to 0, and
    then subsequently try to include a regs property in the child, dtc will
    crash with SIGFPE while validating it. This patch fixes that crash,
    instead printing the same invalid length warning that was causing it.
    
    Test included.
    
    Signed-off-by: Jack Miller <jack@codezen.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d3649bd3be245c93c9d92024ef4e618179dbad1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 7 14:41:42 2015 +1000

    Add testcases for fdt_path_offset_namelen()
    
    This extends the path_offset testcase to exercise the
    fdt_path_offset_namelen() function.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ecd4f9d125fa58898dd7c4811e854e3d52146d1f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 7 14:25:39 2015 +1000

    Extend path_offset testcase for handling of duplicated separators
    
    Paths with multiple '/' characters in a row (e.g. //somenode//somsubnode),
    or trailing '/' characters (e.g. '/somenode/somesubnode/') should be
    handled by fdt_path_offset(), and treated as equivalent to
    /somenode/somesubnode.
    
    Our current path_offset testcase doesn't check for these cases, so extend
    it so it does.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5fa047f498170496c37a9d5842d3b7eaf3907cca
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Apr 7 14:20:33 2015 +1000

    Use a helper function to clean up path_offset testcase
    
    This introduces a check_path_offset() helper function into the path_offset
    testcase to simplify it.  This will also make extending the test case with
    tests for path_offset_namelen() and some edge cases easier.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b4150b59aef3f2353a64ae27601339a1b42541db
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Fri Mar 6 10:12:38 2015 -0500

    libfdt: Add fdt_path_offset_namelen()
    
    Properties may contain path names which are not NUL-terminated.
    For example, the 'stdout-path' property allows the form 'path:options',
    where the ':' character terminates the path specifier.
    
    Allow these path names to be used in-place for path descending;
    add fdt_path_offset_namelen(), which limits the path name to 'namelen'
    characters.
    
    Reimplement fdt_path_offset() as a trivial wrapper.
    
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>

commit a4b093f7366fdb429ca1781144d3985fa50d0fbb
Author: Julien Grall <julien.grall@linaro.org>
Date:   Tue Mar 17 16:00:34 2015 +0000

    libfdt: Add missing functions to shared library
    
    The commit 4e76ec7 "libfdt: Add fdt_next_subnode() to permit easy
    subnode iteration" adds new functions (fdt_{first,next}_subnode) but
    forgot to mark them as 'global' in the shared library.
    
    Signed-off-by: Julien Grall <julien.grall@linaro.org>

commit 3346e065aacb1f05bdfb3872e3ba709b5f895846
Author: Nikhil Devshatwar <nikhil.nd@ti.com>
Date:   Mon Feb 23 12:29:19 2015 +1100

    dtc: parser: Add label while overriding nodes
    
    This patch changes the dtc grammar to allow following syntax
    
    i2cexp: &i2c2 {
        ...
    };
    
    Current device tree compiler allows to define multiple labels when defining
    the device node the first time. Typically device nodes are defined in
    DTSI files. Now these nodes can be overwritten for updating some of the
    properties. Typically, device nodes are overridden in DTS files.
    
    When working with adapter boards, most of the time adapter board can fit to
    multiple base boards. But depending on which base board it is connected to,
    the devices on the adapter board would be children of different devices.
    
    e.g. On dra7-evm.dts, i2c2 is exported for expansion connector whereas
    on dra72-evm.dts, i2c5 is exported for expansion connector.
    This causes a problem when writing a generic device tree file for
    the adapter board. Because, you cannot know whether all the devices on
    adapter board are present on i2c or i2c5.
    
    The problem can be solved by adding a common label (e.g. i2cexp) in both
    of the DTS files when overriding the device nodes for i2c2 or i2c5.
    This way, generic adapter board file would override the i2cexp. And
    depending on which base board you use the adapter board, all the devices
    are automatically added for correct device nodes.
    
    Signed-off-by: Nikhil Devshatwar <nikhil.nd@ti.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aa719618a8b7c748be659717a9fd003bfa186017
Author: Wang Long <long.wanglong@huawei.com>
Date:   Fri Jan 23 01:25:20 2015 +0000

    fdtput: add delete node and property function
    
    add the delete node and property function for fdtput.
    
    usage:
    1) delete nodes
       fdtput -r <options> <dt file> [<node>...]
    2) delete properties
       fdtput -d <options> <dt file> <node> [<property>...]
    
    Signed-off-by: Wang Long <long.wanglong@huawei.com>

commit 5ef2f7c2fa16320d01b66601f9147a10a38edcee
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Jan 12 12:46:56 2015 +0000

    dtc: Use va_end to match corresponding va_start
    
    Although on some systems va_end is a no-op, it is good practice
    to use va_end, especially since the manual states:
    
    "Each invocation of va_start() must be matched by a corresponding
    invocation of va_end() in the same function."
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>

commit 302fca9f4c283e1994cf0a5a9ce1cf43ca15e6d2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 12 14:29:16 2014 +1100

    dtc: Bump version to 1.4.1
    
    Bump version number in preparation for a release.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 656bd3b6b95f073dc6c6816f0110bb0624792316
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 12 14:27:02 2014 +1100

    dtc: Add maintainer script for signing and upload to kernel.org
    
    This patch adds scripts/kup-dtc which builds a tarball from a specified git
    tag, signs it and uploads to kernel.org with kup.  This is useful only for
    dtc maintainers.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 242c2642709436ceb144f9949868ff54050c70a2
Author: Phil Elwell <phil@raspberrypi.org>
Date:   Fri Oct 17 23:22:11 2014 +0100

    Improve portability
    
    1) Remove the double parentheses around two comparisons in checks.c.
       The OSX LLVM-based C compiler warns about them.
    2) Put an explicit "=" in the TN() macro, in accordance with c99.
    
    Signed-off-by: Phil Elwell <phil@raspberrypi.org>

commit 6a76a9d30c977c6c9cb18cf15ba3bd2c2e89db4c
Author: Wang Long <long.wanglong@huawei.com>
Date:   Thu Sep 25 01:52:53 2014 +0000

    dtc: Delete the unused start condition INCLUDE
    
    The scanners of the latest version of dtc and
    convert-dtsv0 are no longer use start condition
    "INCLUDE". so we should delete it.
    
    Signed-off-by: Wang Long <long.wanglong@huawei.com>

commit 1e5ddb1f39753a37fd60a7b49f858e4fee8cd998
Author: Wang Long <long.wanglong@huawei.com>
Date:   Thu Sep 11 15:16:37 2014 +0800

    dtc: Update the usage helper message
    
    if #define DEFAULT_FDT_VERSION     17
    The message
            Blob version to produce, defaults to %d (for dtb and asm output)
    should be
            Blob version to produce, defaults to 17 (for dtb and asm output)
    
    This patch fix it, and delete the redundant 't'.
    
    Signed-off-by: Wang Long <long.wanglong@huawei.com>

commit 5d4a8b9c4c5145bd509bff20780270e00547c80a
Author: Jack Miller <jack@codezen.org>
Date:   Wed Aug 6 15:52:03 2014 -0500

    Properly handle embedded nul delimited string lists
    
    For example:
    
    reserved-names="res1\0res2\0res3";
    
    Where \0 is an actual embedded NUL in the source instead of a string
    escape. To achieve this, use the len given by the lexer instead of
    strlen.
    
    Without this patch dtc will mangle the output and possibly hang on
    realloc.

commit f9e91a48ba509e77aadcb5349885e1777ef17372
Author: Andrei Errapart <andrei@errapartengineering.com>
Date:   Thu Jun 19 21:07:48 2014 +1000

    Work around MSVC limitations
    
    1) No variadic macros in the form "args..."; this is a GCC extension.
    2) No empty struct initializers. In any case, there is very little to win:
       { } vs. { 0 }.
    
    Signed-off-by: Andrei Errapart <andrei@errapartengineering.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 83e606a64d7b555bea3c3007b48bb9f790f0139c
Author: Andrei Errapart <andrei@errapartengineering.com>
Date:   Thu Jun 19 21:12:27 2014 +1000

    Open binary files in binary mode
    
    The "b" flag to fopen() is generally a no-op on Unix-like systems, but may
    be important on other systems, including Windows.
    
    Signed-off-by: Andrei Errapart <andrei@errapartengineering.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 25a9bd6267bf1a2e144344325a71432193eed4b0
Author: Andrei Errapart <andrei@errapartengineering.com>
Date:   Thu Jun 19 21:05:11 2014 +1000

    Correct write_propval_bytes() for platforms with signed char by default
    
    Some platforms (including the Microsoft C compiler) have char defaulting
    to signed.  write_propval_bytes() in the -O dts code will not behave
    correctly in this case, due to sign extension.
    
    Signed-off-by: Andrei Errapart <andrei@errapartengineering.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fa928fba7e1ce94aef58798e77a9261192fdbb01
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jun 18 22:49:43 2014 +1000

    Fix an off-by-2 error in the source output code
    
    This has been there for ages, but the assertion makes no sense in the
    context of the test immediately preceding it.  This caused an abort()
    when in -I dts -O dts mode with the right sort of internal labels in a
    string property value.
    
    Add a testcase for this and another candidate edge case (though this one
    we already get right).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 76a65b14d1bb10f300f518c11aed231575521c2e
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 18 21:24:32 2014 +1000

    Add a basic test for fdtdump
    
    We can test fdtdump by comparing its output with the source file that was
    compiled by dtc. Add a simple test that should at least catch regressions
    in basic functionality.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c78ca72e1e89714a7a62a85035e5c505c8ba51f0
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 18 01:00:23 2014 -0600

    Tweak code to display cell values
    
    Move the division out of the loop; this seems slightly cleaner.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit dfcfb7f169c361e395e817f33381981c7fdf9539
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Jun 18 01:00:22 2014 -0600

    Correct output from memreserve in fdtdump
    
    This currently displays a hex value without the 0x prefix. Add the prefix
    as dtc requires it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 40f7f576c8e7df395ed25f0f3df61fac85f1adf9
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun May 11 13:13:46 2014 +1000

    libfdt: Add helpers to read #address-cells and #size-cells
    
    This patch makes a small start on libfdt functions which actually help to
    parse the contents of device trees, rather than purely manipulating the
    tree's structure.
    
    We add simple helpers to read and sanity check the #address-cells and
    #size-cells values for a given node.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f240527e54021f82d70d8a09035e575f864c1fbd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 9 20:48:49 2014 +1000

    Fix bug with references to root node
    
    At present, the lexer token for references to a path doesn't permit a
    reference to the root node &{/}.  Fixing the lexer exposes another bug
    handling this case.
    
    This patch fixes both bugs and adds testcases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 55a3a8823d433f2922cce7bf424ee32e241076c4
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Mon Mar 3 10:51:18 2014 +1100

    Update source code location for dtc in manual.txt
    
    The information about the location of the source code of the
    device tree compiler was inaccurate.
    
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9bf20d3896c15bb51456c70eab8a50ba6fd224eb
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Sun Mar 2 21:45:57 2014 +0100

    Remove duplicate assignment
    
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>

commit 8ce36476ae8d2541e9bf3a6c23c345ec03694ee3
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Sun Mar 2 21:39:01 2014 +0100

    Consistently use xrealloc instead of realloc
    
    fdtput.c:
    Replace the remaining call to realloc by xrealloc.
    Some redundant lines in encode_value can be saved.
    
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>

commit 821acd4c171b659a682a1aa05da641246a15d51e
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Sat Mar 1 09:11:47 2014 +0100

    Remove dead code in util.c
    
    xrealloc never returns null
    
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>

commit aba74ddba233e6c4b8e15714a3bde736cceb8b2d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Feb 15 19:47:23 2014 +1100

    Remove references to unused DT_BASE token
    
    Also remove the cbase bison union member that was only used for it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aef4927a70728e106c5fb03395c9b908bd54abce
Author: Grant Likely <grant.likely@linaro.org>
Date:   Tue Feb 11 13:56:32 2014 +0000

    Add a README file for dtc and libfdt
    
    Add a README file to document the location of the mailing list, the home
    page and state who the maintainers are.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

commit 4491ed9f875cbe39aaafa9c875bb3e39121e53e1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 3 12:46:28 2014 -0800

    Makefile: add a make "dist" target
    
    make dist can be used to produce tarballs directly from the git
    repository, which can be useful to automate the release process as well
    as shipping custom releases.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 24cb3d0681d9196d57176a0a94bfc6e610ef7b45
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sat Feb 1 16:41:59 2014 +1100

    dtc: fix some more -Wshadow warnings
    
    Building on a RHEL6 system produced the following -Wshadow warnings in
    fstree.c, util.c and checks.c:
    
    cc1: warnings being treated as errors
    checks.c: In function 'parse_checks_option':
    checks.c:709: error: declaration of 'optarg' shadows a global
    declaration
    /usr/include/getopt.h:59: error: shadowed declaration is here
    make[1]: *** [checks.o] Error 1
    make[1]: *** Waiting for unfinished jobs....
    make[1]: *** Waiting for unfinished jobs....
    cc1: warnings being treated as errors
    fstree.c: In function 'read_fstree':
    fstree.c:40: error: declaration of 'tmpnam' shadows a global
    declaration
    /usr/include/stdio.h:208: error: shadowed declaration is here
    make[1]: *** [fstree.o] Error 1
    cc1: warnings being treated as errors
    util.c: In function 'xstrdup':
    util.c:42: error: declaration of 'dup' shadows a global declaration
    /usr/include/unistd.h:528: error: shadowed declaration is here
    
    Fix all of these -Wshadow warnings by using slightly different variable
    names which won't collide with anything else.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>

commit c231d94e0f620bc25c76415e09f7dea939064bd8
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jan 24 17:19:13 2014 -0800

    Makefile: enable -Wshadow by default
    
    Now that all -Wshadow build warnings/errors are fixed, turn on -Wshadow
    by default to make sure we would catch new potential shadow warnings.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>

commit 3a584d4760cfc81d21039346b0ce1cb5233e1d72
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jan 24 17:19:12 2014 -0800

    libfdt: avoid shadowing "err" in FDT_RW_CHECK_HEADER
    
    FDT_RW_CHECK_HEADER declares an internal variable named "err" which is
    far too generic and will produce the following -Wshadow warnings:
    
    libfdt/fdt_rw.c: In function 'fdt_add_mem_rsv':
    libfdt/fdt_rw.c:177:2: error: declaration of 'err' shadows a previous
    local [-Werror=shadow]
    libfdt/fdt_rw.c:175:6: error: shadowed declaration is here
    [-Werror=shadow]
    libfdt/fdt_rw.c: In function 'fdt_del_mem_rsv':
    libfdt/fdt_rw.c:194:2: error: declaration of 'err' shadows a previous
    local [-Werror=shadow]
    libfdt/fdt_rw.c:192:6: error: shadowed declaration is here
    [-Werror=shadow]
    libfdt/fdt_rw.c: In function 'fdt_set_name':
    ...
    
    Since this variable is only used internally in the macro, rename to
    __err which should be prefixed enough not to cause new shadow warnings.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>

commit 89c9af54816728f56b8da1f2742b4d4db29cf538
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jan 24 17:19:11 2014 -0800

    libfdt: avoid shadowing "err" in FDT_CHECK_HEADER
    
    FDT_CHECK_HEADER declares an internal variable named "err" whose name is
    far too generic and will produce the following -Wshadow warnings:
    
    libfdt/fdt_ro.c: In function 'fdt_node_offset_by_compatible':
    libfdt/fdt_ro.c:555:2: error: declaration of 'err' shadows a previous
    local [-Werror=shadow]
    libfdt/fdt_ro.c:553:14: error: shadowed declaration is here
    [-Werror=shadow]
    cc1: all warnings being treated as errors
    
    Since this variable is only used internally in the macro, rename to
    __err which should be prefixed enough not to cause new shadow warnings.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>

commit 6d889343710e0ecb14f87758608708e08df7c8c1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jan 24 17:19:10 2014 -0800

    dtc: avoid shadowing dirname()
    
    dirname() is declared as a function, and later on try_open() another
    variable dirname is used, which shadows the dirname() function
    declaration and will produce the following warnings/errors with
    -Wshadow turned on:
    
    srcpos.c: In function 'try_open':
    srcpos.c:71:35: error: declaration of 'dirname' shadows a global
    declaration [-Werror=shadow]
    srcpos.c:37:14: error: shadowed declaration is here [-Werror=shadow]
    srcpos.c: In function 'srcfile_add_search_path':
    srcpos.c:183:42: error: declaration of 'dirname' shadows a global
    declaration [-Werror=shadow]
    srcpos.c:37:14: error: shadowed declaration is here [-Werror=shadow]
    cc1: all warnings being treated as errors
    
    Fix this by renaming the function dirname() to get_dirname().
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>

commit fa3f3f0ebd154b0ef22cb83cd8efc50b7bbe181d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jan 3 23:57:39 2014 +1100

    Clean up parser error messages
    
    Generally edit parser error messages for brevity and clarity.  Replace
    the print_error() function with a a new macro for brevity and clarity in
    the source.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c854434dc2e955d2053bccb6c763dcfb75d0842b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jan 3 23:23:23 2014 +1100

    Correct locations in parser error messaes
    
    The print_error() function used in several places in the parser uses the
    location information in yylloc to describe the location of the error.
    This is not correct in most cases.  yylloc gives the location of the
    lookahead token, whereas the error is generally associated with one of
    the already parsed non-terminals.
    
    This patch corrects this, adding a location parameter to print_error() and
    supplying it with the appropriate bison @N symbols.
    
    This probably breaks yacc compatiblity, but too bad - accurate error
    messages are more important.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6a15eb2350426d285130e4c9d84c0bdb6575547a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Jan 4 10:04:19 2014 +1100

    Die on failed /incbin/ seeks
    
    Failing to open an input file, with /include/ or /incbin/ is treated as
    immediately fatal inside srcfile_relative_open().  However, filing to
    seek() to the requested offset in an /incbin/ is not.  This is a bit oddly
    inconsistent, and leaves us with a strange case that's awkward to deal with
    down the line.
    
    So, get rid of it and have failed seeks on an /incbin/ be immediately
    fatal.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cfc6523619c62d3eee505f53e7a18b253742961a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Jan 4 10:03:55 2014 +1100

    Move character literal processing to the lexer
    
    To match the processing of integer literals, character literals are passed
    as a string from lexer to parser then interpreted there.  This is just as
    awkward as it was for integer literals, without the excuse that we used to
    need the information about the dts version to process them correctly.
    
    So, move character literal processing back to the lexer as well, cleaning
    things up.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b82b9776140a077db723f13832afd7e279a45184
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jan 3 20:00:01 2014 +1100

    Move integer literal processing back to the lexer
    
    At the moment integer literals are passed from the lexer to the parser as
    a string, where it's evaluated into an integer by eval_literal().  That
    strange approach happened because we needed to know whether we were
    processing dts-v0 or dts-v1 - only known at the parser level - to know
    how to interpret the literal properly.
    
    dts-v0 support has been gone for some time now, and the base and bits
    parameters to eval_literal() are essentially useless.
    
    So, clean things up by moving the literal interpretation back to the lexer.
    This also introduces a new lexical_error() function to report malformed
    literals and set the treesource_error flag so that they'll cause a parse
    failure at the top level.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0e2d3992258ff4129a8c0f79b660e92994411684
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 1 23:27:31 2014 +1100

    Make srcpos_{v,}error() more widely useful
    
    Allow them to take a prefix argument giving the general type of error,
    which will be useful in future.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0c0bf8519aab878acb864d84185bd2395b1e3d5b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 1 23:23:54 2014 +1100

    Fix memory leak in srcpos_verror()
    
    Since dtc runs are short, we don't care that much about memory leaks.
    Still, leaking the source position string every time we print an error
    messages is pretty nasty.  Fix it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e19d3b1d6da33b78dec83a9064a1e9a570657dd6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 1 23:17:39 2014 +1100

    Fix indentation of srcpos_verror()
    
    Somehow this function ended up with a 7 space indent, instead of the usual
    8 space (1 tab) indent.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a1e6da8aed6b945802f851c8df229a264b6b3524
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 1 23:16:39 2014 +1100

    Fix typo in type of srcpos_verror() et al.
    
    The srcpos_verror() and srcpos_error() functions declare the format
    string as 'char const *' instead of 'const char *'.  Fix it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6efd9065e69ee39c45dc4113b3d212bc2757128a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 1 23:19:35 2014 +1100

    Remove unused srcpos_warn() function
    
    This function has no users, and we can replace it more generally later.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a7ecdb4e751051a31ae8b40333d85c578ce8ea8d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 31 22:34:05 2013 +1100

    Fix valgrind errors in sw_tree1
    
    The sw_tree1 testcase has accumulated some valgrind errors, at least in
    the "realloc" mode.
      * It had both a realloc_fdt() and explicit xmalloc() for the initial
    allocation which was redundant and caused errors.
      * It doesn't make sense to call fdt_resize() until after we've created
    the initial stub tree
      * Alignment gaps inserted into the tree contain uninitialized data, which
    trips an error when we write it out.  We could zero the buffer, but that
    would make it easier to miss real bugs, so we add suppressions for the
    valgrind warnings instead.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit edb10bcf1cd5be7251fc87ed5fc622f620008ceb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 30 22:42:41 2013 +1100

    Add option to run_tests.sh to stop immediately on a failing test
    
    This is a debugging convenience option, which makes it much easier to find
    the failing tests and fix them one by one.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 17119ab0a52df5fb30749d038d796d7e78702e3c
Author: Serge Lamikhov-Center <Serge.Lamikhov@gmail.com>
Date:   Wed Dec 25 15:26:03 2013 +1100

    Pass 'unsigned char' type to isdigit()/isspace()/isprint() functions
    
    The isdigit(), isprint(), etc. functions take an int, whose value is
    required to be in the range of an _unsigned_ char, or EOF.  This, horribly,
    means that systems which have a signed char by default need casts to pass
    a char variable safely to these functions.
    
    We can't do this more nicely by making the variables themselves 'unsigned
    char *' because then we'll get warnings passing them to the strchr() etc.
    functions.
    
    At least the cygwin version of these functions, are designed to generate
    warnings if this isn't done, as explained by this comment from ctype.h:
       These macros are intentionally written in a manner that will trigger
       a gcc -Wall warning if the user mistakenly passes a 'char' instead
       of an int containing an 'unsigned char'.
    
    Signed-off-by: Serge Lamikhov-Center <Serge.Lamikhov@gmail.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 17625371eeea2fa7257361163c52d336a1a98ebc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Oct 28 21:06:53 2013 +1100

    Use stdbool more widely
    
    We already use the C99 bool type from stdbool.h in a few places.  However
    there are many other places we represent boolean values as plain ints.
    This patch changes that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 79eebb23dbf1f6eeff1789cd0d6f1c1fe620a487
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sat Oct 26 00:17:37 2013 +1100

    libfdt: Add function to resize the buffer for a sequential write tree
    
    At present, when using sequential write mode, there's no straightforward
    means of resizing the buffer the fdt is being built into.  This patch
    adds an fdt_resize() function for this purpose.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 883238dc508e721db694277c5273a4c3e9a7132f
Author: Serge Lamikhov-Center <Serge.Lamikhov@gmail.com>
Date:   Mon Sep 30 11:04:26 2013 +0300

    util: Fix out of bounds memory access
    
    The change also fixes numeric values output produced by fdtdump.
    
    Signed-off-by: Serge Lamikhov-Center <Serge.Lamikhov@gmail.com>

commit b290428d711f5a38073ed993a63e6bbf1e6af66d
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Sep 19 22:15:13 2013 +1000

    Ensure all tests have matching reg and unit address
    
    ePAPR 1.1 section 2.2.1.1 "Node Name Requirements" specifies that any
    node that has a reg property must include a unit address in its name
    with value matching the first entry in its reg property. Conversely, if
    a node does not have a reg property, the node name must not include a
    unit address.
    
    Adjust all the dtc test-cases to conform to this rule.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9476db68b6470ec645d2ee61c263e127147f5073
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Aug 15 15:49:24 2013 +1000

    Makefile: provide separate install targets
    
    Currently `make install` will install the binaries, libraries and
    includes.
    
    This change separates the install target into install-bin, install-lib
    and install-includes, so we have more flexibility, particularly when
    we're just using libfdt.
    
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 65cc4d2748a2c2e6f27f1cf39e07a5dbabd80ebf
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sat Jun 22 12:54:28 2013 -0500

    Tag Version 1.4.0
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit a1ee6f068e1c8dbc62873645037a353d7852d5cc
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri May 31 12:33:04 2013 -0600

    dtc: ensure #line directives don't consume data from the next line
    
    Previously, the #line parsing regex ended with ({WS}+[0-9]+)?. The {WS}
    could match line-break characters. If the #line directive did not contain
    the optional flags field at the end, this could cause any integer data on
    the next line to be consumed as part of the #line directive parsing. This
    could cause syntax errors (i.e. #line parsing consuming the leading 0
    from a hex literal 0x1234, leaving x1234 to be parsed as cell data,
    which is a syntax error), or invalid compilation results (i.e. simply
    consuming literal 1234 as part of the #line processing, thus removing it
    from the cell data).
    
    Fix this by replacing {WS} with [ \t] so that it can't match line-breaks.
    
    Convert all instances of {WS}, even though the other instances should be
    irrelevant for any well-formed #line directive. This is done for
    consistency and ultimate safety.
    
    Reported-by: Ian Campbell <Ian.Campbell@citrix.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 2e3fc7e9b3a4722a5500afaa9faf7874c61b2e6a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed May 29 12:46:35 2013 +1000

    Add missing test binary to .gitignore
    
    The subnode_iterate test binary was missing from .gitignore, this fixes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d214655904b49938dafcb83797de3f6a0dc725c8
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Wed May 29 12:47:38 2013 +1000

    fdtput: expand fdt if value does not fit
    
    If you try to insert a new node or extend a property with large value,
    using fdtput you will notice that it always fails.
    
    example:
    fdtput -v -p -ts ./tst.dtb "/node-1" "property-1" "value-1
    Error at 'node-1': FDT_ERR_NOSPACE
    
    or
    
    fdtput -v -c ./tst.dtb "/node-1"
    Error at 'node-1': FDT_ERR_NOSPACE
    
    or
    
    fdtput -v  -ts ./tst.dtb "/node" "property" "very big value"
    Decoding value:
            string: 'very big value'
    Value size 15
    Error at 'property': FDT_ERR_NOSPACE
    
    All these error are returned from libfdt, as the size of the fdt passed
    has no space to accomdate these new properties.
    This patch adds realloc functions in fdtput to allocate new space in fdt
    when it detects a shortage in space for new value or node. With this
    patch, fdtput can insert a new node or property or extend a property
    with new value greater than original size. Also it packs the final blob
    to clean up any extra padding.
    
    Without this patch fdtput tool complains with FDT_ERR_NOSPACE when we
    try to add a node/property or extend the value of a property.
    
    Testcases for the new behaviour added by David Gibson.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a58afe2eb28645641367f4eacdea2c124d291f6e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed May 29 12:44:18 2013 +1000

    Remove some tests for misfeatures
    
    There are a couple of fdtput related tests which are rather pointless -
    they explicitly test for the presence of an undesirable limitation in
    fdtput, which will cause test failures when we fix it.  This patch removes
    the tests.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1c76ec3c090f230fa8a45a5ef84bda600fc4d064
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed May 29 12:39:47 2013 +1000

    Use shorten_echo for wrap_tests
    
    We have certain tests which generate extremely long command lines, which
    are shortened in the testsuite output with the 'shorten_echo' function.
    Currently that is used in run_fdtput_test and run_wrap_test, this patch
    uses it for run_wrap_test as well, allowing more general tests with long
    command lines.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8ec013ae635f36f0a51a21f8b38e3a2669e3b74e
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Mon Apr 15 22:13:17 2013 -0400

    fdtdump: add a debug mode
    
    When hacking raw fdt files, it's useful to know the actual offsets into
    the file each node appears.  Add a --debug mode that includes this.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4ad49c3a9cdaccac02cd448c2704ea52ad85d1dc
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Mon Apr 15 22:13:16 2013 -0400

    util: add common ARRAY_SIZE define
    
    I want to use this in more places, so put it in util.h rather than
    copying & pasting it into another file.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b9e80656f2de441826ed2ff1cd9c5d43b3ae43d3
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Fri May 24 18:04:43 2013 +1000

    util: drop "long" from usage helpers
    
    Now that all utils have converted to the new usage framework, we can
    rename to just plain "usage()" and avoid naming conflicts.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 03449b84c8f9aee2bf2f438bec2c2ec4606bea48
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Fri May 24 18:02:35 2013 +1000

    dtc/fdt{get, put}/convert-dtsv0-lexer: convert to new usage helpers
    
    This helps standardize the flag processing and the usage screens.
    
    Only lightly tested; would be great if someone who uses these utils
    could double check.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fdc7387845420168ee5dd479fbe4391ff93bddab
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Mon Apr 15 22:13:13 2013 -0400

    fdtdump: add a --scan option
    
    Often times, fdts get embedded in other larger files.  Rather than force
    people to `dd` the blob out themselves, make the fdtdump file smarter.
    
    It can now scan the blob looking for the fdt magic.  Once locate, it does
    a little validation on the main struct to make sure we didn't hit random
    binary data.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit be8d1c82cb0a9caeb7e2f804f9a9f845063d7d53
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Mon Apr 15 22:13:12 2013 -0400

    fdtdump: make usage a bit more friendly
    
    This starts a new usage framework and then cuts fdtdump over to it.
    Now we can do `fdtdump -h` and get something useful back.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4e76ec796c90d44d417f82d9db2d67cfe575f8ed
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Apr 26 05:43:31 2013 -0700

    libfdt: Add fdt_next_subnode() to permit easy subnode iteration
    
    Iterating through subnodes with libfdt is a little painful to write as we
    need something like this:
    
    for (depth = 0, count = 0,
            offset = fdt_next_node(fdt, parent_offset, &depth);
         (offset >= 0) && (depth > 0);
         offset = fdt_next_node(fdt, offset, &depth)) {
            if (depth == 1) {
                    /* code body */
            }
    }
    
    Using fdt_next_subnode() we can instead write this, which is shorter and
    easier to get right:
    
    for (offset = fdt_first_subnode(fdt, parent_offset);
         offset >= 0;
         offset = fdt_next_subnode(fdt, offset)) {
            /* code body */
    }
    
    Also, it doesn't require two levels of indentation for the loop body.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit a6d55e039fd22048687fe061b4609e2807efe764
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Mon Apr 8 00:56:54 2013 -0400

    utilfdt_read: pass back up the length of data read
    
    For a follow up commit, we want to be able to scan the buffer that was
    returned to us.  In order to do that safely, we need to know how big
    the buffer actually is, so create a new set of funcs to pass that back.
    
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit 5543b88d5e3047b781552eb431bc2e3bdd9ade06
Author: Jon Loeliger <jdl@jdl.com>
Date:   Mon Apr 22 15:41:41 2013 -0500

    Revert "utilfdt_read: pass back up the length of data read"
    
    This reverts commit cc2c178727cdeca4eb9756637c2e09e50e0856e7.
    It was the wrong version of the patch.

commit 31be4ce7ca550a6fd9c4eb39abdd2f9f5ac8db44
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Wed Apr 10 14:29:09 2013 -0400

    util_version: new helper for displaying version info
    
    This is so all utilities can have this flag and not just dtc.
    
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit 97c122eacc8636b26992cf6e080775f7c28660f9
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Wed Apr 10 14:29:08 2013 -0400

    die: constify format string arg
    
    We only display this string, so there's no need for it to be writable.
    Constify away!
    
    Acked-by: David Gibson <David@gibson.dropbear.id.au>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit cc2c178727cdeca4eb9756637c2e09e50e0856e7
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Wed Apr 10 14:29:07 2013 -0400

    utilfdt_read: pass back up the length of data read
    
    For a follow up commit, we want to be able to scan the buffer that was
    returned to us.  In order to do that safely, we need to know how big
    the buffer actually is, so pass that back if requested.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit f8cb5dd94903a5cfa1609695328b8f1d5557367f
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Wed Apr 10 14:29:06 2013 -0400

    utilfdt_read_err: use xmalloc funcs
    
    We've got these handy helpers, so let's use them.
    
    Acked-by: David Gibson <David@gibson.dropbear.id.au>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit 27cdc1b16f86f970c3c049795d4e71ad531cca3d
Author: Justin Sobota <jsobota@ti.com>
Date:   Fri Feb 15 11:06:10 2013 -0500

    Added license header to dtc/libfdt/fdt.h and libfdt_env.h
    
    This commit adds a license header to fdt.h and libfdt_env.h
    because the license was omitted.
    
    Signed-off-by: Justin Sobota <jsobota@ti.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit cc11e522a3f50ad3ad289d1313cd0bf0ba491e24
Author: François Revol <revol@free.fr>
Date:   Sun Feb 3 00:52:21 2013 +0100

    Fix typo
    
    Signed-off-by: François Revol <revol@free.fr>

commit b7aa300eee001872134345416e73e0f81159798f
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Jan 21 12:59:18 2013 -0800

    Export fdt_stringlist_contains()
    
    This function is useful outside libfdt, so export it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit d59b8078bd79a3ed0cd4bdb9bb92de4475bc1a84
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Jan 21 12:59:17 2013 -0800

    .gitignore: Add rule for *.patch
    
    Ignore any patch files that we find, since these are likely to be
    used when sending patches upstream.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit d20391d6ff45c8fa7281e945491817c35f42b51b
Author: Simon Glass <sjg@chromium.org>
Date:   Mon Jan 21 12:59:16 2013 -0800

    Move property-printing into util
    
    The function that prints a property can be useful to other programs,
    so move it into util.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 8055d77a5be3a4204b3aa5cd73ce5cc03362e193
Author: Simon Glass <sjg@chromium.org>
Date:   Sun Jan 27 11:13:11 2013 -0800

    Adjust util_is_printable_string() comment and fix test
    
    This commit which changed the behaviour of this function broke one
    of the tests. Also the comment should be updated to reflect its new
    behaviour.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 1760e7ca03894689118646e229ca9487158cd0e8
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Dec 11 10:05:51 2012 -0700

    fdtget-runtest.sh: use printf instead of /bin/echo -e
    
    Not all /bin/echo implementations support the -e option. Instead, use
    printf, which appears to be more widely available than /bin/echo -e.
    
    See commit eaec1db "fdtget-runtest.sh: Fix failures when /bin/sh isn't
    bash" for history.
    
    I have tested this on Ubuntu 10.04 with /bin/sh pointing to both dash
    and bash.
    
    Reported-by: Mike Frysinger <vapier@gentoo.org> # and implemented-by
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 19cd5ead0b692c8c10e286252a7f4a725133d8f4
Author: KRONSTORFER Horst <Horst.KRONSTORFER@frequentis.com>
Date:   Tue Dec 11 21:12:14 2012 +0000

    dtc: Drop the '-S is deprecated' warning
    
    The 'deprecated' warning is in there for more than 4 years now
    and nobody seemed to be confused enough to vote it out.  Let's
    drop the warning then.
    
    This reverts commit 315c5d095ebdf29f1912186e76ab9f95e694b18a.
    
    Signed-off-by: Horst Kronstorfer <hkronsto@frequentis.com>

commit 142419e43c99e88cbe72a760a72cdbf520690eb6
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Tue Nov 13 18:34:30 2012 -0600

    dtc/libfdt: sparse fixes
    
    libfdt/fdt.c:104:28: warning: incorrect type in argument 1 (different base types)
    libfdt/fdt.c:104:28:    expected restricted fdt32_t [usertype] x
    libfdt/fdt.c:104:28:    got unsigned int const [unsigned] [usertype] <noident>
    libfdt/fdt.c:124:40: warning: incorrect type in argument 1 (different base types)
    libfdt/fdt.c:124:40:    expected restricted fdt32_t [usertype] x
    libfdt/fdt.c:124:40:    got unsigned int const [unsigned] [usertype] <noident>
    libfdt/fdt_ro.c:337:29: warning: incorrect type in argument 1 (different base types)
    libfdt/fdt_ro.c:337:29:    expected restricted fdt32_t [usertype] x
    libfdt/fdt_ro.c:337:29:    got unsigned int const [unsigned] [usertype] <noident>
    libfdt/fdt_rw.c:370:17: warning: incorrect type in assignment (different base types)
    libfdt/fdt_rw.c:370:17:    expected unsigned int [unsigned] [usertype] <noident>
    libfdt/fdt_rw.c:370:17:    got restricted fdt32_t
    libfdt/fdt_sw.c:164:13: warning: incorrect type in assignment (different base types)
    libfdt/fdt_sw.c:164:13:    expected unsigned int [unsigned] [usertype] <noident>
    libfdt/fdt_sw.c:164:13:    got restricted fdt32_t
    libfdt/fdt_sw.c:227:14: warning: incorrect type in assignment (different base types)
    libfdt/fdt_sw.c:227:14:    expected unsigned int [unsigned] [usertype] <noident>
    libfdt/fdt_sw.c:227:14:    got restricted fdt32_t
    libfdt/fdt_wip.c:80:20: warning: incorrect type in assignment (different base types)
    libfdt/fdt_wip.c:80:20:    expected unsigned int [unsigned] [usertype] <noident>
    libfdt/fdt_wip.c:80:20:    got restricted fdt32_t
    libfdt/libfdt.h:1001:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:1001:13:    expected unsigned long [unsigned] [usertype] val
    libfdt/libfdt.h:1001:13:    got restricted fdt64_t
    libfdt/libfdt.h:1157:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:1157:13:    expected unsigned int [unsigned] [usertype] val
    libfdt/libfdt.h:1157:13:    got restricted fdt32_t
    libfdt/libfdt.h:1192:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:1192:13:    expected unsigned long [unsigned] [usertype] val
    libfdt/libfdt.h:1192:13:    got restricted fdt64_t
    libfdt/libfdt.h:1299:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:1299:13:    expected unsigned int [unsigned] [usertype] val
    libfdt/libfdt.h:1299:13:    got restricted fdt32_t
    libfdt/libfdt.h:1334:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:1334:13:    expected unsigned long [unsigned] [usertype] val
    libfdt/libfdt.h:1334:13:    got restricted fdt64_t
    libfdt/libfdt.h:885:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:885:13:    expected unsigned int [unsigned] [usertype] val
    libfdt/libfdt.h:885:13:    got restricted fdt32_t
    libfdt/libfdt.h:920:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:920:13:    expected unsigned long [unsigned] [usertype] val
    libfdt/libfdt.h:920:13:    got restricted fdt64_t
    libfdt/libfdt.h:996:13: warning: incorrect type in assignment (different base types)
    libfdt/libfdt.h:996:13:    expected unsigned int [unsigned] [usertype] val
    libfdt/libfdt.h:996:13:    got restricted fdt32_t
    
    Signed-off-by: Kim Phillips <kim.phillips@freescale.com>

commit feafcd972cb744750a65728440c99526e6199a6d
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Wed Nov 28 17:33:01 2012 -0600

    dtc/libfdt: introduce fdt types for annotation by endian checkers
    
    Projects such as linux and u-boot run sparse on libfdt.  libfdt
    contains the notion of endianness via usage of endian conversion
    functions such as fdt32_to_cpu.  As such, in order to pass endian
    checks, libfdt has to annotate its fdt variables such that sparse
    can warn when mixing bitwise and regular integers.  This patch adds
    these new fdtXX_t types and, ifdef __CHECKER__ (a symbol sparse
    defines), includes the bitwise annotation.
    
    Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 20b866a7ce1651c4ca3f28cf380df66d9ed35719
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Tue Nov 13 18:34:09 2012 -0600

    dtc/fdtdump: include libfdt_env.h prior to fdt.h
    
    in order to get the upcoming fdt type definitions.
    
    Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 38ad79d33946590c862567c7cbdf25b5a46d8149
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Tue Nov 13 18:34:01 2012 -0600

    dtc/tests: don't include fdt.h prior to libfdt.h
    
    tests will need fdt type definitions provided in a subsequent patch
    to libfdt_env.h.  Since libfdt.h includes libfdt_env.h in the right
    order anyway, just remove the fdt.h include.
    
    Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 1c1efd69545a101d7181fc8e5df2b9a3545a58e8
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Fri Jan 4 21:12:58 2013 +0200

    Fix util_is_printable_string
    
    The method used did not account for multi-part strings.
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 94a4799b200451d4037ec9219023becfe8c45ef1
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Fri Jan 4 21:12:46 2013 +0200

    fdtdump: properly handle multi-string properties
    
    Device tree can store multiple strings in a single property.
    We didn't handle that case properly.
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit e4b497f367a3b2ae99cc52089a14a221b13a76ef
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Tue Oct 16 18:04:20 2012 +1100

    Add documentation on how to submit patches
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 8dec4d86ad3f44ef5011f86394d8f3061a09237a
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Tue Oct 16 17:58:56 2012 +1100

    dtc: srcpos_verror() should print to stderr
    
    Errors should go to stderr.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 1762ab42ef77db7ab2776d0d6cba3515150f518a
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri Oct 5 09:57:41 2012 -0600

    dtc: fix for_each_*() to skip first object if deleted
    
    The previous definition of for_each_*() would always include the very
    first object within the list, irrespective of whether it was marked
    deleted, since the deleted flag was not checked on the first object,
    but only on any "next" object.
    
    Fix for_each_*() to check the deleted flag in the loop body every
    iteration to correct this.
    
    Incidentally, this change is why commit 45013d8 dtc: "Add ability to
    delete nodes and properties" only caused two "make checkm" failures;
    only two tests actually use multiple labels on the same property or
    node. With this current change applied, but commit 317a5d9 "dtc: zero
    out new label objects" reverted, "make checkm" fails 29 times; i.e.
    for every test that uses any labels at all.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit c6fb1d239191daa3323fb6caeff56d48c4777793
Author: Anders Hedlund <anders.hedlund@windriver.com>
Date:   Mon Sep 10 13:50:56 2012 +0200

    libfdt: Added missing functions to shared library
    
    Some API function symbols were set as 'local' causing linking errors,
    now they are set as global (external).
    
    Signed-off-by: Anders Hedlund <anders.hedlund@windriver.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 317a5d92bc357aba2c993ee78b4c089b7539fcc6
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri Sep 28 12:39:22 2012 -0600

    dtc: zero out new label objects
    
    Without this, new->deleted may be left set to some random value, which
    may then cause future label references to fail to locate the label. The
    code that allocates properties and nodes already contains the equivalent
    memset().
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 1b6d1941dc5b589632c254ee6e960404d7cef5f2
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Sep 27 17:11:05 2012 -0600

    dtc: cpp co-existence: add support for #line directives
    
    Line control directives of the following formats are supported:
        #line LINE "FILE"
        # LINE "FILE" [FLAGS]
    
    This allows dtc to consume the output of pre-processors, and to provide
    error messages that refer to the original filename, including taking
    into account any #include directives that the pre-processor may have
    performed.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 1ff3d3f8de701ed107e908030b5c1fed9d17125a
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Sep 27 17:11:04 2012 -0600

    dtc: cpp co-existence: allow names starting with # to be escaped
    
    The device tree language as currently defined conflicts with the C pre-
    processor in one aspect - when a property or node name begins with a #
    character, a pre-processor would attempt to interpret it as a directive,
    fail, and most likely error out.
    
    This change allows a property/node name to be prefixed with \. This
    prevents a pre-processor from seeing # as the first non-whitespace
    character on the line, and hence prevents the conflict. \ was previously
    an illegal character in property/node names, so this change is
    backwards compatible. The \ is stripped from the name during parsing
    by dtc.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 45013d86197fea96810a7ae1b920d22b4c887688
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Aug 7 22:50:15 2012 -0600

    dtc: Add ability to delete nodes and properties
    
    dtc currently allows the contents of properties to be changed, and the
    contents of nodes to be added to. There are situations where removing
    properties or nodes may be useful. This change implements the following
    syntax to do that:
    
        / {
            /delete-property/ propname;
            /delete-node/ nodename;
        };
    
    or:
    
        /delete-node/ &noderef;
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 8716901d2215a314504b7df6282aedfcf89da1ea
Author: Yann E. MORIN <yann.morin.1998@anciens.enib.fr>
Date:   Wed Aug 22 01:48:17 2012 +0200

    dtc/libfdt: install missing header
    
    Previously, only two headers were installed: libfdt.h and fdt.h.
    But libfdt.h also #includes libfdt_env.h, which was not installed.
    
    Install this missing header too.
    
    Signed-off-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit f807af192828222dee7a5c9f94d999673bb4d8a1
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Jul 12 08:52:51 2012 -0700

    fdtput: Add -p option to create subnodes along entire path
    
    This option mimics mkdir's -p option. It automatically creates nodes
    as needed along the path provided. If the node already exists, no
    error is given.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 3553dfac224435233f2c0d33169194098e979c88
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 10 05:56:47 2012 -0700

    fdtput: Adjust report_error() to use name, namelen params
    
    As with many fdt functions, report_error() should permit a namelen to
    be specified, thus obviating the need for nul termination in strings
    passed to it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit d46c2de5700fd8d43de67ca3709c276beba39b39
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Jul 12 08:52:49 2012 -0700

    fdtput: Add -c option to create nodes
    
    This option allows the creation of new nodes in a dtb file. The syntax
    is:
    
       fdtput -c <dtb_file> <node_path>
    
    The node_path contains the path of the node to be created. All path
    components up to the final one must exist already. The final one must
    not exist already.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit f58dff50407c0ee56b372ab201469c18dc042f56
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Jul 12 08:52:48 2012 -0700

    fdtput: Prepare to support multiple operations
    
    We want to add new options to this tool. In preparation for this, add
    the concept of a current operation.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit bb21f0a766056114e4d9336324b4c294f640d9d1
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 10 05:56:44 2012 -0700

    fdtput: Fix nit in help message
    
    There was an extra < in the help message, so fix it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit d5399197e9e0d8bad13de5c41df3b93804c0558a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jul 8 23:25:22 2012 +1000

    Allow toggling of semantic checks
    
    This patch adds -W and -E options to dtc which allow toggling on and off
    of the various built in semantic checks on the tree.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 511dedd40f0372cd7c85e3d4c66553f5829142b7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Sun Jul 8 23:25:21 2012 +1000

    Re-work level setting on checks code
    
    Currently each of the semantic checks in checks.c has a "level" between
    IGNORE and ERROR.  This single level makes it awkward to implement the
    semantics we want for toggling the checks on the command line.
    
    This patch reworks the code to instead have separate boolean flags for
    warning and error.  At present having both flags set will have the same
    effect as having just the error flag set, but this can change in the
    future.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f67dfe845930b32ea14df6ff18d69799828a5909
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Jul 3 14:09:30 2012 -0600

    Add test for re-defining an identical label
    
    When merging one device tree over the top of a previous tree, it is
    possible to define a duplicate label that has the same name and points
    to the same property or node. This is currently allowed by the duplicate
    label checking code. However, alternative duplicate label checking
    algorithms might not allow this. Add an explicit test to ensure this
    capability is maintained.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 942b3c065fb1c8788d2317977945c7283f1db7e2
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Jun 12 14:48:12 2012 -0600

    Fix compilation warning/error in setprop_inplace.c
    
    When compiling the current code-base with gcc 4.6.1, the following warning
    is raised, which is interpreted as an error:
    
    cc1: warnings being treated as errors
    tests/setprop_inplace.c: In function ‘main’:
    tests/setprop_inplace.c:62: error: format ‘%016llx’ expects type ‘long long unsigned int’, but argument 2 has type ‘uint64_t’
    tests/setprop_inplace.c:68: error: format ‘%016llx’ expects type ‘long long unsigned int’, but argument 2 has type ‘uint64_t’
    
    Use printf format specifiers from <inttypes.h> to solve this.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit be6026838e45b67800ac803f4ad8cca3cde57d6d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jun 1 14:12:38 2012 +1000

    libfdt: Add helper function to create a trivial, empty tree
    
    The libfdt read/write functions are now usable enough that it's become a
    moderately common pattern to use them to build and manipulate a device
    tree from scratch.  For example, we do so ourself in our rw_tree1 testcase,
    and qemu is starting to use this model when building device trees for some
    targets such as e500.
    
    However, the read/write functions require some sort of valid tree to begin
    with, so this necessitates either having a trivial canned dtb to begin with
    or, more commonly, creating an empty tree using the serial-write functions
    first.
    
    This patch adds a helper function which uses the serial-write functions to
    create a trivial, empty but complete and valid tree in a supplied buffer,
    ready for manipulation with the read/write functions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cbf1410eab4b7ce7be1b15f985ef71bfc1f5886d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jun 1 14:12:37 2012 +1000

    libfdt: Add helpers for 64-bit integer properties
    
    In device trees in the world, properties consisting of a single 64-bit
    integer are not as common as those consisting of a single 32-bit, cell
    sized integer, but they're common enough that they're worth including
    convenience functions for.
    
    This patch adds helper wrappers of fdt_setprop_inplace(), fdt_setprop() and
    fdt_appendprop() for handling 64-bit integer quantities in properties.  For
    better consistency with the names of these new *_u64() functions we also
    add *_u32() functions as alternative names for the existing *_cell()
    functions handling 32-bit integers.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4adbb5336b0eed99f30c852d9dcf3cd125cae921
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jun 1 14:12:36 2012 +1000

    Remove test_tree1_dts0 testcases
    
    The testcases based on test_tree1_dts0.dts were added purely to test dtc's
    backwards compatibility handling of the old dts-v0 format.  Since that
    support has been removed, the dts has been updated to use the current
    dts-v1 syntax, which makes the testcases pass, but be completely useless.
    
    This patch removes the now obsolete testcases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3ec9cb570333769295774e4fd0e2000d35cf6eda
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Apr 19 09:33:36 2012 -0700

    Add integer expressions files to .gitignore
    
    Several files were added, and should be in .gitignore. The *.test.dts
    pattern should catch future source files which are generated by tests.
    It also subsumes the old *.dtb.test.dts pattern.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 84a94f6ffcab762f44e44cba3409b7bc5fa46a89
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Apr 19 09:33:35 2012 -0700

    dtc: Adjust .gitignore to be in alphabetical order
    
    This is the intent, so correct it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 3cbf82987425f0bfcdd898a24db9647b35ee7351
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Apr 11 16:32:26 2012 -0700

    dtc: Remove spurious output on stderr
    
    Outputing to stderr is best avoided unless there is an error or warning to
    display. At present dtc always displays the name of the file it is compiling
    and the input/output formats. For example:
    
    DTC: dts->dts  on file "-"
    
    This can cause problems in some build systems. For example, U-Boot shows
    build errors for any boards which use dtc at present. It is typically the
    only message output during such a build. The C compiler does not output
    anything in general. The current dtc behaviour makes it difficult to
    provide a silent build in the normal case where nothing went wrong.
    
    Remove the message entirely.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 37b167f68afa21fbecb3077839f9c037a1459701
Author: Bert Kenward <bert.kenward@broadcom.com>
Date:   Tue Apr 10 08:00:15 2012 -0700

    Remove invalid macro starting with _ from libfdt_env.h
    
    libfdt_env.h in the device tree compiler currently defines a _B() macro. This is in the
    namespace reserved for the implementation, and Cygwin's ctype.h actually defines a macro
    with this name. This renames _B to EXTRACT_BYTE.
    
    Signed-off-by: Bert Kenward <bert.kenward@broadcom.com>

commit 5f0c3b2d6235dec65fff1628a97f45e21680b36d
Author: Stephen Warren <swarren@wwwdotorg.org>
Date:   Tue Apr 3 20:56:00 2012 -0600

    dtc: Basic integer expressions
    
    Written by David Gibson <david@gibson.dropbear.id.au>. Additions by me:
    * Ported to ToT dtc.
    * Renamed cell to integer throughout.
    * Implemented value range checks.
    * Allow U/L/UL/LL/ULL suffix on literals.
    * Enabled the commented test.
    
    Signed-off-by: Stephen Warren <swarren@wwwdotorg.org>

commit eaec1dbc5946d5fd01a9ef7120f8461c74d759a0
Author: Stephen Warren <swarren@wwwdotorg.org>
Date:   Tue Mar 20 20:23:46 2012 -0600

    fdtget-runtest.sh: Fix failures when /bin/sh isn't bash
    
    On Ubuntu, /bin/sh is dash (at least by default), and dash's echo doesn't
    accept the -e option. This means that fdtget-runtest.sh's EXPECT file will
    contain "-e foo" rather than just "foo", which causes a test failure.
    
    To work around this, run /bin/echo instead of (builtin) echo, which has
    more chance of supporting the -e option.
    
    Another possible fix is to change all the #! lines to /bin/bash rather
    than /bin/sh, and change run_tests.sh to invoke sub-scripts using $SHELL
    instead of just "sh". However, that would require bash specifically, which
    may not be desirable.
    
    Signed-off-by: Stephen Warren <swarren@wwwdotorg.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit de6b76240e91b9288cdce63ab81e51a7232d0927
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Mar 14 20:04:13 2012 -0700

    dtc: Add -i option to support search paths
    
    It is often inconvenient to place device tree files in the same directory
    as their includes, or to specify the full path to include files.
    
    An example of this is in U-Boot where we have a .dtsi file for each SOC
    type, and this is included by the board .dts file. We need to either use
    a mechanism like:
    
    /include/ ARCH_CPU_DTS
    
    with sed or cpp to perform the replacement with the correct path, or
    we must specify the full path in the file:
    
    /include/ "../../arch/arm/dts/tegra20.dtsi"
    
    The first option is not desirable since it requires anyone compiling the
    file to first pre-process it. The second is not desirable since it
    introduces a path which is project-specific into a file which is supposed
    to be a hardware description. For example Linux and U-Boot are unlikely to
    put these include files in the same place.
    
    It is much more convenient to specify the search patch on the command line
    as is done with C pre-processors, for example.
    
    Introduce a -i option to add to the list of search paths used to find
    source and include files.
    
    We cannot use -I as it is already in use. Other suggestions welcome.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 7fcbef275741793064268cf0a1bdcd59144a9a10
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Mar 6 16:41:47 2012 -0800

    fdtget: Add -d to provide a default value
    
    Sometimes the requested node or property is not present in the device
    tree. This option provides a way of reporting a default value in this
    case, rather than halting with an error.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 16c99ee8e3e60fb47b5eaa1778996fe6ef11c611
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Mar 6 16:41:46 2012 -0800

    fdtget: Add -l to list the subnodes of a node
    
    This option lists the subnodes of each node given as a parameter, one
    subnode per line.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 30eb201adae2132c36874c89d4c6cf3195659d71
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 2 17:12:08 2012 -0800

    fdtget: Add -p to list the properties of a node
    
    This option lists the properties of each node given as a parameter, one
    property per line.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 097ec97c1a35685957210adb93692c3e210bc82c
Author: Simon Glass <sjg@chromium.org>
Date:   Fri Mar 2 17:12:07 2012 -0800

    fdtget: Fix multiple arg bug and add test for it
    
    There is a rather unfortunate bug in fdtget in that if multiple argument
    sets are provided, it just repeats displaying the first set ones for
    each set.
    
    Fix this bug and add a test for it.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit a6e6c60e3a97a6b3a033cd052bb3740fd53cbf4c
Author: Horst Kronstorfer <hkronsto@frequentis.com>
Date:   Tue Feb 7 10:02:53 2012 +0100

    dtc: Fix zero-length input segfault
    
    This patch fixes a segmentation fault caused by dereferencing a NULL
    pointer (pos->file aka yylloc.file) in srcpos_string when the input
    length is 0 (fe 'dtc </dev/null'.) Reason: yylloc.file is initialized
    with 0 and the tokenizer, which updates yylloc.file via srcpos_update
    doesn't get a chance to run on zero-length input.
    
    Signed-off-by: Horst Kronstorfer <hkronsto@frequentis.com>

commit e280442e08fcbe8431dc85d836ff3ecc489932fb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 17:06:12 2012 +1100

    Fix uninitialized access bug in utilfdt_decode_type
    
    I just found this little bug with valgrind.  strchr() will return true
    if the given character is '\0'.  This meant that utilfdt_decode_type()
    could take a path which accesses uninitialized data when given the
    (invalid) format string "L".
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0b3b46e019f546a24927bb7ca009670762c00107
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:09 2012 +1100

    Generate test data for fdtput more sensibly
    
    Currently run_tests.sh generates several files of text test data.  The
    procedure it uses for this is somewhat torturous and has several problems:
     * Since the test data is derived from a dts file, a cursory glance at the
    test output suggests something is wrong with the processing of that dts.
    This is misleading since in fact it's just being used as an arbirary
    string.
     * Since the base input has linefeeds removed, the head and sort commands
    used later have no effect.
     * Although an attempt is made to get rid of characters which the shell
    will mangle, it's not thorough enough.  Specifically it leaves in \ which
    means that some string escapes found in the input data can get expanded
    somewhere along the line in some shells.
    
    This patch, therefore, replaces this generation of test data with a
    pre-canned "Lorem ipsum" of approximately 2k.  On my system, where /bin/sh
    is dash, this fixes a test failure due to the aforementioned string
    escapes being evaluated on one but not the other of the two comparison
    paths (I haven't tracked down exactly where the expansion is happening).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c34e88354a07099dbc15a41621c81f71325d25fd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:08 2012 +1100

    Don't use diff to check fdt{get,put} results
    
    Currently the fdt{get,put}-runtest.sh scripts invoke diff to check if
    fdt{get,put} did the right thing.  This isn't great though: it's not
    obvious from the diff output which is the expected and which is the
    actual result; diff's line by line behaviour is useless here, since all
    the results are a single line and finally, when there is a difference
    it always prints information even when the tests are supposed to be
    running in quiet mode.
    
    This patch uses cmp instead, and explicitly prints the expected results,
    when running in verbose mode (the invocation of fdtget itself will have
    already displayed the actual results in this mode.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 15b23d21a62b5a0295ee08b54d0842889ce94c92
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:07 2012 +1100

    Clean up invocation of fdt{get,put} tests
    
    This patch cleans up how the fdtget and fdtput tests are invoked.
    Specifically we no longer hide the full command lines with a wrapper
    function - this makes it possible to distinguish fdtget from similar
    fdtput tests and makes it easier to work out how to manually invoke an
    individual failing test.
    
    In addition, we remove the testing for errors from the
    fdt{get,put}-runtest.sh script, instead using an internal wrapper
    analagous to run_wrap_test which can test for any program invocation
    that's expected to return an error.
    
    For a couple of the fdtput tests this would result in printing out
    ludicrously large command lines.  Therefore we introduce a new
    mechanism to cut those down to something reasonable.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c879a8a28b168b3b448ca8a107e3386eda6829c7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:06 2012 +1100

    Factor signal checks out of test scripts
    
    Several test scripts now have some code to check for a program returning
    a signal, and reporting a suitable failure.  This patch moves this
    duplicated code into a helper function in tests.sh.  At the same time we
    remove a bashism found in the current copies (using the non portablr $[ ]
    construct for arithmetic).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a90b5b149197a8b38bd569c6a8abc9fc0363fa4b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:05 2012 +1100

    Remove bashism from run_tests.sh
    
    The patches introducing fdtget and fdtput inserted a peculiar bashism to
    run_tests.sh using non-portable assignment within an (( )) expression.
    This patch fixes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2ca83614e78f32e68202100e94668b0bb62f1ba6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:04 2012 +1100

    Use 'trap' builtin to clean up temporaries in test scripts
    
    Some of the test scripts create temporary files, which we remove at the
    end.  Except that we usually forgot to remove them on some exit paths. To
    avoid this problem in future, this modifies the scripts to use the shell's
    trap 0 functionality to automatically remove the temporaries on any exit.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9a50d82c4e3a44ca004ada288f7c37004da0b0cc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:03 2012 +1100

    Remove unused variable from test scripts
    
    Several of the test scripts remove $TMPFILE, without ever having set
    the TMPFILE variable. This patch fixes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 53d6ca639d1e95d0d62e84b25f3d22d721d1f4a3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:02 2012 +1100

    Trivial style fixup
    
    Having braces on an if branch but not the else branch, or vice
    versa is ugly and can trick you when reading the code.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9cf26ffa4a9dfa477971f989dcd7392bedbaaaed
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:01 2012 +1100

    Add quilt files to .gitignore
    
    For the benefit of quilt users (such as myself, sometimes) have git
    ignore the quilt control and patches files.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 81f11f4f109cc16e1ec31a85c222a1caabea5654
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 3 16:12:00 2012 +1100

    Update .gitignore for tests
    
    We've add some test (generated) binaries that aren't currently listed in
    .gitignore, in addition more scripts now generate various tmp.* files
    during operation.  This adds them all to .gitignore.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1456da7e2d3054882b20c120d817096bea21571e
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sat Jan 21 15:24:51 2012 -0600

    Introduce ${TESTS_BIN} in Makefiles to identify tested executables.

commit 1ede50c3559bbfca79fadcbfd8acb9388f4aac87
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Jan 21 10:14:48 2012 -0800

    Add fdtput utility to write property values to a device tree
    
    This simple utility allows writing of values into a device tree from the
    command line. It aimes to be the opposite of fdtget.
    
    What is it for:
    - Updating fdt values when a binary blob already exists
       (even though source may be available it might be easier to use this
        utility rather than sed, etc.)
    - Writing machine-specific fdt values within a build system
    
    To use it, specify the fdt binary file on command line followed by the node
    and property to set. Then, provide a list of values to put into that
    property. Often there will be just one, but fdtput also supports arrays and
    string lists.
    
    fdtput does not try to guess the type of the property based on looking at
    the arguments. Instead it always assumes that an integer is provided. To
    indicate that you want to write a string, use -ts. You can also provide
    hex values with -tx.
    
    The command line arguments are joined together into a single value. For
    strings, a nul terminator is placed between each string when it is packed
    into the property. To avoid this, pass the string as a single argument.
    
    Usage:
            fdtput <options> <dt file> <<node> <property> [<value>...]
    Options:
            -t <type>       Type of data
            -v              Verbose: display each value decoded from command line
            -h              Print this help
    
    <type>  s=string, i=int, u=unsigned, x=hex
            Optional modifier prefix:
                    hh or b=byte, h=2 byte, l=4 byte (default)
    
    To read from stdin and write to stdout, use - as the file. So you can do:
    
    cat somefile.dtb | fdtput -ts - /node prop "My string value" > newfile.dtb
    
    This commit also adds basic tests to verify the major features.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 68d057f20d7c3a93b441d2892c4749392bc83b45
Author: Simon Glass <sjg@chromium.org>
Date:   Sat Jan 21 10:14:47 2012 -0800

    Add fdtget utility to read property values from a device tree
    
    This simply utility makes it easy for scripts to read values from the device
    tree. It is written in C and uses the same libfdt as the rest of the dtc
    package.
    
    What is it for:
    - Reading fdt values from scripts
    - Extracting fdt information within build systems
    - Looking at particular values without having to dump the entire tree
    
    To use it, specify the fdt binary file on command line followed by a list of
    node, property pairs. The utility then looks up each node, finds the property
    and displays the value.
    
    Each value is printed on a new line.
    
    fdtget tries to guess the type of each property based on its contents. This
    is not always reliable, so you can use the -t option to force fdtget to decode
    the value as a string, or byte, etc.
    
    To read from stdin, use - as the file.
    
    Usage:
            fdtget <options> <dt file> [<node> <property>]...
    Options:
            -t <type>       Type of data
            -h              Print this help
    
    <type>  s=string, i=int, u=unsigned, x=hex
            Optional modifier prefix:
                    hh or b=byte, h=2 byte, l=4 byte (default)
    
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit 69df9f0de25db1c37970850115cdf48335d41802
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Jan 12 11:31:00 2012 -0700

    dtc: Implement -d option to write out a dependency file
    
    This will allow callers to rebuild .dtb files when any of the /include/d
    .dtsi files are modified, not just the top-level .dts file.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 97b909f852039daaae267a66f5df2c90ed05b586
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 11 23:41:32 2012 +1100

    libfdt: Activate testcase for appending properties
    
    Commit a31e3ef83bfce62d07695355e5f06cd4d0e44b86 introduced new libfdt
    functions to append to existing properties.  It also included a test case
    for this, but neglected to update the Makefile and run_tests.sh script
    to actually build and execute this testcase.
    
    This patch corrects the oversight.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a31e3ef83bfce62d07695355e5f06cd4d0e44b86
Author: Minghuan Lian <Minghuan.Lian@freescale.com>
Date:   Mon Dec 5 12:22:07 2011 +1100

    libfdt: Add support for appending the values to a existing property
    
    Some properties may contain multiple values, these values may need
    to be added to the property respectively. this patch provides this
    functionality. The main purpose of fdt_append_prop() is to append
    the values to a existing property, or create a new property if it
    dose not exist.
    
    Signed-off-by: Minghuan Lian <Minghuan.Lian@freescale.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8f459c5d72673e1a3a119ac58a7eee56236fca73
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Tue Oct 25 17:29:24 2011 -0400

    fdtdump: rename from ftdump
    
    The freetype package already installs a binary named "ftdump", so the dtc
    package conflicts with that.  So rename the newer dtc tool to "fdtdump".
    This even makes a bit more sense:
            ftdump: [F]lat device [T]ree [dump]
            fdtdump: [F]lat [D]evice [T]ree [dump]
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 033089f29099bdfd5c2d6986cdb9fd07b16cfde0
Author: Anton Staaf <robotboy@chromium.org>
Date:   Tue Oct 11 10:22:29 2011 -0700

    dtc: Add support for variable sized elements
    
    Elements of size 8, 16, 32, and 64 bits are supported.  The new
    /bits/ syntax was selected so as to not pollute the reserved
    keyword space with uint8/uint16/... type names.
    
    With this patch the following property assignment:
    
        property = /bits/ 16 <0x1234 0x5678 0x0 0xffff>;
    
    is equivalent to:
    
        property = <0x12345678 0x0000ffff>;
    
    It is now also possible to directly specify a 64 bit literal in a
    cell list, also known as an array using:
    
        property = /bits/ 64 <0xdeadbeef00000000>;
    
    It is an error to attempt to store a literal into an element that is
    too small to hold the literal, and the compiler will generate an
    error when it detects this.  For instance:
    
        property = /bits/ 8 <256>;
    
    Will fail to compile.  It is also an error to attempt to place a
    reference in a non 32-bit element.
    
    The documentation has been changed to reflect that the cell list
    is now an array of elements that can be of sizes other than the
    default 32-bit cell size.
    
    The sized_cells test tests the creation and access of 8, 16, 32,
    and 64-bit sized elements.  It also tests that the creation of two
    properties, one with 16 bit elements and one with 32 bit elements
    result in the same property contents.
    
    Signed-off-by: Anton Staaf <robotboy@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit a4b515c03804dbc0eff5bbf281bd22438717e773
Author: Anton Staaf <robotboy@chromium.org>
Date:   Tue Oct 11 10:22:28 2011 -0700

    dtc: Add data_append_integer function
    
    This function deals with appending integers of various sizes (8, 16
    32, and 64 bit currently).  It handles endianess conversions.  If the
    integer will not fit in the requested number of bits of storage it
    will have it's high bits ignored.
    
    This patch also rewrites data_append_cell and data_append_addr to use
    data_append_integer.
    
    Signed-off-by: Anton Staaf <robotboy@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 2cd4c8d27d6b5ea83723754da4eba5d51aa71b95
Author: Anton Staaf <robotboy@chromium.org>
Date:   Tue Oct 11 10:22:27 2011 -0700

    libfdt: Add fdt16_to_cpu utility function
    
    This utility routine will be used in the variable size cell literal
    append code.  It is a straightforward adaptation of the fdt32_to_cpu
    function.
    
    Signed-off-by: Anton Staaf <robotboy@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 07a8691fbbeb2a7e0cff85fb24435e2dc71facaf
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Sep 22 10:11:04 2011 -0700

    ftdump: use utilfdt to read blob
    
    Now that we have utilfdt_read(), ftdump should use it too.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 1c25c0d520dee58bfd86626a07036fe9febfebe6
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Sep 22 10:11:03 2011 -0700

    Make testutils use utilfdt
    
    The load_blob() and save_blob() functions are very similar to the utilfdt
    versions. This removes the duplicated code.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 36204fdf742cabc074617648a5b2cf62409dc40b
Author: Simon Glass <sjg@chromium.org>
Date:   Thu Sep 22 10:11:02 2011 -0700

    Add fdt read/write utility functions
    
    This adds higher-level libfdt operations for reading/writing an fdt
    blob from/to a file, as well as a function to decode a data type string
    as will be used by fdtget, fdtput.
    
    This also adds a few tests for the simple type argument supported by
    utilfdt_decode_type.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 9ebd9b4a56e54656431111e5ea7cd74e651910bf
Author: Simon Glass <sjg@chromium.org>
Date:   Wed Sep 21 13:32:44 2011 -0700

    Create Makefile.utils and move ftdump into it
    
    We want to avoid a separate Makefile include for each utility, so this sets
    up a general one for utilities.
    
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Simon Glass <sjg@chromium.org>

commit a4ea2fa9518ff0f4d7f4a08647599a727faac2e0
Author: Anton Staaf <robotboy@chromium.org>
Date:   Fri Sep 9 12:16:30 2011 -0700

    dtc: Support character literals in cell lists
    
    With this patch the following property assignment:
    
        property = <0x12345678 'a' '\r' 100>;
    
    is equivalent to:
    
        property = <0x12345678 0x00000061 0x0000000D 0x00000064>
    
    Signed-off-by: Anton Staaf <robotboy@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 83df28bd39979b32a75656cac291c36dbd4e5497
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 12 11:18:43 2011 +1000

    dtc: Remove gcc 4.6 "set but not used" warnings
    
    A number of the dtc testcases trigger the new "variable set but not
    used" warning from gcc 4.6.  That is they have variables which are
    assigned, but then never read after that point.
    
    In a couple of cases this is just because the variables aren't needed,
    so this patch removes them.  In subnode_offset.c, it's because one
    pair of variables we clearly intended to test we don't actually test.
    This patch also adds this missing check.
    
    This patch makes the testsuite compile clean with gcc 4.6.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b43335a23854b2620140eda6cca2ffae59e8de23
Author: Anton Staaf <robotboy@chromium.org>
Date:   Fri Sep 9 12:16:29 2011 -0700

    dtc: Refactor character literal parsing code
    
    Move the parsing of hex, octal and escaped characters from data.c
    to util.c where it can be used for character literal parsing within
    strings as well as for stand alone C style character literals.
    
    Signed-off-by: Anton Staaf <robotboy@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit ed8fee1a649b5430afc9b551e3bb6746ebe32449
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 5 12:02:52 2011 -0700

    Add missing tests to .gitignore
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 492f9d5de7db74aeb3a905246c4efd7cb29227a8
Author: Simon Glass <sjg@chromium.org>
Date:   Tue Jul 5 12:02:49 2011 -0700

    Split out is_printable_string() into util.c
    
    This useful function is split out so it will be available to programs
    other than ftdump.
    
    Signed-off-by: Simon Glass <sjg@chromium.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit d5b3165023b1cc3914e9943b91964ec9ad4be8b2
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Tue Jun 28 09:47:11 2011 -0400

    dtc: Remove unused variable in flat_read_mem_reserve
    
    The *p variable is declared and used to save inb->ptr, however p is
    later never used.  This has been the case since commit 6c0f3676 and can
    lead to build failures with -Werror=unused-but-set-variable:
    
            flattree.c: In function 'flat_read_mem_reserve':
            flattree.c:700:14: error: variable 'p' set but not used [-Werror=unused-but-set-variable]
            cc1: all warnings being treated as errors
            make: *** [flattree.o] Error 1
    
    Remove the variable.
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 0a5aca98ba104ec4101322ccaf36da45064ad3ce
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Tue Jun 28 08:47:09 2011 -0400

    dtc: Remove unused check variable
    
    Commit 376ab6f2 removed the old style check functionality from DTC,
    however the check option and variable were not removed.  This leads to
    build failures when -Werror=unused-but-set-variable is specified:
    
            dtc.c: In function 'main':
            dtc.c:102:17: error: variable 'check' set but not used [-Werror=unused-but-set-variable]
            cc1: all warnings being treated as errors
            make: *** [dtc.o] Error 1
            make: *** Waiting for unfinished jobs....
    
    Remove the check variable.
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit bc895d6d09695d05ceb8b52486ffe861d6cfbdde
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sun May 8 14:45:39 2011 -0500

    Tag Version 1.3.0
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 99c1db78dcbe31cb92d6d3af3a162ce6b014f6f0
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Apr 26 20:45:27 2011 +1000

    libfdt: include version number in soname
    
    The libfdt shared library is only installed by its unversioned name.
    Including it properly in a distribution requires installation of both
    the versioned name (used in the binary-only package) and the unversioned
    name (used in the development package).  The latter is just a symbolic
    link, so you need to change the soname in turn to include the version.
    
    While at it, use Makefile variables to shorten some lines and avoid
    cut-and-paste typos; and clean up remnants of when shared libraries were
    not supported on Darwin.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 37c0b6a0916c31a5eae0a9ddfcc5d0b8fb4569c6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 10 09:51:09 2010 +1100

    dtc: Add code to make diffing trees easier
    
    This patch adds a "dtdiff" script to do a useful form diff of two
    device trees.  This automatically converts the tree to dts form (if
    it's not already) and uses a new "-s" option in dtc to "sort" the
    tree.  That is, it sorts the reserve entries, it sorts the properties
    within each node by name, and it sorts nodes by name within their
    parent.
    
    This gives a pretty sensible diff between the trees, which will ignore
    semantically null internal rearrangements (directly diffing the dts
    files can give a lot of noise due to the order changes).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 73ae43ea44a40c2ac00dd94523f270177a1e72e9
Author: John Bonesio <bones@secretlab.ca>
Date:   Tue Nov 2 15:55:04 2010 -0700

    Allow nodes to be referenced by path at the top level.
    
    When nodes are modified by merging device trees, nodes to be updated/merged can
    be specified by a label. Specifying nodes by full path (instead of label)
    doesn't quite work. This patch fixes that.
    
    Signed-off-by: John Bonesio <bones@secretlab.ca>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit c0fa2e6d4e59e62f2e9f23db1a2d94532fa4ae98
Author: John Bonesio <bones@secretlab.ca>
Date:   Wed Oct 20 14:44:58 2010 -0700

    Create new and use new print_error that uses printf style formatting.
    
    yyerror is meant to be called by the parser internal code, and it's interface
    is limited. Instead create and call a new error message routine that allows
    formatted strings to be used.
    
    yyerror uses the new routine so error formatting remains consistent.
    
    Signed-of-by: John Bonesio <bones@secretlab.ca>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 8773e12fa9f5109172a779aa2a83b4464e5273cc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 20 16:33:34 2010 -0600

    Add merging of labelled subnodes. This patch allows the following
    
    syntax:
    
    / {
            child {
                    label: subchild {
                    };
            };
    };
    
    &label {
            prop = "value";
    };
    
    which will result in the following tree:
    
    / {
            child {
                    label: subchild {
                            prop = "value";
                    };
            };
    };
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 390635762d97502bda9c295fcb61b45d04d3d8d2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Aug 30 12:53:03 2010 +1000

    Remove another bashism from run_tests.sh
    
    Current we check for various error codes with [ $x == "NN" ].  However
    '==' is not actually a correct operator for the [ (test) command.  It
    should be either '=' for string comparison or '-eq' for integer
    comparison.  It appears that the bash builtin version of test
    implements '==' though, so we were getting away with it, as long as
    /bin/sh was bash - or the testsuite generated no errors.
    
    This patch fixes the usage of test so that it should work on non-bash
    shells.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0e89e8c5a02eab5655f21e732c8f2ff145712ba8
Author: Martin Ettl <ettl.martin@gmx.de>
Date:   Wed Jul 14 16:10:56 2010 +1000

    Fix a filehandle leak
    
    During a check of the current git head of the linux kernel with the
    static code analysis tool cppcheck
    (http://sourceforge.net/apps/mediawiki/cppcheck/index.php?title=Main_Page)
    the tool discovered a resource leak in linux-2.6/scripts/dtc/fstree.c.
    
    Please refer the attached patch, that fixes the issue.
    
    Fixes https://bugzilla.kernel.org/show_bug.cgi?id=15363
    
    Signed-off-by: Martin Ettl <ettl.martin@gmx.de>
    Signed-off-by: Michal Marek <mmarek@suse.cz>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e3b32b75b54834bc4d55db22636b6504eabb788e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Apr 30 15:30:00 2010 +1000

    dtc: Extend and better test dtbs_equal utility programs (resend)
    
    The dtbs_equal_ordered test program is used to implement a number of
    testcases.  However, the test program itself has never been
    particularly well tested.  In addition there are testcases coming in
    future for which it would be useful to have a corresponding
    "dtbs_equal_unordered" which checks for equality of device trees, not
    considering the internal ordering of elements.  Finally, for some
    tests we may want it would be useful to check trees for equality with
    the PASS case being when they are *not* equal.
    
    This patch addresses all of the above.  A dtbs_equal_unordered is
    added, and both it and the existing dtbs_equal_ordered program now
    take a -n option to make the PASS case be where the trees are not
    equal.  A number of example trees with slight modifications from
    test_tree1 are used to verify that both these programs correctly
    identify when the tree is altered, and a dtb_reverse program is used
    to verify that the unordered version does not depend on internal
    ordering.  These new testcases for the equality testing programs are
    split out into a new test group in run_tests.sh.
    
    dtbs_equal_unordered uses the new property iteration functions, and so
    this also acts as further testing for those functions.
    dtbs_equal_unordered will be useful for further testing the recently
    added tree-merging code and its upcoming extensions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 341df2bdc3f9664587a57f947249c3208da77c9b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Apr 30 15:27:32 2010 +1000

    dtc: Add -Wredundant-decls (resend)
    
    We are almost clean already with the -Wredundant-decls warning.  The
    only exception is a declaration for isatty() inside the flex-generated
    code.  This can be removed by using flex's "never-interactive" option,
    which we probably should be using anyway, since we never parse
    interactively in the sense that this option implies.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 73dca9ae0b9abe6924ba640164ecce9f8df69c5a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 9 17:39:14 2010 +1100

    libfdt: Implement property iteration functions
    
    For ages, we've been talking about adding functions to libfdt to allow
    iteration through properties.  So, finally, here are some.
    
    I got bogged down on this for a long time because I didn't want to
    expose offsets directly to properties to the callers.  But without
    that, attempting to make reasonable iteration functions just became
    horrible.  So eventually, I settled on an interface which does now
    expose property offsets.  fdt_first_property_offset() and
    fdt_next_property_offset() are used to step through the offsets of the
    properties starting from a particularly node offset.  The details of
    the property at each offset can then be retrieved with either
    fdt_get_property_by_offset() or fdt_getprop_by_offset() which have
    interfaces similar to fdt_get_property() and fdt_getprop()
    respectively.
    
    No explicit testcases are included, but we do use the new functions to
    reimplement the existing fdt_get_property() function.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 74f6a51b1f71ffc7d9557e063630469a93eeddec
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 9 10:49:33 2010 +1100

    dtc: Enable more warnings
    
    This patch turns on a bunch of extra gcc warnings, most of which are
    probably a good idea.  Of the new warnings -Wnested-externs and
    -Wstrict-prototypes need no code changes, we're already warning-clean.
    The remaining one, -Wmissing-prototypes requires trivial changes in
    some of the tests (making functions local).
    
    This patch also rearranges the warnings flags into a separate make
    variable for convenience, and turns on -Werror, to really encourage
    people to keep the code warning-clean.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8765874963852b2733777e69686251205238ad3d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 3 16:38:01 2010 +1100

    dtc: Correct headers in util.c
    
    Since util.c is used in programs other than full dtc, it shouldn't
    include the full dtc.h, just util.h which has prototypes directly
    relevant to it.  This patch makes the change, and also adds includes
    of the necessary system headers which were previously included
    indirectly by dtc.h.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9dfb495f80a8d4b63ad281001625ad2a5bb20472
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Feb 24 12:06:23 2010 -0700

    Update .gitignore files
    
    Filter out all the generated bits from git revision control
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 83da1b2a4ee272ac97647a82fc652d9b4b1505ee
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Feb 25 09:58:29 2010 -0700

    Allow device tree to be modified by additonal device tree sections
    
    This patch allows the following construct:
    
    / {
            property-a = "old";
            property-b = "does not change";
    };
    
    / {
            property-a = "changed";
            property-c = "new";
            node-a {
            };
    };
    
    Where the later device tree overrides the properties found in the
    earlier tree.  This is useful for laying down a template device tree
    in an include file and modifying it for a specific board without having
    to clone the entire tree.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 716418849a0ed4cc7689d4b82a73597a8726de92
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 24 22:29:19 2010 +1100

    dtc: Audit and fix valgrind errors
    
    The somewhat embarrasing bug in the first version of my previous patch
    would have been detected by valgrind.  Thus reminded, I've run the
    testsuite under valgrind and fixed any errors I found.  This turned
    out to be just some uninitialized buffers in test programs.  The
    fragments of uninitialized data aren't particularly important, but we
    might as well squash the valgrind warnings, so that future valgrind
    errors will stand out.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 05898c67c15d73fe50bd87fc939bd9ee6a4275ce
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 24 18:22:17 2010 +1100

    dtc: Allow multiple labels on nodes and properties
    
    At present, both the grammar and our internal data structures mean
    that there can be only one label on a node or property.  This is a
    fairly arbitrary constraint, given that any number of value labels can
    appear at the same point, and that in C you can have any number of
    labels on the same statement.
    
    This is pretty much a non-issue now, but it may become important with
    some of the extensions that Grant and I have in mind.  It's not that
    hard to change, so this patch does so, allowing an arbitrary number of
    labels on any given node or property.  As usual a testcase is added
    too.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

commit 49c2da308534a4bffb67d53b5a7f8e5f05c305b9
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 24 01:23:37 2010 +1100

    Remove obsolete references_dts0 test
    
    The only purpose of the dtc_references_dts0 testcase was to check
    handling of references in the old dts v0 syntax.  Since we no longer
    support the old syntax, and the references_dts0.dts has been converted
    to the new format, it's entirely redundant.  This patch removes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 329055dbbc3c09e21386ceae788256991f4c8aec
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Feb 23 19:56:41 2010 +1100

    Disallow re-use of the same label within a dts file
    
    Currently, nothing will stop you from re-using the same label string
    multiple times in a dts, e.g.:
            / {
                    samelabel: prop1 = "foo";
                    samelabel: prop2 = "bar";
            };
    
    or
            / {
                    samelabel: prop1 = "foo";
                    samelabel: subnode {
                    };
            };
    
    When using node references by label, this could lead to confusing
    results (with no warning), and in -Oasm mode will result in output
    which the assembler will complain about (since it too will have
    duplicate labels).
    
    This patch, therefore, adds code to checks.c to give errors if you
    attempt to re-use the same label.  It treats all labels (node,
    property, and value) as residing in the same namespace, since the
    assembler will treat them so for -Oasm mode.
    
    Testcases for the new code are also added.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 15ad6d862ec7f66dc00783798705a8db1c5d9aca
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 19 15:50:50 2010 +1100

    dtc: Automatically pick a sensible boot_cpuid_phys
    
    Currently, when in -Idts -Odtb or -Ifs -Odtb modes, dtc always
    defaults to using 0 as the value for the boot_cpuid_phys header field.
    That's correct quite often, but there are some systems where there is
    no CPU with hardware ID of 0, or where we don't want to use the CPU
    with hardware ID 0 at all (e.g. for AMP-style partitioning).  The only
    way to override this default currently, is with the -b command line
    option.
    
    This patch improves dtc to instead base the default boot_cpuid_phys
    value on the reg property of the first listed subnode of /cpus.  This
    means that dtc will get boot_cpuid_phys correct by default in a
    greater proportion of cases (since the boot cpu is usually listed
    first, and this way at least the boot_cpuid_phys default will match
    some existing cpu node).  If the node doesn't exist or has an invalid
    'reg' property (missing or not 4 bytes in length), then
    boot_cpuid_phys is set to 0.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5c8d2e2b57f50ff9a3d66e31032693e4273af85c
Author: Lukasz Wojcik <zbr@semihalf.com>
Date:   Fri Jan 29 17:31:51 2010 +0100

    Modification of lexer and parser, improving dtc portability.
    
    This mod allows successful build of dtc using both bison/flex and yacc/lex.
    
    Signed-off-by: Lukasz Wojcik <zbr@semihalf.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit c6225f86fd7fe2c46ba30203e0582900e2260f9c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 8 14:24:42 2009 +1100

    dtc: Cleanup YYLTYPE and YYLLOC_DEFAULT declarations
    
    This patch makes some small cleanups to the declaration of YYLTYPE,
    YYLLOC_DEFAULT and related things.
    
            - We used to use undocumented magic #defines for bison,
              YYLTYPE_IS_DECLARED and YYLTYPE_IS_TRIVIAL.  This may not be
              portable across bison versions.  Instead define YYLTYPE as a
              macro in terms of struct srcpos, as the info pages suggest.
    
            - Our kernel-derived coding style discourages typedefed
              structures.  So use 'struct srcpos' instead of 'srcpos'
              throughout'.
    
            - Indent the YYLLOC_DEFAULT macro according to our coding
              style (it was in GNU indent style, since it was taken from
              the example in the bison info).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e1fee329e2a74141fc6872a5c4307d078c4ba553
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 8 14:24:42 2009 +1100

    dtc: Cleanup srcpos_string()
    
    There are several small problems with the current srcpos_string().
    
            - The code unnecessarily uses a temp buffer and two rounds of
              *printf(); a single asprintf() will suffice.
    
            - With previous changes, pos->file->name can never be NULL,
              and the name field for a srcfile bound to stdin is already
              set to something sensible.
    
            - On allocation failure in asprintf() it returns a bogus
              result, instead of causing a fatal error like every other
              failed allocation.
    
            - The format for representing file/line/column is gratuitously
              different from the file/line format we used to use, and the
              format used by gcc and bison.
    
    This patch addresses all of these.  There remains the problem that
    asprintf() is not portable, but that can wait until another patch.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 728c5e87c655c17c2fbc1d5386b12ff328e0fc76
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 8 14:24:42 2009 +1100

    dtc: Cleanup line number tracking, add column number tracking
    
    Our YYLTYPE current carries around first and last line and first and
    last column information.  However, of these, on the first line
    information is actually filled in properly.
    
    Furthermore, filling in the line number information from yylineno is
    kind of clunky: we have to copy its value to the srcfile stack and
    back to handle include file positioning correctly.
    
    This patch cleans this up.  We turn off flex's yylineno option and
    instead track the line and column number ourselves from
    YY_USER_ACTION.  The line and column number are stored directly inside
    the srcfile_state structure, so it's automatically a per-file
    quantity.  We now also fill in all the yylloc from YY_USER_ACTION.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d68cb36b0bebc7711ada9b750f3c19398c44efb7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 8 14:24:42 2009 +1100

    dtc: Simpler interface to source file management
    
    This patch cleans up our handling of input files, particularly dts
    source files, but also (to an extent) other input files such as those
    used by /incbin/ and those used in -I dtb and -I fs modes.
    
    We eliminate the current clunky mechanism which combines search paths
    (which we don't actually use at present) with the open relative to
    current source file behaviour, which we do.
    
    Instead there's a single srcfile_relative_open() entry point for
    callers which opens a new input file relative to the current source
    file (which the srcpos code tracks internally).  It doesn't currently
    do search paths, but we can add that later without messing with the
    callers, by drawing the search path from a global (which makes sense
    anyway, rather than shuffling it around the rest of the processing
    code).
    
    That suffices for non-dts input files.  For the actual dts files,
    srcfile_push() and srcfile_pop() wrappers open the file while also
    keeping track of it as the current source file for future opens.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d75b33af676d0beac8398651a7f09037555a550b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 26 15:37:13 2009 +1100

    Support ePAPR compliant phandle properties
    
    Currently, the Linux kernel, libfdt and dtc, when using flattened
    device trees encode a node's phandle into a property named
    "linux,phandle".  The ePAPR specification, however - aiming as it is
    to not be a Linux specific spec - requires that phandles be encoded in
    a property named simply "phandle".
    
    This patch adds support for this newer approach to dtc and libfdt.
    Specifically:
    
            - fdt_get_phandle() will now return the correct phandle if it
              is supplied in either of these properties
    
            - fdt_node_offset_by_phandle() will correctly find a node with
              the given phandle encoded in either property.
    
            - By default, when auto-generating phandles, dtc will encode
              it into both properties for maximum compatibility.  A new -H
              option allows either only old-style or only new-style
              properties to be generated.
    
            - If phandle properties are explicitly supplied in the dts
              file, dtc will not auto-generate ones in the alternate format.
    
            - If both properties are supplied, dtc will check that they
              have the same value.
    
            - Some existing testcases are updated to use a mix of old and
              new-style phandles, partially testing the changes.
    
            - A new phandle_format test further tests the libfdt support,
              and the -H option.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0ef21055ee414697aac7226c171d921214ef3981
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 17 17:00:53 2009 +1100

    Assorted cleanups and extensions for ftdump
    
    This patch makes a number of minor changes to the ftdump debugging
    tool.
    
     * There was an endian bug in one place, which this fixes.
    
     * We now use const qualifiers in a number of places where we can
    
     * ftdump can now be instructed to read from stdin by giving "-" as
       the filename.
    
     * The buffer into which the blob is read is increased from 16k to
       64k, and is now dynamically allocated.
    
     * ftdump now emits source in dts-v1 format
    
    Since ftdump is little used these days, these fixes are arguably of
    little use.  On the other hand, I already did the work of making the
    changes some time back, so I guess we might as well fold these small
    fixes and improvements in.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b31b271f91b867343fe21a20da4d24b03c1ef421
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 12 13:30:02 2009 +1100

    Fix dtc bugs for 64-bit compile
    
    I've just tested building dtc as an x86_64 binary on a 32-bit i386
    host by using:
            make CC="gcc -m64"
    This patch fixes a handful of minor bugs thus discovered:
    
     * There is a printf() type mismatch on 64-bit in value-labels.c
    
     * For the tests which use libdl, we were using the GNU make feature
    where it will find libdl.so given a dependency in the form '-ldl'.
    But this built-in make logic doesn't know we're compiling 64-bit so
    finds the 32-bit version of the library.  We avoid using this and
    instead explicitly pass -ldl to CC, which being the 64-bit version
    does know where to look.
    
     * To process dtc's asm output into .so files, run_tests.sh was
    directly invoking the (default instance of) the assembler and linker.
    Instead invoke these via the CC driver, and allow that to be overriden
    from the make environment.
    
     * The x86_64 assembler doesn't 0 fill with the .balign directive
    (presumably it is NOP filling).  That doesn't produce strictly
    incorrect trees, but it is confusing and confounds are testcases which
    do byte-by-byte comparison of the trees produced by asm output with
    direct dtb output (which does 0 pad where necessary, of course).  This
    patch uses the optional second argument to .balign to force gas to
    zero-fill instead.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f2f6d0f2f02b4713e9d0cdc840e211535689a2e6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 12 11:56:34 2009 +1100

    Don't use echo -e in run_tests.sh
    
    In one section, the run_tests script attempts to use the -e (interpret
    escapes) option to echo.  This option is not portable - for example
    the echo built into dash, now the default /bin/sh on several
    distributions does not support it and will just echo "-e" literally.
    
    Since we don't actually use any of the escapes that -e enables, this
    patch simply removes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 350c9cce9e559a5609f31fd7229dffbd69d85ff2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 12 11:14:04 2009 +1100

    Use yylloc instead of yyloc
    
    yylloc is the correct way to get token positioning information.
    yyloc is a bison internal variable that only works by accident.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c623fe5c21e0358fc38a4e8ddb0d51379f0733e8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 9 14:38:30 2009 +1000

    Fix bug in -Odts with properties containing multiple terminating nulls
    
    When in -Odts mode, dtc will not produce correct output for
    string-like properties which have more than one \0 character at the
    end of the property's bytestring.  In fact, it generates output which
    is not syntactically correct.  This patch fixes the bug, and adds a
    testcase for future regressions here.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9c1a0df677bf0f4af622a404f6c738ad711326e0
Author: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
Date:   Tue May 26 20:07:26 2009 +0200

    add Mac OS X support
    
    use dylib shared lib extention
    allow to specifiy os specific shared lib link option
    Mac OS use -dynamiclib instead of -shared, -install_name instead of -soname
    and does not support --version-script
    
    add HOSTOS macro to detect the current os you are
    
    Signed-off-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>

commit f281f526d4f039f4c3236176abe6396da4a443fe
Author: Laurent Gregoire <laurent.gregoire@tomtom.com>
Date:   Tue Mar 3 14:23:59 2009 +0100

    libfdt: Fix C++ compile-time cast error on gnu 4.2.1
    
    Allow the inclusion of libfdt.h in C++ source.
    
    Signed-off-by: Laurent Gregoire <laurent.gregoire@tomtom.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 804fed8dcdb44fe83fcfc2e310c09d45c7602d9d
Author: Emil Medve <Emilian.Medve@Freescale.com>
Date:   Mon Feb 23 10:43:36 2009 -0600

    Fix a possible overflow case detected by gcc 4.3.2
    
    .../dtc/libfdt/fdt_sw.c: In function 'fdt_end_node':
    .../dtc/libfdt/fdt_sw.c:81: error: assuming signed overflow does not occur when assuming that (X + c) < X is always false
    
    Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>

commit 925bd8c05472ad4ed45d56293c6aa21b1a39533a
Author: Emil Medve <Emilian.Medve@Freescale.com>
Date:   Tue Feb 17 13:43:40 2009 -0600

    Fix libraries (static and dynamic) installation
    
    Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>

commit 1a020e403048a56ffacb8c6f71aef0944b901757
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 6 14:03:24 2009 +1100

    libfdt: Rework/cleanup fdt_next_tag()
    
    Currently, callers of fdt_next_tag() must usually follow the call with
    some sort of call to fdt_offset_ptr() to verify that the blob isn't
    truncated in the middle of the tag data they're going to process.
    This is a bit silly, since fdt_next_tag() generally has to call
    fdt_offset_ptr() on at least some of the data following the tag for
    its own operation.
    
    This patch alters fdt_next_tag() to always use fdt_offset_ptr() to
    verify the data between its starting offset and the offset it returns
    in nextoffset.  This simplifies fdt_get_property() which no longer has
    to verify itself that the property data is all present.
    
    At the same time, I neaten and clarify the error handling for
    fdt_next_tag().  Previously, fdt_next_tag() could return -1 instead of
    a tag value in some circumstances - which almost none of the callers
    checked for.  Also, fdt_next_tag() could return FDT_END either because
    it encountered an FDT_END tag, or because it reached the end of the
    structure block - no way was provided to tell between these cases.
    
    With this patch, fdt_next_tag() always returns FDT_END with a negative
    value in nextoffset for an error.  This means the several places which
    loop looking for FDT_END will still work correctly - they only need to
    check for errors at the end.  The errors which fdt_next_tag() can
    report are:
            - -FDT_ERR_TRUNCATED if it reached the end of the structure
               block instead of finding a tag.
    
            - -FDT_BADSTRUCTURE if a bad tag was encountered, or if the
               tag data couldn't be verified with fdt_offset_ptr().
    
    This patch also updates the callers of fdt_next_tag(), where
    appropriate, to make use of the new error reporting.
    
    Finally, the prototype for the long gone _fdt_next_tag() is removed
    from libfdt_internal.h.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ce4d9c0f746b21119bc2b5aa5571bb08799a82bd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 6 14:01:56 2009 +1100

    libfdt: Rework fdt_next_node()
    
    Currently fdt_next_node() will find the next node in the blob
    regardless of whether it is above, below or at the same level in the
    tree as the starting node - the depth parameter is updated to indicate
    which is the case.  When a depth parameter is supplied, this patch
    makes it instead terminate immediately when it finds the END_NODE tag
    for a node at depth 0.  In this case it returns the offset immediately
    past the END_NODE tag.
    
    This has a couple of advantages.  First, this slightly simplifies
    fdt_subnode_offset(), which no longer needs to explicitly check that
    fdt_next_node()'s iteration hasn't left the starting node.  Second,
    this allows fdt_next_node() to be used to implement
    _fdt_node_end_offset() considerably simplifying the latter function.
    
    The other users of fdt_next_node() either don't need to iterate out of
    the starting node, or don't pass a depth parameter at all.  Any
    callers that really need to iterate out of the starting node, but keep
    tracking depth can do so by biasing the initial depth value.
    
    This is a semantic change, but I think it's very unlikely to break any
    existing library users.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bae93e8992fef3cfaff681fe85b26fd35e432e31
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jan 8 11:48:48 2009 +1100

    dtc: Add testcases for labels within values
    
    This patch adds a testcase using asm output mode to check that labels
    within property values are correctly processed.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 26d93f6c922c5b199682f9808c933462c1b97855
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jan 8 11:47:55 2009 +1100

    dtc: Make asm output more portable and add testcases
    
    This patch adds some testcases for dtc's -Oasm mode.  Specifically it
    checks that building the asm will result in the same device tree blob
    in memory as -Odtb mode would produce, for a variety of trees.  This
    test uncovered two difficulties with our current -Oasm output, both of
    which are addressed in this patch as well.
    
    First, -Oasm output would only be correct if assembled for a
    big-endian target.  Usually that would be the case, when building
    device trees into a firmware or similar.  However this makes life
    inconvenient for testing on a little-endian target, and one can think
    up use cases where a program running on a little endian host might
    want to embed a device tree for a big-endian target.  This patch
    therefore changes -Oasm output to use .byte directives instead of
    .long throughout in order to generate byte-for-byte identical trees
    regardless of the endianness of the assembler target.
    
    Second, -Oasm output emitted several #define statements which were
    then used in the innards of the output - i.e. it assumed the output
    would be processed by cpp before being assembled.  That may not be
    convenient in all build environments, and in any case doesn't work
    well with the above fix.  So, -Oasm output no longer needs to be
    preprocessed before assembling.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b2b4990bbf03a1b9def187cbc37488eed66a182c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jan 5 12:50:23 2009 +1100

    dtc: Move some functions to util.[ch]
    
    Now that we have a util.[ch] file shared between dtc and
    convert-dtsv0, move some functions which are currently duplicated in
    the two to util files.  Specifically we move the die(), xmalloc() and
    xrealloc() functions.
    
    While we're at it, add standard double-include protection to util.h
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 75bdd849dc3083038113791c4050746999d60989
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jan 5 12:46:00 2009 +1100

    libfdt: Fix error in documentation for fdt_get_alias_namelen()
    
    Oops, screwed up the function name in the documenting comment for this
    function.  Trivial correction in this patch.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6272182b417a903a6b5c0d5d6a470957e919d8f4
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Fri Jan 2 08:20:34 2009 -0500

    libfdt: Introduce libfdt shared library
    
    Build a libfdt shared library in addition to the existing .a that is
    created.  Symbol versioning is used from the libfdt/version.lds script.
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>

commit 787b599c8108f514645d9ee6256ee53dccc9db84
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Fri Jan 2 08:19:51 2009 -0500

    libfdt: Add version.lds file
    
    Add the initial symbol versioning file as groundwork for creating
    a libfdt shared library
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>

commit 9878f30f311cb56d1ab1914670b38672476916ac
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 7 12:49:44 2008 +1100

    dtc: Handle linux,phandle properties which self-reference
    
    Currently, dtc will generate phandles for nodes which are referenced
    elsewhere in the tree.  phandles can also be explicitly assigned by
    defining the linux,phandle property.  However, there is no way,
    currently to tell dtc to generate a phandle for a node if it is not
    referenced elsewhere.  This is inconvenient when it's expected that
    later processing on the flat tree might add nodes which _will_
    the node in question.
    
    One way one might attempt to do this is with the construct:
            mynode: mynode {
                    linux,phandle = <&mynode>;
                    /* ... */
            };
    Though it's a trifle odd, there's really only one sensible meaning
    which can be assigned to this construct: allocate a unique phandle to
    "mynode" and put that in its linux,phandle property (as always).
    
    Currently, however, dtc will choke on this self-reference.  This patch
    corrects this, making the construct above give the expected results.
    It also ensures a more meaningful error message is given if you
    attempt to process the nonsensical construct:
            mynode: mynode {
                    linux,phandle = <&someothernode>;
                    /* ... */
            };
    
    The 'references' testcase is extended to cover this case, as well.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2f766233c2189481b4ee36c99410e559f1c9158c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 7 11:45:48 2008 +1100

    dtc: Use noinput flex option for convert-dtsv0 to remove warning
    
    The convert-dtsv0 lexer doesn't use lex's input() macro/function.
    This can result in "defined but not used" warnings.  This patch uses
    flex's noinput option to prevent this warning (as we already do for
    dtc-lexer.l).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0783d7e705f2d73f7148d9f45c600c2587b3c3ce
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 7 11:41:11 2008 +1100

    dtc: Check return value from fwrite()
    
    There's one place in flattree.c where we currently ignore the return
    value from fwrite().  On some gcc/glibc versions, where fwrite() is
    declared with attribute warn_unused_result, this causes a warning.
    
    This patch fixes the warning, by checking the fwrite() result.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f99cd158a9f0b67d3935a08a07dab4f36719fc74
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 30 13:41:08 2008 +1100

    libfdt: Fix bug in fdt_subnode_offset_namelen()
    
    There's currently an off-by-one bug in fdt_subnode_offset_namelen()
    which causes it to keep searching after it's finished the subnodes of
    the given parent, and into the subnodes of siblings of the original
    node which come after it in the tree.
    
    This patch fixes the bug.  It also extends the subnode_offset testcase
    (updating all of the 'test_tree1' example trees in the process) to
    catch it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2ebe88df6932a3d685e43d921c9beb526129d2be
Author: Jon Loeliger <jdl@freescale.com>
Date:   Fri Sep 5 14:25:44 2008 -0500

    Add conditionalized debug() print macro.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 4e1a0a0129b3d197a6f9086df6e5c3874bf6f1f7
Author: Jon Loeliger <jdl@jdl.com>
Date:   Thu Aug 14 17:19:37 2008 -0500

    Remove support for the legacy DTS source file format.
    
    Now that all in-kernel-tree DTS files are properly /dts-v1/,
    remove direct support for the older, un-numbered DTS
    source file format.
    
    Convert existing tests to /dts-v1/ and remove support
    for the conversion tests themselves.
    
    For now, though, the conversion tool still exists.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit e5c8e1dcd7f2d3784194498e5ea916e7b48fe33a
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Sep 12 13:39:49 2008 -0500

    Enhance source position implementation.
    
    Implemented some print and copy routines.
    Made empty srcpos objects that will be used later.
    Protected .h file from multiple #include's.
    Added srcpos_error() and srcpos_warn().
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 83ac55d9c4669397f3f2454d3c72dd34e5de5490
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Oct 3 11:46:43 2008 -0500

    Use flex's YY_USER_ACTION feature to avoid code duplication
    
    Current, every lexer rule starts with some boiler plate to update the
    yylloc value for use by the parser.  One of the rules, even mistakenly
    has a redundant allocation to one of the members.
    
    This patch uses the flex YY_USER_ACTION macro hook, which is executed
    before every rule to avoid this duplication.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 879e4d2590b50d63f82c3c3652bc3c7900591f1c
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Oct 3 11:12:33 2008 -0500

    Implement and use an xstrdup() function
    
    Many places in dtc use strdup(), but none of them actually check the
    return value to see if the implied allocation succeeded.  This is a
    potential bug, which we fix in the patch below by replacing strdup()
    with an xstrdup() which in analogy to xmalloc() will quit with a fatal
    error if the allocation fails.
    
    I felt the introduciton of util.[ch] was a better choice
    for utility oriented code than directly using srcpos.c
    for the new string function.
    
    This patch is a re-factoring of Dave Gibson's similar patch.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 68f98d7b8aa41fab175daf9f1bcb2a5bc22dbc90
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Oct 3 10:49:22 2008 -0500

    Rearrange ftdump and convert-dtsv0 into sub-Makefiles.
    
    Follows the model of the existing sub-Makefiles for dtc.
    
    Adjust $(BIN) definition to represent installable bin programs
    and use it as the list of installed programs rather than using
    an enumerated list in the install target.
    
    Adjust the tests/Makefile to clean up properly still.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit e8903fe225f1e3f4a04ea963306c87ca0ac795dc
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Oct 3 09:40:39 2008 -0500

    Some Documentation fixes and generalizations.
    
    Updated a jdl.com URL reference.
    
    Generalized the new section IV to be "Utility Tools"
    and added a small blurb about ftdump as well.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 3a90ce6d75ae68c4aadb20fcceeb61a71bc548f3
Author: Niklaus Giger <niklaus.giger@member.fsf.org>
Date:   Thu Oct 2 22:06:35 2008 +0200

    Install & document convert-dtsv0
    
    Signed-off-by: Niklaus Giger <niklaus.giger@member.fsf.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 9c83115351443a132c5c1cbad6cda79d52f63489
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 20 16:55:14 2008 +1000

    libfdt: Add function to explicitly expand aliases
    
    Kumar has already added alias expansion to fdt_path_offset().
    However, in some circumstances it may be convenient for the user of
    libfdt to explicitly get the string expansion of an alias.  This patch
    adds a function to do this, fdt_get_alias(), and uses it to implement
    fdt_path_offset().
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b236893fc4bc173877adfa4270b14d7d7209fb10
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Sep 25 11:02:17 2008 -0500

    Fix an overflow case in fdt_offset_ptr() detected by GCC 4.3.
    
    Using Gcc 4.3 detected this problem:
    
        ../dtc/libfdt/fdt.c: In function 'fdt_next_tag':
        ../dtc/libfdt/fdt.c:82: error: assuming signed overflow does not
        occur when assuming that (X + c) < X is always false
    
    To fix the problem, treat the offset as an unsigned int.
    
    The problem report and proposed fix were provided
    by Steve Papacharalambous <stevep@freescale.com>.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 8daae14b742a48078c77fca3ccb24cd376232bc1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 29 14:19:13 2008 +1000

    libfdt: Fix bugs in fdt_get_path()
    
    The current implementation of fdt_get_path() has a couple of bugs,
    fixed by this patch.
    
    First, contrary to its documentation, on success it returns the length
    of the node's path, rather than 0.  The testcase is correspondingly
    wrong, and the patch fixes this as well.
    
    Second, in some circumstances, it will return -FDT_ERR_BADOFFSET
    instead of -FDT_ERR_NOSPACE when given insufficient buffer space.
    Specifically this happens when there is insufficient space even to
    hold the path's second last component.  This behaviour is corrected,
    and the testcase updated to check it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 02cc83540bd7aed689560908da2e4e7f6a39e9b4
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Thu Aug 14 08:28:19 2008 -0500

    libfdt: Add support for using aliases in fdt_path_offset()
    
    If the path doesn't start with '/' check to see if it matches some alias
    under "/aliases" and substitute the matching alias value in the path
    and retry the lookup.
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit cb650ae1430ad0629e5fe88a4c208c8021e19b27
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 6 14:50:49 2008 +1000

    libfdt: Implement fdt_get_property_namelen() and fdt_getprop_namelen()
    
    As well as fdt_subnode_offset(), libfdt includes an
    fdt_subnode_offset_namelen() function that takes the subnode name to
    look up not as a NUL-terminated string, but as a string with an
    explicit length.  This can be useful when the caller has the name as
    part of a longer string, such as a full path.
    
    However, we don't have corresponding 'namelen' versions for
    fdt_get_property() and fdt_getprop().  There are less obvious use
    cases for these variants on property names, but there are
    circumstances where they can be useful e.g. looking up property names
    which need to be parsed from a longer string buffer such as user input
    or a configuration file, or looking up an alias in a path with
    IEEE1275 style aliases.
    
    So, since it's very easy to implement such variants, this patch does
    so.  The original NUL-terminated variants are, of course, implemented
    in terms of the namelen versions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 01a2d8a3e9f19cb1f5ee923af23682fad783a799
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Aug 4 15:30:13 2008 +1000

    dtc: Make many functions 'static'
    
    This patch marks various functions not shared between c files
    'static', as they should be.  There are a couple of functions in dtc,
    and many in the testsuite.
    
    This is *almost* enough to enable the -Wmissing-prototypes warning.
    It's not quite enough, because there's a mess of junk in the flex
    generated code which triggers that warning which I'm not yet sure how
    to deal with.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 315c5d095ebdf29f1912186e76ab9f95e694b18a
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jul 30 09:59:16 2008 -0400

    dtc: give advance warning that "-S" is going away.
    
    The "-S" option allowed the specification of a minimum size for
    the blob, however the main reason for caring about the size is
    so there is enough padding to add a chosen node by u-boot or
    whoever.  In which case, folks don't really care about the absolute
    size, but rather the size of the padding added for this -- which
    is what the "-p" option does.  Having the "-S" just confuses people.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a1db0749fdb270f57fc3ef8f868700e6b3b5c0dd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jul 29 14:51:36 2008 +1000

    dtc: Remove unused lexer function
    
    dtc does not use the input() function in flex.  Apparently on some gcc
    versions the unused function will cause warnings.  Therefore, this
    patch removes the function by using the 'noinput' option to flex.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d5653618d26fb8025dc8ed34a920036b61c48153
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jul 29 14:51:22 2008 +1000

    libfdt: Forgot one function when cleaning the namespace
    
    In commit b6d80a20fc293f3b995c3ce1a6744a5574192125, we renamed all
    libfdt functions to be prefixed with fdt_ or _fdt_ to minimise the
    chance of collisions with things from whatever package libfdt is
    embedded in, pulled into the libfdt build via that environment's
    libfdt_env.h.
    
    Except... I missed one.  This patch applies the same treatment to
    _stringlist_contains().  While we're at it, also make it static since
    it's only used in the same file.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 52c356d81b1b5b5426f53655e782c37793c3637e
Author: Jon Loeliger <jdl@jdl.com>
Date:   Fri Jul 25 16:17:04 2008 -0500

    Tag Version 1.2.0
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit a653228522a1af6ca8c43e2a6edb9d0aa77dbd24
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Jul 23 10:20:53 2008 -0500

    libfdt: Fix 'make install' target handling of .h files.
    
    The definition of LIBFDT_INCLUDES was accidentally dropped.
    Put it back and add srcdir prefix handling for it.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 17773b0e5148c5ae281ee21492c871292cb7de20
Author: Jon Loeliger <jdl@jdl.com>
Date:   Mon Jul 14 13:45:08 2008 -0500

    Tag Version 1.2.0-rc2
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 08309aa1a428e35ed66fabfc587dd01a176539c7
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Wed Jul 9 11:22:44 2008 +0200

    libfdt: Improve documentation in libfdt.h
    
    Fix a few typos and mistakes.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit b6d80a20fc293f3b995c3ce1a6744a5574192125
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jul 9 14:10:24 2008 +1000

    libfdt: Increase namespace-pollution paranoia
    
    libfdt is supposed to easy to embed in projects all and sundry.
    Often, it won't be practical to separate the embedded libfdt's
    namespace from that of the surrounding project.  Which means there can
    be namespace conflicts between even libfdt's internal/static functions
    and functions or macros coming from the surrounding project's headers
    via libfdt_env.h.
    
    This patch, therefore, renames a bunch of libfdt internal functions
    and macros and makes a few other chances to reduce the chances of
    namespace collisions with embedding projects.  Specifically:
            - Internal functions (even static ones) are now named _fdt_*()
    
            - The type and (static) global for the error table in
              fdt_strerror() gain an fdt_ prefix
    
            - The unused macro PALIGN is removed
    
            - The memeq and streq macros are removed and open-coded in the
              users (they were only used once each)
    
            - Other macros gain an FDT_ prefix
    
            - To save some of the bulk from the previous change, an
              FDT_TAGALIGN() macro is introduced, where FDT_TAGALIGN(x) ==
              FDT_ALIGN(x, FDT_TAGSIZE)
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4d7bea7873590ee3a2bfc2905bef3ed8e84a0902
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 7 11:19:13 2008 +1000

    dtc: Run relevant checks on dtb input as well as dts
    
    This patch adjusts the testsuite to run most of the tests for the tree
    checking code on input in dtb form as well as dts form.  Some checks
    which only make sense for dts input (like reference handling) are
    excluded, as are those which currently take dtb input because they
    rely on things which cannot be lexically constructed in a dts file.
    
    This shows up two small bugs in dtc, which are also corrected.
    
    First, the name_properties test which was is supposed to remove
    correctly formed 'name' properties (because they can be reconstructed
    from tne node name) was instead removing 'name' properties even if
    they weren't correct.
    
    Secondly, when using dtb or fs input, the runtime tree in dtc did not
    have the parent pointer initialized propertly because.built
    internally.  The appropriate initialization is added to the
    add_child() function.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1409097db8be6ba662e3808654671554c5803bf0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 7 10:14:15 2008 +1000

    dtc: Enable and fix -Wcast-qual warnings
    
    Enabling -Wcast-qual warnings in dtc shows up a number of places where
    we are incorrectly discarding a const qualification.  There are also
    some places where we are intentionally discarding the 'const', and we
    need an ugly cast through uintptr_t to suppress the warning.  However,
    most of these are pretty well isolated with the *_w() functions.  So
    in the interests of maximum safety with const qualifications, this
    patch enables the warnings and fixes the existing complaints.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 36786db6154533b67d736b414ef63b4457009326
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jul 7 10:10:48 2008 +1000

    dtc: Enable and fix -Wpointer-arith warnings
    
    This patch turns on the -Wpointer-arith option in the dtc Makefile,
    and fixes the resulting warnings due to using (void *) in pointer
    arithmetic.  While convenient, pointer arithmetic on void * is not
    portable, so it's better that we avoid it, particularly in libfdt.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 76e0622b687d795bb1379cf183c6ce8613e14658
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 26 17:08:57 2008 +1000

    dtc: Clean up lexing of include files
    
    Currently we scan the /include/ directive as two tokens, the
    "/include/" keyword itself, then the string giving the file name to
    include.  We use a special scanner state to keep the two linked
    together, and use the scanner state stack to keep track of the
    original state while we're parsing the two /include/ tokens.
    
    This does mean that we need to enable the 'stack' option in flex,
    which results in a not-easily-suppressed warning from the flex
    boilerplate code.  This is mildly irritating.
    
    However, this two-token scanning of the /include/ directive also has
    some extremely strange edge cases, because there are a variety of
    tokens recognized in all scanner states, including INCLUDE.  For
    example the following strange dts file:
    
            /include/ /dts-v1/;
            / {
                     /* ... */
            };
    
    Will be processed successfully with the /include/ being effectively
    ignored: the '/dts-v1/' and ';' are recognized even in INCLUDE state,
    then the ';' transitions us to PROPNODENAME state, throwing away
    INCLUDE, and the previous state is never popped off the stack.  Or
    for another example this construct:
            foo /include/ = "somefile.dts"
    will be parsed as though it were:
            foo = /include/ "somefile.dts"
    Again, the '=' is scanned without leaving INCLUDE state, then the next
    string triggers the include logic.
    
    And finally, we use a different regexp for the string with the
    included filename than the normal string regexpt, which is also
    potentially weird.
    
    This patch, therefore, cleans up the lexical handling of the /include/
    directive.  Instead of the INCLUDE state, we instead scan the whole
    include directive, both keyword and filename as a single token.  This
    does mean a bit more complexity in extracting the filename out of
    yytext, but I think it's worth it to avoid the strageness described
    above.  It also means it's no longer possible to put a comment between
    the /include/ and the filename, but I'm really not very worried about
    breaking files using such a strange construct.

commit cdcb415851dc6c3e9550f27139c933fcaeb2d6a7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 26 11:03:49 2008 +1000

    dtc: Address an assortment of portability problems
    
    I've recently worked with a FreeBSD developer, getting dtc and libfdt
    working on FreeBSD.  This showed up a number of portability problems
    in the dtc package which this patch addresses.  Changes are as
    follows:
    
            - the parent_offset and supernode_atdepth_offset testcases
    used the glibc extension functions strchrnul() and strndupa().  Those
    are removed, using slightly longer coding with standard C functions
    instead.
    
            - some other testcases had a #define _GNU_SOURCE for no
    particular reason.  This is removed.
    
            - run_tests.sh has bash specific constructs removed, and the
    interpreter changed to /bin/sh.  This apparently now runs fine on
    FreeBSD's /bin/sh, and I've also tested it with both ash and dash.
    
            - convert-dtsv0-lexer.l has some extra #includes added.  These
    must have been included indirectly with Linux and glibc, but aren't on
    FreeBSD.
    
            - the endian handling functions in libfdt_env.h, based on
    endian.h and byteswap.h are replaced with some portable open-coded
    versions.  Unfortunately, these result in fairly crappy code when
    compiled, but as far as I can determine there doesn't seem to be any
    POSIX, SUS or de facto standard way of determining endianness at
    compile time, nor standard names for byteswapping functions.
    
            - some more endian handling, from testdata.h using the
    problematic endian.h is simply removed, since it wasn't actually being
    used anyway.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 11d7100ee5de7d6a6c4a76b735a1e624fbe8466a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 26 10:43:06 2008 +1000

    dtc: Use libfdt endian conversion functions in libfdt
    
    Following on from the last patch, which made dtc use the same endian
    conversion functions as libfdt, this patch makes ftdump use these
    functions as well.  This brings us down to a single set of endian
    handling functions in all of dtc and libfdt, so just one place to fix
    things.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c8c374b8565081da08e3d1d73df8ddb0d6a66ae3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jun 25 14:27:53 2008 +1000

    dtc: Use the same endian-conversion functions as libfdt
    
    Currently both libfdt and dtc define a set of endian conversion macros
    for accessing the device tree blob which is always big-endian.  libfdt
    uses names like cpu_to_fdt32() and dtc uses names like cpu_to_be32 (as
    the Linux kernel).  This patch switches dtc over to using the libfdt
    macros (including libfdt_env.h to supply them).  This has a couple of
    small advantages:
            - Removes some code duplication
            - Will make conversion a bit easier if we ever need to produce
              little-endian device tree blobs.
            - dtc no longer needs to pull in netinet/in.h simply for the
              ntohs() and ntohl() functions
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 53359016caf6db9ab2347517a323d6ba8eb6671e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jun 25 13:53:07 2008 +1000

    dtc: Use stdint.h types throughout dtc
    
    Currently, dtc defines Linux-like names for various fixed-size integer
    types.  There's no good reason to do this; even Linux itself doesn't
    use these names for externally visible things any more.  This patch
    replaces these with the C99 standardized type names from stdint.h.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f8e52fe6d87cadbaf0b440073fb9137bef36ee98
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 24 11:21:44 2008 +1000

    dtc: Testcase for /include/ directive
    
    This patch adds a testcase for the /include/ directive.  It assembles
    a sample dts file with many /include/ directives at a variety of
    different lexical / grammatical contexts.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f8bf4bfc8796b46e6086a52f0cd6c1f9ed58645a
Author: Jon Loeliger <jdl@jdl.com>
Date:   Thu Jun 19 11:33:20 2008 -0500

    Tag Version 1.2.0-rc1
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit e37ec7d5889fa04047daaa7a4ff55150ed7954d4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jun 11 11:58:39 2008 +1000

    dtc: Add support for binary includes.
    
    On Wed, Jun 04, 2008 at 09:26:23AM -0500, Jon Loeliger wrote:
    > David Gibson wrote:
    >
    >> But as I said that can be dealt with in the future without breaking
    >> compatibility.  Objection withdrawn.
    >>
    >
    > And on that note, I officially implore Scott to
    > re-submit his binary include patch!
    
    Scott's original patch does still have some implementation details I
    didn't like.  So in the interests of saving time, I've addressed some
    of those, added a testcase, and and now resubmitting my revised
    version of Scott's patch.
    
    dtc: Add support for binary includes.
    
    A property's data can be populated with a file's contents
    as follows:
    
    node {
            prop = /incbin/("path/to/data");
    };
    
    A subset of a file can be included by passing start and size parameters.
    For example, to include bytes 8 through 23:
    
    node {
            prop = /incbin/("path/to/data", 8, 16);
    };
    
    As with /include/, non-absolute paths are looked for in the directory
    of the source file that includes them.
    
    Implementation revised, and a testcase added by David Gibson
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Scott Wood <scottwood@freescale.com>

commit 050e6f0cff5b93a15fefbc0b554cad9a9ab5ea82
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 30 11:36:00 2008 +1000

    dtc: Add a testcase for 'reg' or 'ranges' in /
    
    This patch adds an extra testcase to dtc to ensure that the
    "reg_format" and "ranges_format" checks trigger as they should if a
    'reg' or 'ranges' property appears in the root node.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6aaee513ddcb9f1ee1a0c6294f129546c99d8b5c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 30 11:34:18 2008 +1000

    dtc: Fix some printf() format warnings when compiling 64-bit
    
    Currently, dtc generates a few gcc build warnings if built for a
    64-bit target, due to the altered type of uint64_t and size_t.  This
    patch fixes the warnings (without generating new warnings for 32-bit).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fc6e6f8d916b0d52b59a1c2a66f280e7fb7a80f5
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu May 29 16:16:21 2008 +1000

    dtc: Remove some small bashisms from test scripts
    
    Some of the helper scripts used to run testcases contain some
    constructs that are bashisms.  Or at least which don't work on dash,
    the minimal shell used as /bin/sh on recent Ubuntu systems.
    
    This patch removes these constructs so that the testsuite will pass
    "out of the box" on systems where /bin/sh is dash.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit aa1baab3cc184169cfb05dfe289b5179c8333e3c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue May 20 17:19:11 2008 +1000

    libfdt: Several cleanups to parameter checking
    
    This patch makes a couple of small cleanups to parameter checking of
    libfdt functions.
    
            - In several functions which take a node offset, we use an
    idiom involving fdt_next_tag() first to check that we have indeed been
    given a node offset.  This patch adds a helper function
    _fdt_check_node_offset() to encapsulate this usage of fdt_next_tag().
    
            - In fdt_rw.c in several places we have the expanded version
    of the RW_CHECK_HEADER() macro for no particular reason.  This patch
    replaces those instances with an invocation of the macro; that's what
    it's for.
    
            - In fdt_sw.c we rename the check_header_sw() function to
    sw_check_header() to match the analgous function in fdt_rw.c, and we
    provide an SW_CHECK_HEADER() wrapper macro as RW_CHECK_HEADER()
    functions in fdt_rw.c
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e4a64a8cd0205ee61ca164d1628026e5c960fbaa
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue May 20 14:50:50 2008 +1000

    dtc: Remove reference to dead Makefile variables
    
    Previous cleanups have removed the LIBFDT_CLEANFILES and
    DTC_CLEANFILES variables from the Makefiles.  However, they're still
    referenced by the Makefile.  This patch gets rid of these last
    vestiges.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a84c065f44ea0f4dcd75ae4ecb8dd1e25a5f87f7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu May 15 16:39:12 2008 +1000

    dtc: Add program to convert dts files from v0 to v1
    
    This patch adds a new utility program, convert-dtsv0, to the dtc
    sources.  This program will convert dts files from v0 to v1,
    preserving comments and spacing.  It also includes some heuristics to
    guess an appropriate base to use in the v1 output (so it will use hex
    for the contents of reg properties and decimal for clock-frequency
    properties, for example).  They're limited and imperfect, but not
    terrible.
    
    The guts of the converter program is a modified version of the lexer
    from dtc itself.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 548767f42eb00a2bac6f2a1361b7fd49f7b76908
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 16 13:22:57 2008 +1000

    dtc: Rework handling of boot_cpuid_phys
    
    Currently, dtc will put the nonsense value 0xfeedbeef into the
    boot_cpuid_phys field of an output blob, unless explicitly given
    another value with the -b command line option.  As well as being a
    totally unuseful default value, this also means that dtc won't
    properly preserve the boot_cpuid_phys field in -I dtb -O dtb mode.
    
    This patch reworks things to improve the boot_cpuid handling.  The new
    semantics are that the output's boot_cpuid_phys value is:
            the value given on the command line if -b is used
    otherwise
            the value from the input, if in -I dtb mode
    otherwise
            0
    
    Implementation-wise we do the following:
            - boot_cpuid_phys is added to struct boot_info, so that
    structure now contains all of the blob's semantic information.
            - dt_to_blob() and dt_to_asm() output the cpuid given in
    boot_info
            - dt_from_blob() fills in boot_info based on the input blob
            - The other dt_from_*() functions just record 0, but we can
    change this easily if e.g. we invent a way of specifying the boot cpu
    in the source format.
            - main() overrides the cpuid in the boot_info between input
    and output if -b is given
    
    We add some testcases to check this new behaviour.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a742aade6a28fbebf7a66448b40b983549897253
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 16 13:22:09 2008 +1000

    dtc: Make dt_from_blob() open its own input file, like the other input formats
    
    Currently, main() has a variable for the input file.  It used to be
    that main() would open the input based on command line arguments
    before passing it to the dt_from_*() function.  However, only
    dt_from_blob() uses this.  dt_from_source() opens its own file, and
    dt_from_fs() interprets the argument as as a directory and does its
    own opendir() call.
    
    Furthermore, main() opened the file with dtc_open_file() but closed it
    with a direct call to fclose().
    
    Therefore, to improve the interface consistency between the
    dt_from_*() functions, make dt_from_blob() open and close its own
    files like the other dt_from_*() functions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c26015443acaefe0780a3209932e5534cd84a330
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 16 13:22:35 2008 +1000

    dtc: Trivial formatting fixes
    
    This patch fixes some trivial indentation and brace/bracket style
    problems.

commit 6a6c972cdf9e608435777dbdab02197b5c5ca759
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 16 13:20:41 2008 +1000

    dtc: Clean up included Makefile fragments
    
    Currently the Makefile.dtc and Makefile.libfdt fragments include a
    number of things that seemed like they might be useful for other
    projects embedding the pieces, or for a make dist target.
    
    Well, we have no make dist target, it's become fairly unclear that
    these things would actually be useful to embedders (the kernel
    certainly doesn't use them), and it's a bunch of stuff with no current
    users.
    
    This patch, therefore, removes a bunch of unused definitions from the
    Makefile fragments.  It also removes a dependency declared in
    Makefile.libfdt (of libfdt.a on the constituent .o files) which was
    incorrect (wrong path), and if corrected would be redundant with the
    similar dependency in the top-level makefile.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 35aa1a273bc407271f8a1e7b91989b9e6787879c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri May 16 13:21:51 2008 +1000

    dtc: Simplify error handling for unparseable input
    
    Currently, main() tests if it got a valid input tree from whichever
    dt_from_*() function it invoked and if not, die()s.  For one thing,
    this test has, for no good reason, three different ways for those
    functions to communicate a failure to provide input (bi NULL, bi->dt
    NULL, or bi->error non-zero).  For another, in every case save one, if
    the dt_from_*() functions are unable to provide input they will
    immediately die() (with a more specific error message) rather than
    proceeding to the test in main().
    
    Therefore, this patch removes this test, making the one case that
    could have triggered it (in dt_from_source()) call die() directly
    instead.  With this change, the error field in struct boot_info is now
    unused, so remove it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1577696b6d09acafa055957ecc6071b305d6fe9d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 18 14:04:19 2008 +1100

    dtc: Change exit code for usage message
    
    If dtc's command line arguments are invalid, it prints a usage message
    and returns exit code 2.  That's the same exit code as for a failed
    check, which is potentially confusing if running dtc from an automated
    harness.  Therefore this patch changes the usage exit code to 3.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2192d46dfdbb05cea13c853f7579b1386cdc4380
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 17 17:03:47 2008 +1100

    dtc: Cleanup \nnn and \xNN string escape handling
    
    Several small cleanups to the handling of octal and hex string
    escapes:
            - Use strncmp() instead dof what were essentially open-coded
              versions of the same, with short fixed lengths.
            - The call path to get_oct_char() means an empty escape is not
              possible.  So replace the error message in this case with an
              assert.
            - Use die() instead of a non-fatal error message if
              get_hex_char() is given an empty escape.  Change error
              message to close match gcc's in the same circumstance.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3bdd393965aa1f35c293074e6701b9c550aeae54
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Mar 11 10:47:14 2008 +1100

    dtc: Add some documentation for the dts formta
    
    This patch adds a dts-format.txt in the Documentation directory, with
    an introduction to the dtc source format.  Note that this
    documentation is also going into the upcoming ePAPR specification.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1a9468c9a0c0bd6e3ff1b9bff7547dd7e7aa9bb7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 6 15:48:04 2008 +1100

    dtc: Abolish asize field of struct data
    
    The asize field in struct data is a hangover from the early days when
    a struct data was sometimes allowed to refer to a static chunk of
    memory rather than a malloc()ed block.
    
    That's long gone, since the lifetime issues were far more trouble than
    it was worth, so get rid of the asize field.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8a88ad8badfe54d91b35c5da25889de0db54f43e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 6 12:45:41 2008 +1100

    dtc: Remove ugly include stack abuse
    
    Currently, dt_from_source() uses push_input_file() to set up the
    initial input file for the lexer.  That sounds sensible - put the
    outermost input file at the bottom of the stack - until you realise
    that what it *actually* does is pushes the current, uninitialized,
    lexer input state onto the stack, then sets up the new lexer input.
    
    That necessitates an extra check in pop_input_file(), rather than
    signalling termination in the natural way when the include stack is
    empty, it has to check when it pops the bogus uninitialized state off
    the stack.  Ick.
    
    With that fixed, push_input_file(), pop_input_file() and
    incl_file_stack itself become local to the lexer, so make them static.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f7ea3708c38bd38851baafa83e98d95602e53cbc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 6 12:16:55 2008 +1100

    dtc: Make dtc_open_file() die() if unable to open requested file
    
    All current callers of dtc_open_file() immediately die() if it returns
    an error.  In a non-interative tool like dtc, it's hard to see what
    you could sensibly do to recover from a failure to open an input file
    in any case.
    
    Therefore, make dtc_open_file() itself die() if there's an error
    opening the requested file.  This removes the need for error checking
    at the callsites, and ensures a consistent error message in all cases.
    While we're at it, change the rror message from fstree.c when we fail
    to open the input directory to match dtc_open_file()'s error message.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c2e4d61f83af4233c3270e4f1ec1da01d90466e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 5 16:22:41 2008 +1100

    dtc: Testcases for input handling
    
    This patch adds some testcases checking corner cases of dtc's input
    file handling.  Specifically it checks that dtc works correctly when
    given input via stdin, and it checks that dtc fails gracefully if
    given a nonexistent input file (or directory, in the case of -Ifs
    mode).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 68fe10ba4efc86c4bd388f5ba68d1b3e2e9e3be2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 5 16:01:55 2008 +1100

    dtc: Assorted improvements to test harness
    
    This patch makes several small improvements to the test harness.
    
    * An altered way of invoking shell script testcases from run_tests.sh
      means scripts no longer need to me marked executable in the
      repository to work properly.
    
    * dtc.sh never did anything that was really dtc specific - with the
      exception of messages, it would work equally well for any binary
      that returns 0 in the successful case.  Therefore, generalise dtc.sh
      and fold it into run_tests.sh so we don't need a separate script any
      more.
    
    * Tweak various things so that the valgrind options are properly
      propagated down to invoke dtc under valgrind when called via wrapper
      scripts.
    
    * Tweak the valgrind suppressions to work properly on a wider range of
      systems (this was necessary on my machine running Ubuntu Hardy).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6b8e05626a0011fd235dcbd9ccd44fd731a414c0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 5 11:47:54 2008 +1100

    dtc: Make eval_literal() static
    
    eval_literal() is used only in the parser, so make it a static
    function.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b2de518b80eb01b1004e137ff2435b03dc40018d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 29 16:51:28 2008 +1100

    dtc: Make -I dtb mode use fill_fullpaths()
    
    At present -I dts and -I fs modes both use the fill_fullpaths() helper
    function to fill in the fullpath and basenamelen fields of struct
    node, which are useful in later parts of the code.  -I dtb mode,
    however, fills these in itself.
    
    This patch simplifies flattree.c by making -I dtb mode use
    fill_fullpaths() like the others.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5ac97df149a171d63804a889ffcaa85e0feb400b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Feb 28 20:58:28 2008 +1100

    dtc: Use for_each_marker_of_type in asm_emit_data()
    
    For no good reason, asm_emit_data() open-codes the equivalent of the
    for_each_marker_of_type macro.  Use the macro instead.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a266e5c1e105487795aa2e6fe0b52cfdb8a0a71d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Feb 28 20:55:37 2008 +1100

    dtc: Test and fix conversion to/from old dtb versions
    
    This patch adds testcases which test dtc when used to convert between
    different dtb versions.  These tests uncovered a couple of bugs
    handling old dtb versions, which are also fixed.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d028e84140317682140602dcc87dc3aa439e35cb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Feb 28 20:53:00 2008 +1100

    dtc: Strip redundant "name" properties
    
    If an input device tree has "name" properties which are correct, then
    they are redundant (because they can be derived from the unit name).
    Therefore, extend the checking code for correctness of "name"
    properties to remove them if they are correct.  dtc will still insert
    name properties in the output if that's of a sufficiently old version
    to require them.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2b3a96761afa402ed6df4bab243a54e47ffff935
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Feb 28 16:42:15 2008 +1100

    dtc: Fix indentation of fixup_phandle_references
    
    Somehow the indentation of this function is messed up - 7 spaces
    instead of 1 tab (probably a bad copy paste from a patch file).  This
    patch fixes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fa5b520ccb5e8da8d67ebc1926416753684f4e70
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 27 13:45:13 2008 +1100

    dtc: Implement checks for the format of node and property names
    
    This patch adds checks to the checking framework to verify that node
    and property names contain only legal characters, and in the case of
    node names there is at most one '@'.
    
    At present when coming from dts input, this is mostly already ensured
    by the grammer, however putting the check later means its easier to
    generate helpful error messages rather than just "syntax error".  For
    dtb input, these checks replace the older similar check built into
    flattree.c.
    
    Testcases for the checks are also implemented.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7c635dcb2f43529bbe7903f5a6ce56984d21b964
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Feb 26 16:44:29 2008 +1100

    dtc: Fix error reporting in push_input_file()
    
    Error reporting in push_input_file() is a mess.  One error results in
    a message and exit(1), others result in a message and return 0 - which
    is turned into an exit(1) at one callsite.  The other callsite doesn't
    check errors, but probably should.  One of the error conditions gives
    a message, but can only be the result of an internal programming
    error, not a user error.
    
    So.  Clean that up by making push_input_file() a void function, using
    die() to report errors and quit.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2512a7eb5c755aeb92222748aa6a441c6840325c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 18 18:09:04 2008 +1100

    libfdt: Remove no longer used code from fdt_node_offset_by_compatible()
    
    Since fdt_node_offset_by_compatible() was converted to the new
    fdt_next_node() iterator, a chunk of initialization code became
    redundant, but was not removed by oversight.  This patch cleans it up.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8a4e75049dd0543aab4f286fafa41f0b404c59b4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 18 18:06:31 2008 +1100

    libfdt: Trivial cleanup for CHECK_HEADER)
    
    Currently the CHECK_HEADER() macro is defined local to fdt_ro.c.
    However, there are a handful of functions (fdt_move, rw_check_header,
    fdt_open_into) from other files which could also use it (currently
    they open-code something more-or-less identical).  Therefore, this
    patch moves CHECK_HEADER() to libfdt_internal.h and uses it in those
    places.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a90b5905fede1ebd2d6365103cc1d9b78f76217c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 18 16:09:25 2008 +1100

    libfdt: More tests of NOP handling behaviour
    
    In light of the recently discovered bug with NOP handling, this adds
    some more testcases for NOP handling.  Specifically, it adds a helper
    program which will add a NOP tag after every existing tag in a dtb,
    and runs the standard battery of tests over trees mangled in this way.
    
    For now, this does not add a NOP at the very beginning of the
    structure block.  This causes problems for libfdt at present, because
    we assume in many places that the root node's BEGIN_NODE tag is at
    offset 0.  I'm still contemplating what to do about this (with one
    option being simply to declare such dtbs invalid).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d8b69426662f29f0cdaf67d380a0b366ba420abd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Feb 15 15:14:16 2008 +1100

    dtc: Fold comment handling test into testsuite
    
    For ages dtc has included a sample dts, comment-test.dts, for checking
    various lexical corner cases in comment processing.  In fact, it
    predates the automated testsuite, and has never been integrated into
    it.  This patch addresses this oversight, folding the comment handling
    test in with the rest of the testsuite.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 089adb9964a222499eb204198b579c231c59c42f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Feb 14 16:50:34 2008 +1100

    libfdt: Fix NOP handling bug in fdt_add_subnode_namelen()
    
    fdt_add_subnode_namelen() has a bug if asked to add a subnode to a
    node which has NOP tags interspersed with its properties.  In this
    case fdt_add_subnode_namelen() will put the new subnode before the
    first NOP tag, even if there are properties after it, which will
    result in an invalid blob.
    
    This patch fixes the bug, and adds a testcase for it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fc9769ac2bae8a32d5d277007d22414c4516b02b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Feb 12 11:58:31 2008 +1100

    libfdt: Add and use a node iteration helper function.
    
    This patch adds an fdt_next_node() function which can be used to
    iterate through nodes of the tree while keeping track of depth.  This
    function is used to simplify the iteration code in a lot of other
    functions, and is also exported for use by library users.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 202863e4dd681d17c06a82943f49485bf7860633
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Jan 24 10:16:07 2008 -0600

    Tag Version 1.1.0
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 0f635df874540ee9ef5bf7137ca2a2d0cc5d807b
Author: Scott Wood <scottwood@freescale.com>
Date:   Fri Jan 11 13:14:57 2008 -0600

    Remove const from dtc_file::dir.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 82b327d38062cdb4e5628856f9b440ad6c96e7f8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jan 11 14:55:05 2008 +1100

    libfdt: Add fdt_set_name() function
    
    This patch adds an fdt_set_name() function to libfdt, mirroring
    fdt_get_name().  This is a r/w function which alters the name of a
    given device tree node.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7364cc79b5fa11e416dce01802139bc87d690118
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Jan 10 09:09:44 2008 -0600

    Tag Version 1.1.0-rc1
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit b1a6719aa600e2459ea954c6f92b2090c29c3d90
Author: Scott Wood <scottwood@freescale.com>
Date:   Mon Jan 7 14:27:51 2008 -0600

    Preserve scanner state when /include/ing.
    
    This allows /include/s to work when in non-default states,
    such as PROPNODECHAR.
    
    We may want to use state stacks to get rid of BEGIN_DEFAULT() altogether...
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 42107f8bba994f718594dd670a937861d40f425d
Author: Scott Wood <scottwood@freescale.com>
Date:   Mon Jan 7 14:27:36 2008 -0600

    Convert malloc() uses to xmalloc().
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 3c3ecaacda4f7ef201d02682382a64674661cae3
Author: Scott Wood <scottwood@freescale.com>
Date:   Fri Jan 4 15:10:47 2008 -0600

    Remove \n from yyerror() call.
    
    The \n is provided by yyerror().
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 5695e99d5f6418f8f5b990bdcb1f153935d0fb06
Author: Scott Wood <scottwood@freescale.com>
Date:   Fri Jan 4 15:10:45 2008 -0600

    Handle absolute pathnames correctly in dtc_open_file.
    
    Also, free file->dir when freeing file.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 7d24bd0a725264495edb679477d14a87145bbbf8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jan 4 13:43:24 2008 +1100

    dtc/libfdt: Add README clarifying licensing
    
    The fact that the dtc and libfdt are distributed together, but have
    different licenses, can be a bit confusing.  Several people have
    enquired as to what the deal is with the libfdt licensing, so this
    patch adds a README clarifying the situation with a rationale.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit ad4f54ae2b67ddcd4d128fd4b5c21c66a640d237
Author: Scott Wood <scottwood@freescale.com>
Date:   Thu Jan 3 17:43:33 2008 -0600

    Return a non-zero exit code if an error occurs during dts parsing.
    
    Previously, only failure to parse caused the reading of the tree to fail;
    semantic errors that called yyerror() but not YYERROR only emitted a message,
    without signalling make to stop the build.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 910efac4b49f43cb1b66eef5aa0bbd020920bf2a
Author: Scott Wood <scottwood@freescale.com>
Date:   Thu Jan 3 17:43:31 2008 -0600

    Look for include files in the directory of the including file.
    
    Looking in the diretory dtc is invoked from is not very useful behavior.
    
    As part of the code reorganization to implement this, I removed the
    uniquifying of name storage -- it seemed a rather dubious optimization
    given likely usage, and some aspects of it would have been mildly awkward
    to integrate with the new code.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit f77fe6a20e75a2289faf86f9b6b529044a07b072
Author: Scott Wood <scottwood@freescale.com>
Date:   Thu Jan 3 17:43:29 2008 -0600

    Add yyerrorf() for formatted error messages.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

commit 3bb78bfd9758ff726ca80df2cb554a2f2df798a3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jan 3 15:48:43 2008 +1100

    dtc: Remove header information dumping
    
    Currently, when used in -Idtb mode, dtc will dump information about
    the input blob's header fields to stderr.  This is kind of ugly, and
    can get in the way of dtc's real output.
    
    This patch, therefore, removes this.  So that there's still a way of
    getting this information for debugging purposes, it places something
    similar to the removed code into ftdump, replacing the couple of
    header fields it currently prints with a complete header dump.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3e516d961a45a2a410a9dc8f61fbdd62641b5ca0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 19 16:07:47 2007 +1100

    dtc: Update TODO files
    
    This patch makes a bunch of updates to the TODO files for dtc and
    libfdt, some of them rather overdue.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 08c0be206d5d6b035db11048d19be33216332f2b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 19 11:04:33 2007 +1100

    dtc: Add missing copyright notice for dumptrees.c
    
    When I released libfdt, I forgot to add a copyright notice to
    dumptrees.c (probably because the program is so trivial).  Apparently
    the lack causes trouble for Debian, so this patch adds one.  I've gone
    through the git history and double checked that no-one has touched
    this file except me (and I barely have myself since its initial
    commit).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 376ab6f2ed5aac107ef197ff2ec401bf2a8239bd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 18 14:54:38 2007 +1100

    dtc: Remove remaining old-style checks
    
    The remaining old-style tree checking code: check_root(), check_cpus()
    and check_memory() really aren't that useful.  They mostly check for
    the presence of particular nodes and properties.  That's inherently
    prone to false-positives, because we could be dealing with an
    artificial tree (like many of the testcases) or it could be expected
    that the missing properties are filled in by a bootloader or other
    agent.
    
    If any of these checks really turns out to be useful, we can
    reimplement them later in a better conceived way on top of the new
    checking infrastructure.  For now, just get rid of them, removing the
    last vestiges of the old-style checking code (hoorah).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d6f9b62fe1263c8266ba899144f29424e1c7a5b0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 17 16:39:39 2007 +1100

    dtc: Don't build tests as part of "all"
    
    Currently "make all" for dtc will build (but not run) the testcase
    binaries.  This is a problem for cross compiles, because building the
    tests will attempt to run the dumptrees utility on the host system,
    which won't work if it's cross-compiled of course.
    
    Although it would be possible to separately build host binaries,
    there's not a lot of value in doing so since we don't have a facility
    for cross-executing the testsuite anyway.
    
    Therefore, remove the tests from the "all" target.  It will still, of
    course, be build as a prerequisite to "make check" which will run the
    testsuite.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 30f7fbfbe9f6f9546f641c80a35acb01e45914b3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 17 14:42:07 2007 +1100

    libfdt: Add more documentation (patch the seventh)
    
    This patch adds more documenting comments to libfdt.h.  Specifically,
    these document the read/write functions (not including fdt_open_into()
    and fdt_pack(), for now).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f819a4e21dddf3a1c43c94a1c68f08c10b81b275
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 17 14:41:52 2007 +1100

    libfdt: Add more documentation (patch the sixth)
    
    This patch adds some more documenting comments to libfdt.h.
    Specifically this documents all the write-in-place functions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a68cbc09ffa50fa1d0a3fbea531afefcbd20baae
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 18:08:20 2007 +1100

    dtc: Fix silly typo in dtc-checkfails.sh
    
    Too much C coding makes for dumb errors in shell.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b7c5eaf3ee93330883ed69c1aae362d039ce5dda
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 18:08:03 2007 +1100

    dtc: Allow gcc format warnings for check_msg()
    
    check_msg() takes printf() like arguments, so tell gcc to produce
    printf() like warnings for it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0d9d10184b03e352da144fb7e640016bf98fd615
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 15:37:45 2007 +1100

    dtc: Make dtc-checfails.sh script catch deaths-by-signal
    
    Since commit 5ba0086bfd0fa6ab25f7ce1870417301a26c104f, the
    dtc-checkfails.sh script does not check the return code from dtc.
    That's reasonable, since depending on the checks we're testing, dtc
    could either complete succesfully or return an error.
    
    However, it's never right for dtc to SEGV or otherwise be killed by a
    signal.  So the script should catch that, and fail the testcase if it
    happens.  This patch implements this behaviour.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3476f9608bd22803c64d5a4ede118784debd0b18
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 14:38:26 2007 +1100

    dtc: Reinstate full old-style reference-to-path for v0 dts files
    
    Commit 7c44c2f9cb1cc2df7aacd13decfc4e64b73d1730 broke backwards
    compatibility more badly than I realised.  Contrary to what I thought
    there are in-kernel, in-use dts files which relied on
    references-to-path with paths including a comma, which no longer
    compile after that commit.
    
    So, this patch reinstates full support for bare references-to-path in
    dts-v0 input.  This means there will be some rather surprising lexical
    corner cases when using path-expanded references in v0 files.  But,
    since path-expanded references are new, v0 files shouldn't typically
    be using them anyway.  If the corner cases cause a problem, you can
    always convert to dts-v1 which handles the lexical issues here more
    nicely.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e4ffc1443d23d57babde8413f53e001e84610c4f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 14:06:11 2007 +1100

    dtc: Convert check for obsolete /chosen property
    
    This converts the test for the obsolete "interrupt-controller"
    property in /chosen to the new framework.  That was the only thing
    left in the old-style check_chosen() function, so that function is
    removed, too.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7e089d9473989bc6dadfdfa81fa3fc029abf26db
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 7 14:05:55 2007 +1100

    dtc: Convert #address-cells and #size-cells related checks
    
    This patch converts checks related to #address-cells and #size-cells
    to the new framework.  Specifically, it reimplements the check that
    "reg" properties have a valid size based on the relevant
    #address-cells and #size-cells values.  The new implementation uses
    the correct default value, unlike the old-style check which assumed
    the values were inherited by default.
    
    It also implements a new, similar test for "ranges" properties.
    
    Finally, since relying on the default values of these variables is
    considered not-good-practice these days, it implements a "style" check
    which will give a warning if the tree ever relies on the default
    values (that is if any node with either "reg" or "ranges" appears
    under a parent which has no #address-cells or #size-cells property).

commit e110920707ecedd7f1f4426dd4240d51c5ce0dd0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 6 17:04:04 2007 +1100

    dtc: Remove obsolete check_properties() function
    
    After the last couple of patches converting various old-style semantic
    checks to the new framework, the only thing that the old-style
    check_properties() function still checks is that the size of "reg"
    properties is a multiple of the cell size.
    
    This patch removes check_properties() and all related code and data.
    The check on the size of reg properties is folded into the existing
    check for the format of "reg" properties (still old-style for the time
    being).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit faf037f0ef294412a3bb04be4032bf2f008a5945
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 6 17:01:07 2007 +1100

    dtc: Migrate "string property" checks to new framework
    
    This patch converts to the new tree checking framework those checks
    which verify that certain properties (device_type, model) have a
    string value, when present.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit c21acabc40ff1edf8c01f4452c79eaf338b4c13e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 6 16:59:45 2007 +1100

    dtc: Migrate "one cell" checks to new framework
    
    This patch converts to the new tree checking framework those checks
    which verify that certain properties (#address-cells and #size-cells)
    are exactly one cell in size, when present.
    
    We also drop the old-style check for "linux,phandle" being one cell,
    since that is already implied in the the existing new-style checks on
    the linux,phandle property.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5ba0086bfd0fa6ab25f7ce1870417301a26c104f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 6 16:56:55 2007 +1100

    dtc: More detailed testing of tree checks
    
    This patch modifies the dtc-checkfails.sh testcase wrapper so that
    instead of testing just that dtc fails with a particular error code on
    the sample input, it scans dtc's stderr output looking for a message
    that dtc failed a specific check or checks.  This has several advantages:
            - It means we more precisely check dtc's checking behaviour
            - It means we can check for generation of warnings using the
    same script
            - It means we can test cases where dtc should generate
    multiple errors or warnings from different checks
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d6060bd231b9cf5d22af4b850438b32016da4af8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 6 13:07:50 2007 +1100

    dtc: Remove space from flex command line
    
    Author: Geoff Levand <geoffrey.levand@am.sony.com>
    
    Apparently some versions of flex don't correctly parse the -o
    parameter, if there's a space between the -o and its argument.  So,
    this patch removes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit efbbef8e4f86f8043760f1e48b25ab2795ba3524
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 5 10:43:50 2007 +1100

    dtc: Implement path references
    
    This patch extends dtc syntax to allow references (&label, or
    &{/full/path}) directly within property definitions, rather than
    inside a cell list.  Such references are expanded to the full path of
    the referenced node, as a string, instead of to a phandle as
    references within cell lists are evaluated.
    
    A testcase is also included.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 80c72a81cffdfde0965853d1ea834352b3e91f89
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Tue Dec 4 17:36:08 2007 -0600

    Fix padding options
    
    "Add an option to pad the blob that is generated" broke the padding
    support.  We were updating the fdt header after writing it.
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

commit c048102f5bcafb9a316bd7532fe3958c99af6b74
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 5 10:27:04 2007 +1100

    dtc: Generate useful error message for properties after subnodes
    
    On several occasions, I've accidentally put properties after subnodes
    in a dts file.  I've then spent ages thinking that the resulting
    syntax error was because of something else.
    
    This patch arranges for this specific syntax error to generate a more
    specific and useful error message.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2b67c632df15ab57e5bf1a59f23cbcac8cda6acd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 5 09:50:25 2007 +1100

    dtc: Trivial lexer cleanups
    
    This patch applies a couple of tiny cleanups to the lexer.  The
    not-very-useful 'WS' named pattern is removed, and the debugging
    printf() for single character tokens is moved to the top of the
    action, which results in less confusing output when LEXDEBUG is
    switched on (because it goes before the printf()s for possible
    resulting lexer state changes).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 459c955cca6adfa393b9279ee595c60e199dbffe
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 5 09:40:23 2007 +1100

    dtc: Convert "name" property checking to new infrastructure
    
    This patch removes the old-style checking code for the "name" property
    - i.e. verifying that the "name" property, if present, matches the
    node name.  It replaces it with a pair of more-or-less equivalent
    checks in the new checking framework.
    
    This also promotes this check to a "structural" check, or at least an
    error-rather-than-warning test, since the structural/semantic
    distinction doesn't really apply in the new framework.
    
    A testcase for the check is also added.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d06cda32f6428601b4b2278a0286aa2b7a172eb1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Dec 5 09:34:53 2007 +1100

    dtc: Fix FAIL() macro varargs
    
    The way the checking subsystem FAIL() macro is currently implemented
    it must take at least one paramater after the format string.  This
    patch corrects the problem.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 501e21cc6f1a7eca5954f5b0611d9853a7b9367e
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Tue Dec 4 10:33:20 2007 -0600

    Print out the total size as part of ftdump
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

commit 92cb9a25b1a9117f4dacb0bce8c16b90b73b8698
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 4 14:26:15 2007 +1100

    dtc: Add many const qualifications
    
    This adds 'const' qualifiers to many variables and functions.  In
    particular it's now used for passing names to the tree accesor
    functions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2d72816ccfdcfd8039ab0b8883f9eeac895984bb
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 4 11:49:43 2007 +1100

    dtc: Fix uninitialized use of structure_ok
    
    My rework of the tree checking code introduced a potentially nasty bug
    - it uses the structure_ok variable uninitialized.  This patch fixes
    the problem.  It's a fairly ugly bandaid approach, but the ugly will
    disappear once future patches have folded the semantic checks into the
    new framework.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2b7dc8dce549ad72ad437b254bf756d7ba4c2a5a
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Wed Nov 28 10:21:12 2007 -0600

    Add an option to pad the blob that is generated
    
    There are times when we need extra space in the blob and just want
    to have it added on w/o know the exact size to make it.
    
    The padding and min size options are mutually exclusive.
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

commit 7c44c2f9cb1cc2df7aacd13decfc4e64b73d1730
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 22 17:10:07 2007 +1100

    dtc: Fix some lexical problems with references
    
    The recent change to the lexer to only recognize property and node
    names in the appropriate context removed a number of lexical warts in
    our language that would have gotten ugly as we add expression support
    and so forth.
    
    But there's one nasty one remaining: references can contain a full
    path, including the various problematic node name characters (',', '+'
    and '-', for example).  This would cause trouble with expressions, and
    it also causes trouble with the patch I'm working on to allow
    expanding references to paths rather than phandles.  This patch
    therefore reworks the lexer to mitigate these problems.
    
            - References to labels cause no problems.  These are now
    recognized separately from references to full paths.  No syntax change
    here.
    
            - References to full paths, including problematic characters
    are allowed by "quoting" the path with braces
    e.g. &{/pci@10000/somedevice@3,8000}.  The braces protect any internal
    problematic characters from being confused with operators or whatever.
    
            - For compatibility with existing dts files, in v0 dts files
    we allow bare references to paths as before &/foo/bar/whatever - but
    *only* if the path contains no troublesome characters.  Specifically
    only [a-zA-Z0-9_@/] are allowed.
    
    This is an incompatible change to the dts-v1 format, but since AFAIK
    no-one has yet switched to dts-v1 files, I think we can get away with
    it.  Better to make the transition when people to convert to v1, and
    get rid of the problematic old syntax.
    
    Strictly speaking, it's also an incompatible change to the v0 format,
    since some path references that were allowed before are no longer
    allowed.  I suspect no-one has been using the no-longer-supported
    forms (certainly none of the kernel dts files will cause trouble).
    We might need to think about this harder, though.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f29454eb7e615ef52a4e61f95248c32dc1f7625b
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Wed Nov 28 09:39:08 2007 -0600

    Fix whitespace in libfdt/fdt.h
    
    Take from u-boot whitespace fixup of the file
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

commit dc941774e228779562379a221ddc489d289e8513
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 22 14:39:23 2007 +1100

    dtc: Merge refs and labels into single "markers" list (v2)
    
    Currently, every 'data' object, used to represent property values, has
    two lists of fixup structures - one for labels and one for references.
    Sometimes we want to look at them separately, but other times we need
    to consider both types of fixup.
    
    I'm planning to implement string references, where a full path rather
    than a phandle is substituted into a property value.  Adding yet
    another list of fixups for that would start to get silly.  So, this
    patch merges the "refs" and "labels" lists into a single list of
    "markers", each of which has a type field indicating if it represents
    a label or a phandle reference.  String references or any other new
    type of in-data marker will then just need a new type value - merging
    data blocks and other common manipulations will just work.
    
    While I was at it I made some cleanups to the handling of fixups which
    simplify things further.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b16a2bd89dbf109b9c8d1c9e047b9afa72af6d2f
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 22 14:38:07 2007 +1100

    dtc: Flexible tree checking infrastructure (v2)
    
    dtc: Flexible tree checking infrastructure
    
    Here, at last, is a substantial start on revising dtc's infrastructure
    for checking the tree; this is the rework I've been saying was
    necessary practically since dtc was first release.
    
    In the new model, we have a table of "check" structures, each with a
    name, references to checking functions, and status variables.  Each
    check can (in principle) be individually switched off or on (as either
    a warning or error).  Checks have a list of prerequisites, so if
    checks need to rely on results from earlier checks to make sense (or
    even to avoid crashing) they just need to list the relevant other
    checks there.
    
    For now, only the "structural" checks and the fixups for phandle
    references are converted to the new mechanism.  The rather more
    involved semantic checks (which is where this new mechanism will
    really be useful) will have to be converted in future patches.
    
    At present, there's no user interface for turning on/off the checks -
    the -f option now forces output even if "error" level checks fail.
    Again, future patches will be needed to add the fine-grained control,
    but that should be quite straightforward with the infrastructure
    implemented here.
    
    Also adds a testcase for the handling of bad references, which catches
    a bug encountered while developing this patch.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 67b6b33b9b413a450a72135b5dc59c0a1e33e647
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 21 11:56:14 2007 +1100

    dtc: Add valgrind support to testsuite
    
    This patch adds some options to the run_tests.sh script allowing it to
    run all the testcases under valgrind to check for pointer corruption
    bugs and memory leaks.  Invoking "make checkm" will run the testsuite
    with valgrind.
    
    It include a mechanism for specifying valgrind errors to be suppressed
    on a per-testcase basis, and adds a couple of such suppression files
    for the mangle-layout and open_pack testcases which dump for use by
    other testcases a buffer which may contain uninitialized sections.  We
    use suppressions rather than initializing the buffer so that valgrind
    will catch any internal access s to the uninitialized data, which
    would be a bug.
    
    The patch also fixes one genuine bug caught by valgrind -
    _packblocks() in fdt_rw.c was using memcpy() where it should have been
    using memmove().
    
    At present the valgrinding won't do anything useful for testcases
    invoked via a shell script - which includes all the dtc testcases.  I
    plan to fix that later.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3ce53633871584ad93528fdf5cdcb939bb24ffc3
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 21 11:29:18 2007 +1100

    dtc: Remove some redundant testcases
    
    This patch removes a number of testcases from the testsuite that are
    extremely unlikely to find any bugs that won't be found by the other
    tests.  This speeds up the testsuite.
    
            - Both loops across the various tree block layouts run the
    tree1_tests on the basic mangled tree.  This is completely redundant,
    so remove the second copy. This removes 456 testcases.
    
            - We currently run tree1_tests on various trees manipulated by
    move_and_save.  We replace those with just a dtbs_equal_ordered test
    to check that the manipulated tree is equal to the original.  What
    we're testing here is that fdt_move() operates correctly - it's very
    unlikely it would succeed well enough for the ordered_equal test to
    succeed, but the tree1_tests would fail on the result.  This removes
    162 testcases.
    
            - Currently we re-ordered with mangle-layout both the basic
    test_tree1.dtb and sw_tree1.test.dtb.  Since we've already checked
    that these dtbs are equivalent with dtbs_ordered_equal, it's very
    unlikely that the tests would fail on one but not the other.
    Therefore reduce this to only using test_tree1.dtb.  This removes 828
    testcases.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8eaf5e358366017aa2e846c5038d1aa19958314e
Author: Jon Loeliger <jdl@freescale.com>
Date:   Tue Nov 20 09:14:03 2007 -0600

    Add a script that compares an "old" and "new" dtc results.
    
    Lots of room for improvement here.  Command line options, etc.
    The script iterates over a hard-coded list of kernel DTS files.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit b2e61bde9fa50428380f7d9e170781499fe462f1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 20 22:14:12 2007 +1100

    dtc: Don't use env(1) in testsuite
    
    The run_tests.sh script currently invokes the testcase binaries via
    env(1).  This behaviour is inherited from the libhugetlbfs testsuite
    which uses this approach to easily set various configuration
    environment variables in testcases.
    
    We don't use that for dtc, and are unlikely to ever want to.
    Therefore this patch removes that technique, which substantially
    speeds up the testsuite.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0d6ade254773aa4798fed1b2f1639ea2b8bdeb89
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 20 16:24:23 2007 +1100

    dtc: Add testcases for tree checks
    
    This patch adds a group of testcases to check that dtc correctly
    rejects trees with various structural errors.
    
    To make things easier to test, we change dtc so that failing checks
    (as opposed to other errors) result in exit code 2.
    
    This patch also fixes an embarrasing bug uncovered by these new tests:
    check_phandles() worked out if the tree's phandles were valid, then
    throws that information away and returns success always.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2cf86939aff2692098396e7f25ce299e7195fa12
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 19 17:26:22 2007 +1100

    libfdt: Abolish fdt_offset_ptr_typed()
    
    The fdt_offset_ptr_typed() macro seemed like a good idea at the time.
    However, it's not actually used all that often, it can silently throw
    away const qualifications and it uses a gcc extension (typeof) which
    I'd prefer to avoid for portability.
    
    Therefore, this patch gets rid of it (and the fdt_offset_ptr_typed_w()
    variant which was never used at all).  It also makes a few variables
    const in testcases, which always should have been const, but weren't
    caught before because of the aforementioned silent discards.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9521dc5ecc66c158cd6853cabba2c29f545780f6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 20 13:35:46 2007 +1100

    libfdt: Abolish _typed() variants, add _cell() variants
    
    In a number of places through libfdt and its tests, we have *_typed()
    macro variants on functions which use gcc's typeof and statement
    expression extensions to allow passing literals where the underlying
    function takes a buffer and size.
    
    These seemed like a good idea at the time, but in fact they have some
    problems.  They use typeof and statement expressions, extensions I'd
    prefer to avoid for portability.  Plus, they have potential gotchas -
    although they'll deal with the size of the thing passed, they won't
    deal with other representation issues (like endianness) and results
    could be very strange if the type of the expression passed isn't what
    you think it is.
    
    In fact, the only users of these _typed() macros were when the value
    passed is a single cell (32-bit integer).  Therefore, this patch
    removes all these _typed() macros and replaces them with explicit
    _cell() variants which handle a single 32-bit integer, and which also
    perform endian convesions as appropriate.
    
    With this in place, it now becomes easy to use standardized big-endian
    representation for integer valued properties in the testcases,
    regardless of the platform we're running on.  We therefore do that,
    which has the additional advantage that all the example trees created
    during a test run are now byte-for-byte identical regardless of
    platform.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 682576d85bd159fc25ef99ab35a997fda172592e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 13 10:02:29 2007 +1100

    dtc: Add testcase for dtc references
    
    This patch adds a testcase for dtc's reference-to-phandle
    functionality.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7346858f8139cb143269bbc728b77072074ae997
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 13 09:59:38 2007 +1100

    libfdt: Add phandle related functions
    
    This patch adds fdt_get_phandle() and fdt_node_offset_by_phandle()
    functions to libfdt.  fdt_get_phandle() will retreive the phandle
    value of a given node, and fdt_node_offset_by_phandle() will locate a
    node given a phandle.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit f6588bc32fd46d63da6058f37ce799ab948c3513
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 13 09:52:58 2007 +1100

    dtc: Add missing dependencies for tests
    
    At present, the Makefiles will not rebuild trees.o or the dtb files
    derived from it if testdata.h is updated.  This is incorrect, and is
    because of missing dependency information.
    
    This patch fixes the problem by making sure that dependency
    information is generated from trees.S and dumptrees.c.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 91967acabdfbff8b44fd3a19f432bc6e690df8cc
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 11:17:37 2007 +1100

    dtc: -Odts produces v1 output
    
    This patch alters the -Odts mode output so that it uses dts-v1 format.
    This means that dtc -Idts -Odts used on a v0 dts file will convert
    that file to v1.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 9138db565adeb2fbba3181fb589f1c9a3f818dde
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 11:17:17 2007 +1100

    dtc: Switch dtc to C-style literals
    
    dtc: Switch dtc to C-style literals
    
    This patch introduces a new version of dts file, distinguished from
    older files by starting with the special token /dts-v1/.  dts files in
    the new version take C-style literals instead of the old bare hex or
    OF-style base notation.  In addition, the "range" for of memreserve entries
    (/memreserve/ f0000-fffff) is no longer recognized in the new format.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 9ed27a2aac6f7bbbb16d48854763a6d79f6a9857
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 11:16:19 2007 +1100

    dtc: Simplify lexing/parsing of literals vs. node/property names
    
    The current scheme of having CELLDATA and MEMRESERVE states to
    recognize hex literals instead of node or property names is
    arse-backwards.  The patch switches things around so that literals are
    lexed in normal states, and property/node names are only recognized in
    the special PROPNODENAME state, which is only entered after a { or a
    ;, and is left as soon as we scan a property/node name or a keyword.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 53acf491e9d576519f97b62984762498f9453cb4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 11:54:14 2007 +1100

    libfdt: Add more documentation (path the fifth)
    
    This patch documents a few more functions in libfdt.h.  All the
    read-only functions are now documented.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9409bd96a56b914baf5bfa802bc6a56fff5698e6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 10:58:22 2007 +1100

    dtc: Better exercise dtc base and bytestring features
    
    This patch alters the main testcase, and the dts file corresponding to
    it so that we at least trivially exercise dtc's bytestring and base
    conversion features.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit b433db0fc74bc7b4c04fcfb014bfaac0f5f29a14
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 10:34:06 2007 +1100

    dtc: Add testcases exercising -Odts mode
    
    This patch adds a batch of testcases exercising dtc's -Odts mode.
    Specifically it checks that using dtc to convert dtb->dts->dtb
    preserves the original dtb for a number of example dtb files.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d3ea6e5f96e8b6fb74607b9061836f2bdd57b0af
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 10:22:25 2007 +1100

    dtc: Make -Idts -Odts preserve property-internal labels
    
    This patch changes -Odts mode output so that labels within property
    values in the input are preserved in the output.  Applied on top of
    the earlier patch to preserve node and property labels in -Odts mode,
    this means that dtc in -Idts -Odts mode will transfer all labels in
    the input to the output.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ed01ae41e2cbbbd26c9efd495b833ba9eb1e062a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Nov 7 10:21:20 2007 +1100

    dtc: Refactor printing of property values in -Odts mode
    
    Currently the main recursive tree printing function,
    write_tree_source_node(), calls guess_type() to apply heuristics to
    see how to print a property value, then calls the appropriate
    write_propval_*() function to print it.
    
    However, future heuristics for handling internal labels and the like
    don't work well this way.  Therefore, this patch refactors things to
    have write_tree_source_node() call a new write_propval() function,
    which incorporates the heurstic logic from guess_type() and also calls
    the right function to do the actual printing.
    
    No behavioural change.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d79d4e280f008a02b4da030b32189b5efbff7d89
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 6 10:42:45 2007 +1100

    libfdt: Fix sw_tree1 testcase
    
    There is a bug in the sw_tree1 testcase / utility which puts two
    "compatible" properties in one node in the output tree.  This patch
    fixes the bug, and also adds a new test checking that the sw_tree1
    output is equal to test_tree1.dtb as its supposed to be, which should
    catch future errors of this type.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d3af7ab624eee7a611bd115b7ea17d5f88bb1f5
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 5 14:29:37 2007 +1100

    libfdt: Add more documentation (patch the fourth)
    
    This patch documents a few more functions in libfdt.h.  It also makes
    a slight update to the description of the FDT_ERR_INTERNAL error code.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2ec634d24bf00b103da895b57c7f1bcac1446112
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 5 14:29:18 2007 +1100

    libfdt: Add more documentation (patch the third)
    
    libfdt: Add more documentation (patch the third)
    
    This patch adds documentation in libfdt.h for a few more libfdt
    functions.  It also makes a slight update to the documentation of
    fdt_get_name().
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e0f2989809aa79aab0f4c827e199b6671b941f48
Author: Emil Medve <Emilian.Medve@Freescale.com>
Date:   Fri Nov 2 10:26:15 2007 -0500

    dtc: Fix the install target
    
    /usr/bin/install: cannot stat `fdt.h': No such file or directory
    /usr/bin/install: cannot stat `libfdt.h': No such file or directory
    
    Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit f7497dc6be43769abb9119d7bed8fb08f4eecff6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 2 16:54:26 2007 +1100

    dtc: Don't force alignment of cell list data
    
    At present, defining a property as, say:
            foo = [abcd], <ffffffff>;
    
    Will cause dtc to insert 2 bytes of zeros between the abcd and the
    ffffffff, to align the cell form data.
    
    Doing so seemed like a good idea at the time, but I don't believe
    there are any users who actually rely on this behaviour.  Segher
    claims that OF has some defined bindings which include properties an
    unaligned subsection of which is interpreted as 32-bit ints (i.e. like
    cell data).
    
    Worse, this alignment will cause nothing but pain when we add
    expression support to dtc (when celldata is included in a larger
    bytestring expession, we won't know the size of the preceding chunk of
    the expression until it's evaluated, so we would have to carry
    alignment fixup information right through the expression evaluation
    process).
    
    Therefore, this patch kills off this alignment behaviour.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 02563ad023122ac2dbd6de6169eaf4b911ddcc7e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 2 16:10:30 2007 +1100

    dtc: Make -Idts -Odts preserve node/property labels
    
    This patch changes -Odts mode output so that labels on properties,
    nodes and memreserve entries in input source are preserved in the
    output.
    
    Preserving labels within property values is trickier - another patch
    coming later.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bf141b96cda8affecf7404198f72c08c8c2c542e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Nov 2 15:15:17 2007 +1100

    dtc: Don't include libfdt in global LDFLAGS
    
    Remove the uneccessary LDFLAGS from the top-level makefile.  It only
    added libfdt/ to the link path.  dtc doesn't need libfdt at all, and
    the testcases which do, already link libfdt.a by explicit path.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2f1ccc36f478d0cdb55666eb62ae6a338751be9c
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 1 16:49:26 2007 +1100

    dtc: Move tree checking code to checks.c
    
    This patch moves the dtc code for checking the device tree its
    processing into a new checks.c.  The tree accessor functions from
    livetree.c which the checks use are exported and added to dtc.h.
    
    Another small step towards a flexible checking architecture.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a041dcdc48453f26b76bccdb5e2a1ebb3a0ea987
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Nov 1 11:37:31 2007 +1100

    libfdt: Handle v16 and re-ordered trees for r/w
    
    Currently all the read/write functions in libfdt require that the
    given tree be v17, and further, that the tree has the memory
    reservation block, structure block and strings block stored in that
    physical order.
    
    This patch eases these constraints, by making fdt_open_int() reorder
    the blocks, and/or convert the tree to v17, so that it will then be
    ready for the other read-write functions.
    
    It also extends fdt_pack() to actually remove any gaps between blocks
    that might be present.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 4a5df5c026c96f36326d4037a0658d38193e2ca1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 30 13:22:12 2007 +1100

    libfdt: Correctly handle versions > 17
    
    If future dtb version > 17 are defined, that are still backwards
    compatible with v16, libfdt will of course be able to read and
    understand them.  However, when modifying such a tree, it can't
    guarantee that it won't clobber additional structure from the new
    version which it doesn't know about.  Therefore, before making
    modifications to a tree of version >17, we must change it's version to
    be exactly 17.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7e14259791129d42527553461349b261d9e48bd8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 30 13:17:15 2007 +1100

    dtc: Remove leftover debugging printf() from mangle-layout
    
    The mangle-layout testcase/utility had a leftover debugging printf().
    This patch removes it.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7b3fb789d2cd5fed818f439d0c7aed44b9860fab
Author: Jon Loeliger <jdl@freescale.com>
Date:   Mon Oct 22 16:09:56 2007 -0500

    DTC:  Remove the need for the GLR Parser.
    
    Previously, there were a few shift/reduce and reduce/reduce
    errors in the grammar that were being handled by the not-so-popular
    GLR Parser technique.
    
    Flip a right-recursive stack-abusing rule into a left-recursive
    stack-friendly rule and clear up three messes in one shot: No more
    conflicts, no need for the GLR parser, and friendlier stackness.
    Compensate by reversing the property list on the node.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 3bef796b449320cefb8e52838ca90163df698722
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 25 15:05:58 2007 +1000

    libfdt: Test on trees with different block layouts
    
    At present, all the example dtbs we use in the testsuite are version
    17 and have reservation map, then structure block then strings block
    (the natural ordering based on alignment constraints).  However, all
    libfdt's read-only and in-place write functions should also work on
    v16 trees, and on trees with other layouts.
    
    This patch adds a testcase / utility function to rearrange the blocks
    of a dtb and/or regress a v17 tree to v16, and uses it to run tests on
    trees with different layouts and versions.
    
    Signed-off-by: David Gibson <david@tgibson.dropbear.id.au>

commit 9b91134ba3043deb7689bcee06b78a596647c626
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 25 14:29:38 2007 +1000

    libfdt: Remove un-const-safe fdt_set_header macro
    
    The fdt_set_header() macro casts an arbitrary pointer into (struct
    fdt_header *) to set fdt header fields.  While we need to change the
    type, so that we can use this macro on the usual (void *) used to
    represent a device tree blob, the current macro also casts away any
    const on the input pointer, which loses an important check.
    
    This patch replaces the fdt_set_header() macro with a set of inline
    functions, one for each header field which do a similar thing, but
    which won't silently remove const from a given pointer.  This approach
    is also more in keeping with the individual accessor macros we use for
    reading fdt header fields.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 57f99b7b3f8f21d4e685a50665951e9bcaad80b7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 25 11:27:31 2007 +1000

    libfdt: Documentation (patch the second)
    
    Add documentation for another handful of libfdt functions to libfdt.h
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit cec0c384effbdd0f87a483ebc4936c0f98ee11f0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 24 17:10:58 2007 +1000

    libfdt: Add some documenting comments in libfdt.h
    
    This patch adds some internal documentation in libfdt.h, in the form
    of comments on the error codes and some functions.  Only a couple of
    functions are covered so far, leaving the documentation still woefully
    inadequate, but hey, it's a start.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3c44c87bdeacc66f46c55090d765a9766475ee50
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 24 11:06:09 2007 +1000

    libfdt: Rename and publish _fdt_next_tag()
    
    Although it's a low-level function that shouldn't normally be needed,
    there are circumstances where it's useful for users of libfdt to use
    the _fdt_next_tag() function.  Therefore, this patch renames it to
    fdt_next_tag() and publishes it in libfdt.h.
    
    In addition, this patch adds a new testcase using fdt_next_tag(),
    dtbs_equal_ordered.  This testcase tests for structural equality of
    two dtbs, including the order of properties and subnodes, but ignoring
    NOP tags, the order of the dtb sections and the layout of strings in
    the strings block.  This will be useful for testing other dtc
    functionality in the future.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 96b5fad3a12697b8f2a50dbca944bd44c6f4eec8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 24 10:28:52 2007 +1000

    libfdt: Rename and publish _fdt_check_header()
    
    It's potentially useful for users of libfdt to sanity check a device
    tree (or, rather, a blob of data which may or may not be a device
    tree) before processing it in more detail with libfdt.
    
    This patch renames the libfdt internal function _fdt_check_header() to
    fdt_check_header() and makes it a published function, so it can now be
    used for this purpose.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 2d50f8f9dd504f2a7b7662edd47419ad0e4c21a5
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Oct 18 09:46:52 2007 -0500

    Quiet a bogus "May be used uninitialized" warning.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit afa8c2e1d755f1f963e3ebe1fed01e49f6b16515
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Oct 18 09:49:45 2007 -0500

    Appease the printf() format $Gods with a correct type.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 7dfba39a23c6d18efbfe40b699106c13e03a4658
Author: Jon Loeliger <jdl@freescale.com>
Date:   Mon Oct 22 16:37:31 2007 -0500

    DTC: Remove an unneeded %token definition.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 5641289a4647db43c0fdccee25da020ca04d03ad
Author: Jon Loeliger <jdl@freescale.com>
Date:   Tue Oct 23 09:28:54 2007 -0500

    DTC: Minor grammar rule shuffle.
    
    I like to see the basis cases established early in
    the rule sets, so place  "empty" reduction first.
    Purely cosmetic.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 30807ca1ce48ac578ec5f00c47065c875c530608
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Oct 18 09:42:16 2007 -0500

    Reformat grammar rules to not mix language syntax and yacc syntax.
    
    Use consistent indenting on all rule actions.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit e321e51036932badbdc7eb3fbade7f325e9f9204
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Oct 22 14:09:23 2007 +1000

    dtc: data.c doesn't need to include dtc-parser.tab.h
    
    Presumably we used this #include once, but it's certainly not
    necessary now.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 169f0b183d45b87ba6dfc194792aee6170ffb54d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 18 17:22:30 2007 +1000

    dtc: Disable semantic checks by default
    
    At present, dtc makes a lot of semantic checks on the device tree by
    default, and will refuse to produce output if they fail.  This means
    people tend to need -f to force output despite failing semantic checks
    rather a lot.
    
    This patch splits the device tree checks into structural checks (no
    bad or duplicate names or phandles) and semantic checks (everything
    else).  By default, only the structural checks are performed, and are
    fatal.  -f will force output even with structural errors (using this
    in -Idts mode would essentially always be a bad idea, but it might be
    useful in -Idtb mode for examining a malformed dtb).
    
    Semantic checks are only performed if the new -c command line option
    is supplied, and are always warnings only.  Semantic checks will never
    be performed on a tree with structural errors.
    
    This patch is only a stopgap before implementing proper fine-grained
    error/warning handling, but it should at least get rid of the
    far-too-frequent need for -f for the time being.
    
    This patch removes the -f from the dtc testcases now that it's no
    longer necessary.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 394e47208df7e3b22c089745695f41966d100f3e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 18 14:17:25 2007 +1000

    libfdt: Add missing RW_CHECK_HEADER to fdt_del_node()
    
    fdt_del_node(), unlike most of the rw functions does not check the
    fdt's header with RW_CHECK_HEADER.  However, it could make a mess of
    things if the conditions in RW_CHECK_HEADER aren't met.  So, this
    patch adds the omitted check.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d7649da4b9bfa4e8ed762d765cdb95db06b13399
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 18 14:14:09 2007 +1000

    dtc: Make helper macros in trees.S more flexible
    
    This patch makes the helper macros in trees.S use separate labels for
    the end of each dt subblock, rather than using only start labels.
    This means that the macros can now be used to create trees with the
    subblocks in non-standard orders.
    
    In addition, it adds a bunch of extra ; after lines of asm code in
    macros, making them safe to use in nested macros.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 11d530202172f1705c9e1e01e6de1642df94479d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 18 12:10:42 2007 +1000

    libfdt: Make fdt_string() return a const pointer
    
    Currently, fdt_string() returns a (non-const) char *, despite taking a
    const void *fdt.  This is inconsistent with all the other read-only
    functions which all return const pointers into the blob.
    
    This patch fixes that.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5a98ddd10af0113d80e08946f9ba5dbc99174402
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 17 12:39:10 2007 +1000

    dtc: Improve -Odts output
    
    This patch makes improvements to the way properties are printed when
    in dtc is producing dts output.
            - Characters which need escaping are now properly handled when
    printing properties as strings
            - The heuristics for what format to use for a property are
    improved so that 'compatible' properties will be displayed as
    expected.
            - escapes.dts is altered to better demonstrate the changes,
    and the string_escapes testcase is adjusted accordingly.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 32b6bd349087019d2915f350e9f3f0e64ec69e73
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 17 11:23:57 2007 +1000

    dtc: Restore missing code for testcases
    
    Recent commits 333542fabf8720b881e992a5abca32ef4bcb841a and
    fd1bf3a5ae46962528ef89a824261a88830758a2 added new testcases to dtc.
    However, although the testcases were added to the Makefile and
    run_tests.sh, one of the .c files for the testcase was omitted from
    the patch in each case.
    
    This patch restores the missing testcase code.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a756c12bea9e39acbed483d9008852f3a371e4a4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 16 16:42:02 2007 +1000

    dtc: Improve support for string escapes
    
    dtc supports the use of C-style escapes (\n, \t and so forth) in
    string property definitions via the data_copy_escape_string()
    function.  However, while it supports the most common escape
    characters, it doesn't support the full set that C does, which is a
    potential gotcha.
    
    Worse, a bug in the lexer means that while data_copy_escape_string()
    can handle the \" escape, a string with such an escape won't lex
    correctly.
    
    This patch fixes both problems, extending data_copy_escape_string() to
    support the missing escapes, and fixing the regex for strings in the
    lexer to handle internal escaped quotes.
    
    This also adds a testcase for string escape functionality.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 333542fabf8720b881e992a5abca32ef4bcb841a
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 16 13:58:25 2007 +1000

    libfdt: Add functions for handling the "compatible" property
    
    This patch adds functions for dealing with the compatible property.
    fdt_node_check_compatible() can be used to determine whether a node is
    compatible with a given string and fdt_node_offset_by_compatible()
    locates nodes with a given compatible string.
    
    Testcases for these functions are also included.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 121acdec91f269b3efb4b5ac45820f0d1a3b37a1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 16 13:53:20 2007 +1000

    dtc: Don't delete *.test.dtb between testgroups
    
    The dtc/libfdt testsuite creates a number of .dtb files during its
    run.  To ensure a clean test run, these are currently deleted before
    each group of tests.
    
    This is, in fact, a mistake, since if something goes wrong in the
    first group of tests, deleting the .dtb at the beginning of the second
    group of tests makes it harder to figure out what the problem was.
    
    This patch changes the script to only delete the files once, before
    the whole test run.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9e32930ebcacfcf7cb7c1c2b8e776eb3957cf6cb
Author: Jon Loeliger <jdl@freescale.com>
Date:   Tue Oct 16 07:35:38 2007 -0500

    Restore warning message about bison expected output.
    
    It was dropped in ad9593f229362782b953da4b805df713e8468df0.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 6f8b7710c9e866d6880cf060127bdbdc932bc6a6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Oct 16 13:50:34 2007 +1000

    libfdt: libfdt_env.h must be included first
    
    libfdt.h currently includes fdt.h, then libfdt_env.h.  This is
    incorrect, because depending on the environment into which libfdt is
    embedded, libfdt_env.h may be needed to define datatypes used in
    fdt.h.  This patch corrects the problem.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fd1bf3a5ae46962528ef89a824261a88830758a2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Oct 10 17:12:12 2007 +1000

    libfdt: Add functions to get/add/delete memory reservemap entries
    
    This patch adds functions to libfdt for accessing the memory
    reservation map section of a device tree blob.  fdt_num_mem_rsv()
    retreives the number of reservation entries in a dtb, and
    fdt_get_mem_rsv() retreives a specific reservation entry.
    fdt_add_mem_rsv() adds a new entry, and fdt_del_mem_rsv() removes a
    specific numbered entry.
    
    Testcases for these new functions are also included.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ad9593f229362782b953da4b805df713e8468df0
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Oct 4 15:37:43 2007 +1000

    dtc: Refactor Makefiles
    
    This patch makes a number of Makefile cleanups and improvements:
            - We use more generic rules to invoke flex and bison, which is
    useful for some of the other changes.
            - We use the name dtc-lexer.lex.c for the flex output, instead
    of the default lex.yy.c.  That means less potential for confusion if
    dtc is embedded into other projects (e.g. the kernel).
            - We separate out a Makefile.dtc designed for embedding into
    other projects, analagous to Makefile.libfdt.
            - Makefile.libfdt is cleaned up to be more useful based on
    some actual trial runs of embedding libfdt in the kernel bootwrapper.
            - Versioning related rules and variables are collected into
    one place in the Makefile.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d2a9da045897c37071597d9aa473964717b14735
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Sep 28 15:51:04 2007 +1000

    libfdt: Make unit address optional for finding nodes
    
    At present, the fdt_subnode_offset() and fdt_path_offset() functions
    in libfdt require the exact name of the nodes in question be passed,
    including unit address.
    
    This is contrary to traditional OF-like finddevice() behaviour, which
    allows the unit address to be omitted (which is useful when the device
    name is unambiguous without the address).
    
    This patch introduces similar behaviour to
    fdt_subnode_offset_namelen(), and hence to fdt_subnode_offset() and
    fdt_path_offset() which are implemented in terms of the former.  The
    unit address can be omitted from the given node name.  If this is
    ambiguous, the first such node in the flattened tree will be selected
    (this behaviour is consistent with IEEE1275 which specifies only that
    an arbitrary node matching the given information be selected).
    
    This very small change is then followed by many more diffs which
    change the test examples and testcases to exercise this behaviour.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 02a5556850bbb64a73cd45b2dbca6579880bb424
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Sep 28 14:57:01 2007 +1000

    libfdt: Test rw functions on more trees
    
    At present, the testcases for read/write functions (setprop,
    del_property and del_node) are only invoked on the single
    asm-generated tree, not on any of the other tree images which should
    be equivalent.  The functions in question will (correctly) not work on
    the "unfinished" tree output from sw_tree1, but should work on most of
    the others.
    
    This patch extends the run_tests script to invoke the r/w testcases on
    more example trees.  The testsuite still passes clean with this
    addition.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fb7c7acf5a4187ea810043ae17854625a313b725
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Sep 26 13:11:05 2007 +1000

    dtc: Use libfdt/fdt.h instead of flat_dt.h
    
    In the dtc tree, both flat_dt.h and libfdt/fdt.h have structures and
    constants relating to the flattened device tree format derived from
    asm-powerpc/prom.h in the kernel.  The former is used in dtc, the
    latter in libfdt.
    
    libfdt/fdt.h is the more recent, revised version, so use that
    throughout, removing flat_dt.h.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 63dc9c7113cd0fff60d04b05cd8053e70279f9d4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Sep 18 11:44:04 2007 +1000

    dtc: Whitespace cleanup
    
    This large patch removes all trailing whitespace from dtc (including
    libfdt, the testsuite and documentation).  It also removes a handful
    of redundant blank lines (at the end of functions, or when there are
    two blank lines together for no particular reason).
    
    As well as anything else, this means that quilt won't whinge when I go
    to convert the whole of libfdt into a patch to apply to the kernel.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 8d59bd3b17ba04dc9bc906742ebe74e69fb0d1ad
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Sep 18 10:33:40 2007 +1000

    dtc: Add basic testcases for dtc
    
    This patch adds a handful of simple testcases for dtc.  It adds a dts
    file which should generate the same sample tree as is used for the
    libfdt testcases, and tests invoking dtc on this dts, plus the
    standard batch of libfdt cases on the resulting dtb, which effectively
    checks that the dtb is correct.
    
    Because the test framework assumes each testcase is an executable with
    the right output conventions, we use a little shell script, dtc.sh, as
    a wrapper around dtc itself.  It simply invokes dtc and returns a PASS
    or FAIL depending on whether dtc returned an error.
    
    It's not much, but it's a start.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ef90baa0c6405fe6d9400d2f091576ac0df87155
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 17 14:39:24 2007 +1000

    dtc: Cleanup testsuite organization
    
    run_tests.sh from the dtc testsuite currently has a facility ro run
    just "functional" or just "stress" tests.  This distinction is carried
    over from libhugetlbfs where the test framework originated, and where
    it made sense.
    
    In dtc, we have no stress tests, so running these subsections isn't
    particularly interesting.  This patch removes these test subsets,
    instead defining a single "libfdt" test subset for testcases related
    to libfdt (and not dtc proper only.  Currently that's all of the
    testcases, but with any luck we'll have some dtc testcases in the
    future.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 874ff219afd310902707bf7d2362af7285ba559e
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 17 15:42:36 2007 +1000

    libfdt: Consistently use big-endian property data in testcases
    
    Flat device trees always have integers in their structure stored as
    big-endian.  From this point of view, property values are
    bags-of-bytes and any endianness is up to users of the device tree to
    determine.
    
    The libfdt testcases which use properties with integer values,
    currently use native endian format for the architecture on which the
    testcases are run.  This works ok for now, since both the creation and
    checking of the example device trees happen in the same endianness.
    
    This will become a problem, however, for tests of dtc which we want to
    add in the nearish future.  dtc always uses big-endian format for
    'cell' format data in properties; as it needs to in order to produce
    powerpc-usable device trees when hosted on a little-endian
    architecture.
    
    This patch, therefore, changes the libfdt testsuite to use big-endian
    format always for integer format data, in order to interoperate sanely
    with future dtc testcases.  This also means that the example trees
    created by the testsuite should now be byte-for-byte identical
    regardless of dtc and libfdt's host platform, which is arguably an
    advantage.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ae1454b3111e4653895dbba18d594bd78c91d086
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Sep 17 14:28:34 2007 +1000

    libfdt: Add fdt_node_offset_by_prop_value()
    
    This patch adds a function to libfdt to locate nodes containing a
    property with a specific value.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 592ea5888c27b154e6dc4b9b3ed98978369271c8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Sep 4 10:43:03 2007 +1000

    dtc: Assume properties preced subnodes in the flattened tree
    
    With kernel commit eff2ebd207af9f501af0ef667a7d14befcb36c1b, we
    clarified that in the flattened tree format, a particular nodes
    properties are required to precede its subdnodes.
    
    At present however, both dtc and libfdt will process trees which don't
    meet this condition.  This patch simplifies the code for
    fdt_get_property() based on assuming that constraint.  dtc continues
    to be able to handle such an invalid tree - on the grounds that it's
    useful for dtc to be able to correct such a broken tree - but this
    patch adds a warning when this condition is not met while reading a
    flattened tree.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bf944970317820867895680cf0e2c4e72eefa8b1
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 31 16:21:23 2007 +1000

    dtc: Optimise by default, fix warnings thus uncovered
    
    This patch turns on optimisation in the Makefile by default.  With the
    optimizer on, some uninitialized variable warnings (one real, two
    bogus) are now generated.  This patch also squashes those again.

commit ed0117a0c059ec0e1257573b0850081787bd651d
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 31 16:04:27 2007 +1000

    dtc: Make make print a message when linking testcases
    
    Currently, dtc relies on make's implicit rule to build the testcases.
    This means that when not making verbosely (V=0, the default) there is
    no message at all while relinking the testsuites.  This can be very
    confusing when updating libfdt.a (upon which the testcases depend) and
    make appears to do nothing.
    
    This patch corrects the situation, borrowing the rule used to link dtc
    itself to link all the testcases as well.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit e2b3bb32276252a922c0b02981d0fd998766feef
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Aug 31 14:30:16 2007 +1000

    libfdt: Fix use of uninitialized variable in fdt_get_path()
    
    My recent implemenetation of fdt_get_path() had a bug - the while loop
    tested offset which was unitialized on the first iteration.  Depending
    on code surrounding the call, this could cause fdt_get_path() to
    return incorrect results.
    
    This patch corrects the problem by applying some more correct thinking
    to the loop condition.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7ca330865e9e4bf0f32a9875a364d00951373999
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 29 12:18:51 2007 +1000

    dtc: Fix summary calculation in testsuite
    
    The bookkeeping for producing the testsuite summary (total number of
    tests passed, failed and so forth) is broken.  It uses $? across
    several tests, but for checks after the first, the value of $? will no
    longer contain the original return code, but just that from the
    previous test.  This patch fixes the problem.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 1248237c7e3f949e974e42927645f82e03f9b115
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Aug 30 14:54:04 2007 +1000

    libfdt: Add fdt_parent_offset() and supporting functions
    
    This patch adds an fdt_parent_offset() function which returns an
    offset to the parent node of a given node.  It also adds two helper
    functions which are used to implement fdt_parent_offset() but are also
    exported: fdt_supernode_atdepth_offset() which returns the ancestor of
    a given node at a specified depth from the root of the tree, and
    fdt_node_depth() which returns the depth of a given node.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 037db263e04f43cb113064fa24e1b441ff761528
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Aug 30 14:54:04 2007 +1000

    libfdt: Add fdt_get_path() function
    
    This patch adds an fdt_get_path() function to libfdt, which returns
    the full path of a given node in a caller supplied buffer.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9d26eabdc6ff9d9676436596876c732de741b9af
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Aug 30 14:54:04 2007 +1000

    libfdt: Add fdt_get_name() to retrieve a node's name
    
    This patch adds a new fdt_get_name() function to libfdt which will
    return a node's name string (including unit address, if any).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit bd2ae2f41cb1ef7612e3b2cb7179bc6be6ec7f44
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Aug 29 12:22:50 2007 +1000

    libfdt: Fix handling of trailing / in fdt_path_offset()
    
    Currently, fdt_path_offset() returns FDL_ERR_BADOFFSET if given a path
    with a trailing '/'.  In particular this means that
    fdt_path_offset("/") returns FDT_ERR_BADOFFSET rather than 0 as one
    would expect.
    
    This patch fixes the function to accept and ignore trailing '/'
    characters.  As well as allowing fdt_path_offset("/") this means that
    fdt_path_offset("/foo/") will return the same as
    fdt_path_offset("/foo") which seems in keeping with the principle of
    least surprise.
    
    This also adds a testcase to ensure that fdt_path_offset("/") returns
    0 as it should.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5cb1fbdd7cf82e1909e27c81073cf3272cb63fa3
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Aug 9 19:31:32 2007 -0500

    DTC 1.0.0
    
    For better or worse, it's about damned time!
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 9d7e7380ac8f1d90da0c7aac806c7bc55166982b
Merge: 74ce242 1dc6ca5
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Aug 9 16:01:07 2007 -0500

    Merge branch 'doc'

commit 1dc6ca5edcfed7cfb055b9cbf41f516e196ba813
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Jul 11 16:46:11 2007 -0500

    Add initial Device Tree Compiler manual
    
    This is the new location for technical descriptions of the DTC.
    Derived from the kernel's Documentation/powerpc/booting-without-of.txt.
    The booting-without-of.txt that was here was very old and out of date.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 74ce242bf3307c7ec77b9ddfff443c247ac8c0a3
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Jul 25 10:53:42 2007 -0500

    Make release 1.0.0-rc1!
    
    Signed-off-by: Jon Loeliger

commit 4f61ae162780585aacf90ff80e4abf3ab05201ca
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jul 24 15:14:52 2007 +1000

    dtc: Improve the make install target
    
    This patch makes various improvements to dtc's make install target:
            - libfdt is also installed.  Specifically, libfdt.a and the
    two export relevant header files, fdt.h and libfdt.h are installed.
            - ftdump is no longer installed.  It was only ever a
    development debugging tool and may well go away at some point.
            - In keeping with normal conventions, there is now a PREFIX
    variable, allowing control of where things are installed (in /usr,
    /usr/local, /opt, etc.).
            - By default, installed into the user's home directory,
    instead of /usr.  This is friendlier for self-installers, package
    builders can easily override PREFIX to restore the old behaviour.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit fdd2e6f9455020972b762a993046351f7845e7b5
Author: Jon Loeliger <jdl@freescale.com>
Date:   Sat Jul 7 14:18:02 2007 -0500

    Reorganized Makefile into better top-down structure.
    Also removed a generic "LD" target that wasn't actually used.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit a657ce8fb7da5bca364f717fb981059639dbd0d1
Author: Jon Loeliger <jdl@freescale.com>
Date:   Sat Jul 7 13:52:25 2007 -0500

    Add DTC release version information.
    
    Adopted the version information and implementation
    from of the Linux Kernel Makefiles.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 74e6d2128439c53ad9d4a9c1613c82ee92491e84
Author: Jon Loeliger <jdl@freescale.com>
Date:   Sat Jul 7 10:38:27 2007 -0500

    Add a note to the build about the expected parser warnings.
    
    Signed-off-by: Jon Loeliger

commit 445d55d2cc82097dea0feb564cc479c40291fffe
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:54 2007 -0500

    dtc: format memory reserve as pairs on two lines
    
    When writing the memory reserve table in assembly output,
    emit both halves of each 64 bit number on a single .long
    statement.  This results in two lines per memory reserve
    slot instead of four, each line contains one field (start
    or size).
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 7f45666273f18f2aa9546ba42a083bded463459b
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:53 2007 -0500

    dtc: align header comments in asm output
    
    Insert tabs to align the comments describing the fields of the
    boot parameters header struct.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 9670eed1bce94c98ffefcfd49317f2cfb9256d6c
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:53 2007 -0500

    dtc: add a testcase with labels
    
    Create a source file with labels for use as a testcase
    to check parsing dts files.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 43a68c63e46c88b94068c18255db2d6c7d9e3740
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:52 2007 -0500

    dtc: store labels in ascending order
    
    When adding a label, walk to the end of the list since the
    label reflects the end of the data.
    
    Since merging data buffers already preserved the order, this
    will cause the labels to be emitted in order when writing
    assembly output.
    
    It should also aid emiting labels when writing dts output
    should that be added in the future (data formatting would
    need to break at each label).
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 6a99b1313208d05ba6d9c5d3858230d9ee785f8c
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:51 2007 -0500

    dtc: implement labels on property data
    
    Extend the parser grammer to allow labels before or after any
    property data (string, cell list, or byte list), and any
    byte or cell within the property data.
    
    Store the labels using the same linked list structure as node
    references, but using a parallel list.
    
    When writing assembly output emit global labels as offsets from
    the start of the definition of the data.
    
    Note that the alignment for a cell list is done as part of the
    opening < delimiter, not the = or , before it.  To label a cell
    after a string or byte list put the label inside the cell list.
    
    For example,
            prop = zero: [ aa bb ], two: < four: 1234 > eight: ;
    will produce labels with offsets 0, 2, 4, and 8 bytes from
    the beginning of the data for property prop.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit ac6a5e26b4f2239d77eb4aa25383466833949006
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:50 2007 -0500

    dtc: allow a label: in any dts context
    
    Change the lexer to recognise a label in any context.  Place
    before other celldata and bytestrings to avoid the initial
    characters being stolen by other matches.
    
    A label is a character sequence starting with an alphabetic
    or underscore optinally followed by the same plus digits and
    terminating in a colon.
    
    The included terminating colon will prevent matching hex numbers.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 46779e8f8e5a13388835e9251fb741396e2d7f13
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:49 2007 -0500

    dtc: clean up grow_data_for()
    
    Change the grow_data_for function to copy struct data and
    modifiy the fields it is updating instead of storing all
    fields individually to a stack allocated struct.
    
    This reduces maintence for future enhancements as now all
    instances of struct data are created by modifying a copy
    of an existing struct data or directly copying empty_data.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit d4290338514abdfac372aa9a7af180543c0622ad
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:49 2007 -0500

    dtc: implement labels on memory reserve slots
    
    Allow a label to be placed on a memory reserve entry.
    Change the parser to recognize and store them.  Emit
    them when writing assembly output.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 85ab5cc6ec8442245a969a2f5a0e05962e0e7e67
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:48 2007 -0500

    dtc: complain about unparsed digits in cell lists
    
    Check that strtoul() parsed the complete string.
    
    As with the number overflow case, write a non-fatal error
    message to stdout.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 6d7b22243045dc514b5ea6c004fc50af8581ed9b
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:47 2007 -0500

    dtc: move declaration of yyerror
    
    yyerror() is used by both dtc-parser.y and dtc-lexer.l, so move
    the declaration to srcpos.h.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 81fda8a6f1cabbd9c08e27d3171394f7f90f7d3a
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jul 7 01:18:47 2007 -0500

    dtc: fix asm for version 17
    
    The version 17 flat device tree format added struct size.  When
    writing version 17 assembly output the field must be emitted.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 8cd4196ee3a9cc3d345f40f93e0a5f4493ce2d82
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Fri Jun 29 09:53:23 2007 -0500

    dtc: Add install makefile target
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>

commit 6936273aa40371811a99c3516b613d299792831b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 28 11:32:31 2007 +1000

    dtc: Remove bogus break statement
    
    Commit 0738774fcc34b78a708a127fb4b2f193d08c94ba introduced some
    incorrect indentation / bracketing in unflatten_tree().  By luck, the
    extra break statement intended to be within an if block, but actually
    afterwards has no semantic effect.  Still, this patch gets rid of it
    for cleanliness.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit d9d679fb9690348730d5d274858d445f11e4cbd4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 26 12:45:51 2007 +1000

    dtc: Improve and better integrate dtc and libfdt Makefiles
    
    This patch substantially revamps the dtc Makefiles, in particular
    better integrating the Makefile for dtc proper with the Makefiles
    imported from libfdt for libfdt and the shared testsuite.  Notable
    changes:
            - No recursive make calls.  Instead subsidiary Makefiles are
    included into the top-level Makefile so we get a complete dependency
    information.
            - Common pattern rules, CFLAGS etc. shared between dtc, libfdt
    and testsuite, rather than separate copies.
            - Vaguely Kbuild-like non-verbose mode used by default, which
    makes warnings more prominent.
            - libfdt Makefile consists only of variable definitions and
    helper rules, to make it more easily embeddable into other Makefile
    systems.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6c65eab11e19117516ed6a86222295b55e8adc9b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 26 11:44:49 2007 +1000

    dtc: Remove redundant copy of the GPL
    
    The dtc tree currently includes two copies of the GPL - one which was
    there originally, and one imported from the libfdt tree.  This patch
    gets rid of the extra copy in the libfdt tree.
    
    In addition it renames the file containing the remaining copy from
    COPYING to GPL.  Since libfdt is dual-licensed, this seems clearer.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0c7cd1a08783b8efea84bdb78c38521f9cb89125
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 26 11:33:10 2007 +1000

    dtc: Count testcases and results in the dtc/libfdt testsuite
    
    There are quite a lot of testcases in the dtc testsuite (recently
    imported from libfdt).  It can be easy to miss a stray FAIL result in
    the midst of all the rest.  To improve this, this patch adds a summary
    to the end of the testsuite results giving the total number of tests
    along with the number of PASSes FAILs and other results.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 0738774fcc34b78a708a127fb4b2f193d08c94ba
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Jun 26 11:30:47 2007 +1000

    dtc: Accept NOPs in dtb input regardless of version
    
    Since Milton's patch, dtc will accept (and, correctly, ignore) NOP
    tags when given dtb input v16 or later.  However, although NOPs
    weren't defined in earlier versions, they're not ambiguous, so should
    be accepted there as well.  This patch does so, printing a mere
    warning when finding NOPs in a too-early dtb version.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 12578976fe9cef82f0c08db3f9a4f550f5085ba4
Author: David Gibson <dgibson@mulberryst.seuss>
Date:   Thu Jun 14 15:05:55 2007 +1000

    Merge libfdt into dtc.
    
    Having pulled the libfdt repository into dtc, merge the makefiles and
    testsuites so that they build together usefully.

commit 400bd98a3a4177c8c399fd1270bf58cba43d1f35
Merge: ce24322 23cdf23
Author: David Gibson <dgibson@mulberryst.seuss>
Date:   Thu Jun 14 12:21:33 2007 +1000

    Merge ../libfdt into dtc-libfdt-merge

commit 23cdf2379fee7902cd1aa295b2721fdef1163b33
Author: David Gibson <dgibson@mulberryst.seuss>
Date:   Thu Jun 14 11:58:35 2007 +1000

    Move everything into a subdirectory in preparation for merge into dtc.

commit 948160520884b10f545bec792e0d37c1c14bbf2f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Jun 13 16:30:48 2007 +1000

    libfdt: Switch to dual GPL/BSD license
    
    Change the license information at the top of each file from LGPL to
    dual-GPL/BSD.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a6c76f923dcc42102fac58375eaca28057811c20
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Jun 13 14:18:10 2007 +1000

    libfdt: More thorough use of constification
    
    As a read-only functions, which take a const pointer to the fdt, treat
    fdt_get_property() and fdt_getprop() as returning const pointers to
    within the blob.  fdt_get_property_w() and fdt_getprop_w() versions
    are supplied which take a non-const fdt pointer and return a non-const
    pointer for the benefit of callers wishing to alter the device tree
    contents.
    
    Likewise the lower-level fdt_offset_ptr() and _fdt_offset_ptr()
    functions are changed to return const pointers, with *_w() versions
    supplied.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit ce243227f1fd9d0353b428481b5a599db16a9d05
Author: Milton Miller <miltonm@bga.com>
Date:   Sat Jun 9 23:21:31 2007 -0500

    dtc: parse NOP in dtb input
    
    Version 16 and later of the flat device tree format allow NOPs
    to be placed in the tree.  When processing dtb input, dtc must
    recognise them.
    
    Previously it would produce the error message
    FATAL ERROR: Invalid opcode word 00000004 in device tree blob
    
    Signed-off-by: Milton Miller <miltonm@bga.com>

commit 41eecd4c2acaca01295fdb48ddc9ec5520f5a7d4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Jun 7 12:07:35 2007 +1000

    dtc: Fix recognition of whitespace characters
    
    At present, the lexer in dtc recognizes only space, tab and newline as
    whitespace characters.  This is broken; in particular this means that
    dtc will get syntax errors on files with DOS-style (CR-LF) newlines.
    
    This patch fixes the problem, using flex's built-int [:space:]
    character class.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 7ea144f4c0b47c6f25cb4862b3299b7e5d7f7813
Author: Jerry Van Baren <gvb.uboot@gmail.com>
Date:   Thu Apr 19 22:22:35 2007 -0400

    Fix the -S to modify the totalsize properly.
    
    With the last improvement to pad out the blob, I broke the blob
    header totalsize adjustment.  The adjustment was moved up in the
    code before the memory image of the blob is created.
    
    Signed-off-by: Gerald Van Baren <vanbaren@cideas.com>

commit 86c01ee6dfc68c633eaaee6ab62d0742fd82b24f
Author: Jerry Van Baren <gvb.uboot@gmail.com>
Date:   Wed Apr 18 21:59:51 2007 -0400

    Assemble the blob in memory before writing it out.
    
    This makes padding out the blob if the user requested extra size much
    easer.  The assembly and writing to the file is more straight forward too.
    
    Signed-off-by: Gerald Van Baren <vanbaren@cideas.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit ca25e54ddd4efbc4c9165bc0ba45ab898693da4e
Author: Jerry Van Baren <gvb.uboot@gmail.com>
Date:   Tue Apr 17 18:14:41 2007 -0400

    Fix reserve map output for asm format.
    
    Add extra reserve map slots output for asm format (previously done for dtb
      output).
    
    Signed-off-by: Gerald Van Baren <vanbaren@cideas.com>

commit 4f5370a13864eec0c370b8a2adbb527321a376f6
Author: Jerry Van Baren <gvb.uboot@gmail.com>
Date:   Sat Apr 14 18:16:47 2007 -0400

    Add -o <output file> to the usage message.
    
    Signed-off-by: Gerald Van Baren <vanbaren@cideas.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 4384b23454a939852d679aee93ee624cf210287f
Author: Jerry Van Baren <gvb.uboot@gmail.com>
Date:   Wed Apr 4 22:04:33 2007 -0400

    Implement the -R option and add a -S option.
    
    Implement the -R <number> option to add memory reserve slots.
    Add a -S <size> option makes the blob at least this number of bytes.
    
    Signed-off-by: Gerald Van Baren <vanbaren@cideas.com>

commit ce34ae3b238c562a215df0dddea56da866f16c0f
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Mar 28 17:05:33 2007 -0500

    DTC: Incorporate some review suggestions.
    
        - Change include syntax to:  /include/ "filename"
        - Move private functions directly into dtc-lexer.l
        - Define YYID for some older parser templates
    
    Also fix a #include ordering problem around YYLTPE.
    
    Signed-off-by; Jon Loeliger <jdl@freescale.com>
    Acked-by: Haiying Wang <Haiying.Wang@freescale.com>

commit e45e6fd274826991c2b7e01fde4d73110487e0e0
Author: Jon Loeliger <jdl@freescale.com>
Date:   Fri Mar 23 15:18:41 2007 -0500

    DTC: Add support for a C-like #include "file" mechanism.
    
    Keeps track of open files in a stack, and assigns
    a filenum to source positions for each lexical token.
    Modified error reporting to show source file as well.
    No policy on file directory basis has been decided.
    Still handles stdin.
    
    Tested on all arch/powerpc/boot/dts DTS files
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit b29597d9a343761f768a9d78a63f1c09e71b43d2
Author: Scott Wood <scottwood@freescale.com>
Date:   Thu Mar 22 11:11:09 2007 -0500

    Remove bogus errors from check_chosen.
    
    It is not an error for /chosen (or any of its children) to be missing.
    
    It is not a requirement that the output of dtc be a complete, valid
    device tree, as it may be intended that the dtb be passed through boot
    code that will complete it.  Thus, do not complain.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>

commit 857f54e79f74429af20c2b5ecc00ee98af6a3b8b
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Mar 23 15:16:54 2007 +1100

    libfdt: Remove #includes from fdt.h
    
    At present fdt.h #includes stdint.h.  This makes some sense, because fdt.h
    uses the standard fixed-width integer types.  However, this can make life
    difficult when building in different environments which may not have a
    stdint.h.  Therefore, this patch removes the #include from fdt.h, instead
    requiring that users of fdt.h define the fixed-width integer types before
    including fdt.h, either by themselves including stdint.h, or by any other
    means.

commit 001430072fe321fe41c82478917b06c8d9ffdbbe
Author: Ed Swarthout <Ed.Swarthout@freescale.com>
Date:   Wed Mar 14 17:33:19 2007 -0500

    ftdump missing be32_to_cpu() on size cell.

commit cd1da8711641a4c7722742ce8b692b2b7cdadfc7
Author: Jerry Van Baren <gerald.vanbaren@comcast.net>
Date:   Sun Mar 18 16:49:24 2007 -0400

    Improve options, #define default version.
    
    Add -h option for help
    Add -q quiet option to reduce or suppress the whining
    Create #define for the default version value.
    
    Signed-off-by: vanbaren@cideas.com <vanbaren@cideas.com>

commit b299ac76a7c2f58a0f44483b35b2d4d46bb6c0d9
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 14 11:06:23 2007 +1100

    Get rid of libdt.c
    
    libdt.c was an attempt at creating a device tree handling library
    within the dtc codebase.  However, it was never even close to
    completion, and is entirely obsoleted by it's spiritual descendent,
    libfdt (currently a separate package).  This patch, therefore, removes
    libdt.c entirely, along with its only reference in the Makefile, an
    unused variable.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 46c88dfcca9aedda24364e082374dba1f6182a53
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 14 11:02:40 2007 +1100

    Add support for flat device tree format version 17
    
    libfdt defined a new version of the flattened device tree format,
    version 17.  It is backwards compatible with version 16, just adding
    an extra header field giving the size of the blob's structure blob.
    
    This patch adds support to dtc allowing it to read and write version
    17 blobs.  It also makes version 17 the default output version for
    blobs.
    
    At the same time we change the code to consistently using decimal
    numbers for versions.  Previously we sometimes used 16 and sometimes
    0x10 to refer to version 16.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 6ae55f9f9bf5db8c05f851db27ed923451b44181
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Feb 26 11:02:24 2007 +1100

    Fix flat_dt_property structure
    
    The structure in flat_dt.h defining the layout of a proprety within
    the flat device tree is incorrect.  It has the offset to the
    property's name, then the length when in fact (according to
    booting-without-of.txt and the output of dtc) then length should come
    first, followed by the name offset.
    
    In fact, this structure is never used so the mistake doesn't break
    anything, but it should still be fixed to avoid misleading people.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 07a12a08005f3b5cd9337900a6551e450c07b515
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Feb 23 14:40:14 2007 +1100

    libfdt: Use correct property format
    
    Since its beginning, libfdt has used an incorrect definition of the
    format for a property, putting the name offset before length, rather
    than the other way around as described in booting-without-of.txt.
    
    This corrects the error, making libfdt actually produce and use trees
    which are compatible with the kernel and dtc.
    
    Signed-of-by: David Gibson <david@gibson.dropbear.id.au>

commit 5434fcc7e05e86b61530999d48548e6f18036cf7
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Feb 23 14:40:10 2007 +1100

    libfdt: Fix fdt_strerror() bugs
    
    This fixes several small bugs related to fdt_strerror().
            - an entry is added to the error table for FDT_ERR_BADLAYOUT.
            - Incorrect usage of fdt_strerror() in check_property() and
    check_getprop() is corrected (they were passing a positive error code,
    when fdt_strerror() expects a negative code).
            - Add code to properly retreive an error code from
    fdt_get_property() in check_property().  With that a check that the
    length returned by fdt_get_property() matches that stored in the
    retreived property.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 5ae78ad8f8b3e39788dfb4090b03e147e71b0211
Author: Stuart Yoder <b08248@freescale.com>
Date:   Mon Feb 19 11:28:27 2007 -0600

    remove check for interrupt-controller property under /chosen
    
    Remove warning for missing interrupt-controller property
    under /chosen.  There is consensus that this
    property does not belong here.
    
    Also, add a warning if interrupt-controller _is_ found
    under /chosen.
    
    Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 3948849fd0cdcaf0b91c7cc4774e86c05ba097ef
Author: Jon Loeliger <jdl@freescale.com>
Date:   Fri Feb 16 09:33:54 2007 -0600

    Moved data_convert_cell() out of data.c to the parser.
    It constructs a cell_t, not data objects.
    Renamed it to cell_from_string() as well.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit fd84d97deecc23b8519f8bc1f384a418bb69181b
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Feb 15 11:02:44 2007 -0600

    Add some initial test cases.
    
    Add the original simple test case and a case with
    different based cell values.  Correct output asm
    files as well as stderr is captured.
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit af0278a3a04fabe8349cae89613274da196509ca
Author: Jon Loeliger <jdl@freescale.com>
Date:   Thu Feb 15 10:59:27 2007 -0600

    Add support for decimal, octal and binary based cell values.
    
    New syntax d#, b#, o# and h# allow for an explicit prefix
    on cell values to specify their base.  Eg: <d# 123>
    
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit c226ddcabc4272b0734d237d3aee2c21a2fe2387
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 7 14:29:07 2007 +1100

    Allow references to labels
    
    dtc allows nodes to have labels, which at present are just re-emitted
    as symbols at the appropriate places when using asm-mode output.  It
    also allows "references" where the notation &/path/to/node in a cell
    list will be replaced with the phandle of the referenced node.
    
    This patch extends the reference syntax to allow references to labels
    instead of just full device paths.  This allows nodes deep within the
    tree to be referenced with a shorter more convenient name.  References
    to labels are distinguished from reference to paths by the fact that
    paths must start with a /, but labels can never start with a /.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 32da475af165a0e1e274aa9a8bbdfb873831efa7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Feb 7 16:37:50 2007 +1100

    Allow multipart property values
    
    At present each property definition in a dts file must give as the
    value either a string ("abc..."), a bytestring ([12abcd...]) or a cell
    list (<1 2 3 ...>).  This patch allows a property value to be given as
    several of these, comma-separated.  The final property value is just
    the components appended together.  So a property could have a list of
    cells followed by a string, or a bytestring followed by some cells.
    Cells are always aligned, so if cells are given following a string or
    bytestring which is not a multiple of 4 bytes long, zero bytes are
    inserted to align the following cells.
    
    The primary motivation for this feature, however, is to allow defining
    a property as a list of several strings.  This is what's needed for
    defining OF 'compatible' properties, and is less ugly and fiddly than
    using embedded \0s in the strings.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 54382390e40654957e16da7ba48ee86822ffe590
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Jan 31 15:45:26 2007 +1100

    Bugfix for CHECK_HAVE_WARN_PHANDLE()
    
    At present, the tree checking code in dtc will die with an assertion
    failure if given a tree which has the invalid value 0 or -1 in a
    property which should contain a phandle.  This patch fixes the check
    to die more gracefully with an error message indicating the invalid
    phandle value.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>

commit e6dd3f1d3cf54558187aa2a180cf4ad4ab10d8ad
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Jan 29 15:30:59 2007 +1100

    Remove check for linux,platform property in /chosen
    
    The linux,platform property in /chosen was obsolete almost as soon as
    it was invented.  Remove the check for it from dtc, which just tends
    to lead to irritating spurious failures.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>

commit 5b344f9c5aaff698715ffd113164c9cff45d5d2f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Dec 21 09:57:08 2006 +1100

    libfdt: Add fdt_strerror() function to library
    
    This function moves the fdt_strerror() function, currently found in
    the test code into the fdt library proper.  This makes life easier for
    any library users who want to provide meaningful error messages.  The
    function goes into a module of its own, so that users who don't need
    the function won't get a copy of it linked in.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 209c5e56d2fcd1c7432f43f58f768855a6d655d3
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Dec 21 09:57:02 2006 +1100

    libfdt: Add TODO file
    
    Add a TODO file to keep track of future plans for libfdt.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 3aea82850164d49678a684bda11203da8d7e25ce
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 15 15:12:52 2006 +1100

    libfdt: Clean up error codes
    
    First, this patch removes several underused error codes:
    FDT_ERR_BADPOINTER and FDT_ERR_BADHEADER were not used at all and are
    simply removed.  FDT_ERR_SIZE_MISMATCH was very similar in spirit to
    FDT_ERR_NOSPACE, and used only in circumstances where there can be no
    confusion between the two, so is removed and folded into
    FDT_ERR_NOSPACE.  FDT_ERR_INTERAL was used on only one place, on a
    "can't happen" check.  It seems of little value so the check and error
    code are removed also.
    
    Second, the error codes have been re-numbered and grouped roughly by
    severity.  That is codes which can reasonably occur in normal
    operation separated from those which indicate bad parameters (and
    therefore a bug in the caller) or a bad or corrupted device tree blob.
    
    Third the test function fdt_strerror() is cleaned up a little based on
    these changes.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 9a9fdf59913c6d14f1755fe653dc8161ec6b0b7b
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 15 15:12:51 2006 +1100

    libfdt: More consistent handling of returned error codes.
    
    At present, libfdt functions returning a structure offset return a
    zero-or-positive offset on success, and return a negative error code
    on failure.  Functions which only return an error code return a
    positive version of the error code, or 0 on success.
    
    This patch improves consistency by always returning negative error
    codes on failure, for both types of function.  With this change, we do
    away with the special fdt_offset_error() macro for checking whether a
    returned offset value is an error and extracting the encoded error
    value within.  Instead an explicit (ret_value < 0) is now the
    preferred way of checking return values for both offset-returning and
    error-code-returning functions.
    
    The fdt_strerror() function in the test code is updated
    correspondingly to make more sense with the new conventions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit a7ee95ded6a0d64c1c259b9c6fea090e19ca81f8
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 15 15:12:49 2006 +1100

    libfdt: Abolish encoding of error codes into pointers
    
    This patch abolishes the non-standard and confusing encoding of errors
    into pointer return values.  The only functions still returning such a
    potentially encoded pointer are fdt_get_property() and fdt_getprop().
    Those functions also return a length via an (int *).  With this patch
    those functions instead now return NULL on any error, and return the
    code indicating the type of error in the length paramater.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 73d60926a05814b8864c86c435e272b386513b0e
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 15 15:12:47 2006 +1100

    libfdt: Use void * to refer to device tree blobs
    
    At present, the blob containing a device tree is passed to the various
    fdt_*() functions as a (struct fdt_header *) i.e. a pointer to the
    header structure at the beginning of the blob.
    
    This patch changes all the functions so that they instead take a (void
    *) pointing to the blob.  Under some circumstances can avoid the need
    for the caller to cast a blob pointer into a (struct fdt_header *)
    before passing it to the fdt_*() functions.
    
    Using a (void *) also reduce the temptation for users of the library
    to directly dereference toe (struct fdt_header *) to access header
    fields.  Instead they must use the fdt_get_header() or
    fdt_set_header() macros, or the fdt_magic(), fdt_totalsize()
    etc. wrappers around them which are safer, since they will always
    handle endian conversion.
    
    With this change, the whole-tree moving, or manipulating functions:
    fdt_move(), fdt_open_into() and fdt_pack() no longer need to return a
    pointer to the "new" tree.  The given (void *) buffer pointer they
    take can instead be used directly by the caller as the new tree.
    Those functions are thus changed to instead return an error code
    (which in turn reduces the number of functions using the ugly encoding
    of error values into pointers).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 568b569e8961641587cfda8ec23e64cafe45f6d7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 12 15:46:14 2006 +1100

    libfdt: Fixup usage of fdt_offset_ptr() in fdt_rw.c
    
    Several places in fdt_rw.c incorrectly use fdt_offset_ptr(), using it
    as if it returned an encoded error code on errors, instead of
    returning NULL on error as it actually does.
    
    In fact, however, in these instances the extra checks in
    fdt_offset_ptr() are useless anyway, so we introduce a new (internal
    use) _fdt_offset_ptr() and use that without checking.
    (cherry picked from 3dffb1808dea6aee6158c92e17faa6ced9b183f2 commit)

commit 9825f823eb5c9fc6b01e40f1b84108f5574235f2
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Dec 14 15:29:25 2006 +1100

    libfdt: Fix bounds-checking bug in fdt_get_property()
    
    The libfdt functions are supposed to behave tolerably well when practical,
    even if given a corrupted device tree as input.  A silly mistake in
    fdt_get_property() means we're bounds checking against the size of a pointer
    instead of the size of a property header, meaning we can get bogus
    behaviour in a corrupted device tree where the structure block ends in
    what's supposed to be the middle of a property.
    
    This patch corrects the problem (fdt_get_property() will now return
    BADSTRUCTURE in this case), and also adds a testcase to catch the bug.

commit 6ae4de5c81eac62a0c658ef302c850da3f107092
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Dec 12 12:48:15 2006 +1100

    libfdt: Remove unused _ptr_offset() function
    
    The (internal use) function _ptr_offset() is never used.  Delete it.

commit 94993f4fc47704666f4d5906d58780e01070f767
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 11 16:15:34 2006 +1100

    libfdt: Abolish fdt_property_offset()
    
    fdt_property_offset() is the only function in the library returning a
    direct offset to a property, and no function takes such an offset
    (they only take offsets to nodes, not properties).  Furthermore the
    only client uses for this function I can think of involve immediately
    translating the offset into a pointer, effectively duplicating the
    internal function _fdt_getprop()
    
    This function abolishes fdt_property_offset(), replacing it with
    fdt_get_property(), a renamed and now externally visible version of
    _fdt_getprop().

commit 95393db96f4a14de21ff32e12bfe905d53d1566f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Dec 11 11:02:59 2006 +1100

    dtc: Remove verbose message from get_node_phandle()
    
    get_node_phandle() had a leftover debugging printf(), which could muddy
    dtc's output when checking trees.  This patch removes it.

commit 1a765f51a41f51c7c194b6872a6d46f9dd5413f8
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Dec 7 15:24:26 2006 +1100

    libfdt: Fixups for 64-bit machines
    
    The error encoding for pointers is incorrect on machines where
    sizeof(int) != sizeof(void *), which includes most 64-bit platforms
    (in particular, AMD64 and powerpc64).  This patch fixes it.

commit e25487db34c3abc9310c5be4cbb16f8999cc70a9
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 4 12:52:45 2006 +1100

    libfdt: Fix libfdt for little endian hosts
    
    This patch fixes a number of embarrasing oversights which meant libfdt
    did not work correctly on little endian machines.  With this patch the
    testsuite now passes on x86.  Device trees are always created
    big-endian.

commit 81bdd52c0757332984f84b690abcb7ed79c45e19
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 4 11:17:32 2006 +1100

    libfdt: Add dtb files to .gitignore
    
    Ignores .dtb files in the tests subdirectory.

commit 7ba551f96629a5273370329658a6e6b3a87068aa
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Dec 1 16:59:43 2006 +1100

    libfdt: Read-write support
    
    This patch adds support for random access, read-write support on flat trees.

commit fe92f6bb75668d4ff1e5bf08b2ac432ba68fb5b3
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 1 16:25:39 2006 +1100

    libfdt: Introduce flat tree format v17
    
    v17 of the blob format adds a field for the size of the structure
    block, but is backwards compatible with v16.  This patch introduces
    definitions for the new field, and uses it to improve the bounds
    checking in the read-only code.  It also cleans up the sequential
    write code using it: we no longer need to borrow the version field as
    a write pointer.

commit aeddfe2c34c88c386749334746e4016431d10952
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 1 15:11:58 2006 +1100

    libfdt: Factor out string search function
    
    This patch pulls out the logic for finding a string in the string table
    into _fdt_find_string(), from fdt_sw.c's find_add_string().  This function
    will be useful for random-access read-write functions.  In the process
    clean up the search logic a little.

commit 423697628aa15f578a3fe8e499cdbb7ca64d075e
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 1 15:07:19 2006 +1100

    libfdt: Implement fdt_move()
    
    Implement the fdt_move() function for copying/moving device trees
    to a new buffer, or within an existing buffer.

commit ede25deae69872417579a46a4476bbf1620657e2
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 1 15:02:10 2006 +1100

    libfdt: Export accessors for header fields
    
    This patch adds exported accessor macros for the various flat device
    tree header fields to libfdt.h.  This necessitates moving some of the
    byte-swapping functions.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 41722c230c05b4a6ae0eec6c7537a73cb149a65e
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Dec 1 13:10:07 2006 +1100

    libfdt: Fix logic in nop_property testcase
    
    This patch fixes some completely bogus error checking logic from the
    nop_property testcase (resulted from a cut-and-paste error).
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

commit 65380f164ccd65218f5dd43dc81d162b900450ed
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Nov 29 16:49:27 2006 +1100

    Add a copy of the GPL
    
    Since the file preamples say it's there, we really should include it.

commit 063693a9e42aea7beb7c6f49ecd8a8dc5ed1c387
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Nov 29 16:45:46 2006 +1100

    libfdt: Sequential write support
    
    This patch adds code to libfdt to create flat trees from scratch, writing
    sequentially.

commit 3aa4cfd66bf75b67a2ddaed8454d0483762e69ba
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Nov 29 16:34:30 2006 +1100

    Simplify string table access functions
    
    The range sanity checking on the fdt_string_cmp() function causes problems
    for the sequential write code (or at least for using RO functions on an
    incomplete SW tree).  Plus they didn't really fit with the philosphy for
    the RO code of working as widely as possible on weirdly constructed trees.

commit 156649d4f656f47017fabb2596495ffce124bba5
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Nov 29 13:34:22 2006 +1100

    Fix building of dumptrees
    
    Without this rather odd constrained pattern rule, make attempts to build
    dumptrees using the default %: %.c rule instead of the defined %: %.o and
    %.o: %.c rules.

commit 4e6221c171377324cc3e80a9c2260b9788335d87
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Tue Nov 28 17:20:01 2006 +1100

    Have tests read example tree from a generated file, rather than link it in.
    This makes the tests more flexible to re-use for testing the output from
    the write tests.

commit 3da0f9a10dfa9b615d06c350c7b9fe29f360a6e0
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Nov 27 16:21:28 2006 +1100

    libfdt - library for manipulating device trees in flattened format
    
    Initial revision, read-only and "in-place" (no memmove() required)
    write operations only.

commit f016882f91d393d1010988eab304c383b8b753bb
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Mon Oct 30 10:48:59 2006 -0600

    Change default output blob version from 3 to 16
    
    Signed-off-by: Kim Phillips <Kim.Phillips@freescale.com>
    Signed-off-by: Jon Loeliger <jdl@freescale.com>

commit 332c53642557a018ca9c729a4cd284c6e34b7f72
Author: Michael Neuling <mikey@neuling.org>
Date:   Fri Jul 7 23:28:10 2006 +1000

    dtc: fix endian issue when reading blobs
    
    The reserve mem regions are screwy if you read a blob on x86.  I'm
    guessing there may be a few more of these lurking in the code.
    
    Signed-off-by: Michael Neuling <mikey@neuling.org>

commit a73b7d43d4f60e76d82018fb9a4d137b089a1325
Merge: 6cf2bcd 780c742
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sat Jun 24 17:33:28 2006 -0500

    Merge branch 'jdl'

commit 6cf2bcd1e09394e8f824d71cf42d9d049faceb0e
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sat Jun 24 15:52:48 2006 -0500

    Add copyright.  Fix 80-column line.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 780c742b1459977d4490bb0021524750b715e449
Author: Jon Loeliger <jdl@jdl.com>
Date:   Sat Jun 24 15:42:51 2006 -0500

    Remove dead code.
    
    Signed-off-by: Jon Loeliger <jdl@jdl.com>

commit 38e8f8fd88dae07ef8ada9d6baa41b06a4d9ac9f
Author: Michael Neuling <mikey@neuling.org>
Date:   Wed May 31 08:31:51 2006 +1000

    dtc: add setting of physical boot cpu
    
    dtc always sets the physical boot CPU to 0xfeedbeef.  Add a -b option to
    set this.    Also add warnings when using the wrong property with the
    wrong blob version.
    
    Signed-off-by: Michael Neuling <mikey@neuling.org>

commit 05ae3d8eebdad2b8da6e02eeca3baa3cc54fe5f3
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Apr 19 11:58:45 2006 -0500

    Use .long on high and low halfs of u64s to avoid .quad
    as it appears .quad isn't available in some assemblers.

commit f7374f60eb086979006f0b029f21824bd13d20ca
Author: Jon Loeliger <jdl@freescale.com>
Date:   Wed Apr 19 11:34:22 2006 -0500

    Don't generate the mem-reserve entry for the blob itself,
    even for ASM output.  It was inconsistent with the binary
    output form, and kernel folks decided to have the early
    kernel perform the reservation itself.

commit 7a9f663ac7ef1218ffe3aaab66f1bf66d54eaf0a
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Mar 15 18:59:24 2006 -0700

    The problem is that asm_emit_cell() was swapping its asm output when
    it shouldn't be (because the assembler will do the necessary swapping).
    The cell values (asm_emit_cell()) are different from the data values
    (asm_emit_data()) because the cell values are generated within the
    program and don't get swapped like the data values read from the dts file.
    They should be left as they are so that the assembler will swap them,
    if necessary.  For example, when the property length field was 4,
    the asm output contained ".long 0x4000000" and sent the kernel prom.c
    dt parsing code into the weeds.
    
    Pointed out by Mark Greer.

commit f5aa792d81f5911eff088e4f88c0cd0a11ea9ca0
Author: David Gibson <dgibson@sneetch.ozlabs.ibm.com>
Date:   Tue Jan 31 16:17:59 2006 +1100

    Add paper on the flattened tree and dtc presented at linux.conf.au 2006 by
    way of some more documentation.

commit f192a7ae0ba797478920b7980159e0b2047b45f1
Author: Becky Bruce <bgill@freescale.com>
Date:   Tue Jan 10 13:16:28 2006 -0600

    [PATCH] dtc: Update flat OF doc for new mdio properties
    
    Add device-type and compatible as required fields for mdio node; add eTSEC
    to ethernet model options.
    
    Signed-off-by: Becky Bruce <Becky.bruce@freescale.com>

commit 986c272d66da52a952758c0d1c9f58f67e2b2251
Author: David Gibson <dgibson@sneetch.ozlabs.ibm.com>
Date:   Tue Dec 6 15:22:36 2005 +1100

    Added document describing flattened tree format and what properties / nodes
    the kernel needs.  Written by BenH and Becky Bruce.

commit 1ae70562f04c3b60644a52d005d8551484852b5f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Oct 26 16:57:40 2005 +1000

    Remove no longer used (and already commented) reserve_data field from boot_info.

commit 712e52e4386295c6ae9570721c4c91965d747b08
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Oct 26 16:56:26 2005 +1000

    Use names for output functions in the form dt_to_*() instead of
    write_dt_*() for consistency with the dt_from_*() input functions.

commit f040d95b847c4f7d1fa4c3c6309127b8c1ffd8b3
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Oct 24 18:18:38 2005 +1000

    Rework tracking of reserve entries during processing.  This is initial work
    to allow more powerful handling of reserve entries.

commit fccb194a1451d97a373fc4ab2d66aa985c78b48d
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Oct 24 17:27:36 2005 +1000

    Add a second cpu and a timebase frequency to test.dts.

commit 8f1bc85611be3b682edf660101aa8d5a058655a5
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Oct 21 17:28:42 2005 +1000

    Add a .gitignore file.

commit 740a19a81905ff04710f4a154c0c9277e72d7c74
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Oct 21 17:26:45 2005 +1000

    Alter add_property() and add_child() functiosn to add to the end of their
    respective linked lists.  This means we no longer reverse the order or
    properties and subnodes when in blob or fs input modes.

commit cba839c728b95e97d05b228bfe12ffecfae39734
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Oct 20 13:56:23 2005 +1000

    Reduce message about too-long property names to a mere warning, it causes
    too much trouble.  Still need to fix up error handling in general.

commit 1847d161dc2357e74c498101fbb8366c7e0495bc
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Oct 19 16:29:52 2005 +1000

    Update TODO

commit 86dbcbd1e421700feeae2fc83db9e464f7964262
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Oct 19 16:00:31 2005 +1000

    Rudimentary support for reporting the line number of syntax errors.

commit b4ac04952a2d8489cb28c5d0a3872d4a35dc58d2
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Oct 17 10:27:45 2005 +1000

    Oops avoid using case range gcc extension.

commit 93c82174eac518b844b2faaf4f992d91013d9760
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Oct 17 10:27:27 2005 +1000

    Use C99 fixed width integer type names in libdt.

commit c6d036eaeca727c9ec6490797cd08dad5a146d51
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Oct 14 11:59:23 2005 +1000

    Oops, use strtoul() instead of strtol() in dtc-lexer.l, so that we
    correctly handle cell values above 7fffffff.  Bug pointed out by Kumar Gala.

commit b2543fc875f0cd30231584beb97ccf31bf8a0f88
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Aug 29 14:58:27 2005 +1000

    Add ftdump utility, contributed by Pantelis Antoniou.

commit 6c0f36769af7e015030d033edf6b10f7ec50318c
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Aug 29 13:36:15 2005 +1000

    Fix endian problems with handling of memreserve entries (bug pointed out
    by Pantelis Antoniou).  The rule is that the memreserve data in struct
    boot_info is always stored big-endian.

commit 230f253e9b187efd67787f98639aadb15916d0e9
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Aug 29 12:48:02 2005 +1000

    Remove an unused function, mark a bunch of other functions and variables
    as static.  Mostly found by sparse.

commit 41916138dddbae54e4153d11db10fd7695633d27
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Aug 25 15:39:09 2005 +1000

    Forgot to realign after emitting auto-generated "name" properties.  Oops.

commit dffc2a8972640dc2d9c9cdf7c83132d93437f6af
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Aug 25 14:47:20 2005 +1000

    Add a couple of missing cpu_to_be32() writing the version numbers out.

commit 4ddf7c020c3db2f001987ec2c2a91a030a01377d
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Aug 19 16:11:11 2005 +1000

    In flat tree reading, check for (negative) string offsets which underrun
    the input blob. (Patch from Michael Ellerman).

commit 7f6d12b3a1b632f7854bdfe7a25a825ab28bcf07
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Jul 15 17:20:34 2005 +1000

    Remove unused enum from dtc.h.

commit f0517db25008374955e1b09a140413d7e0f499c3
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Jul 15 17:14:24 2005 +1000

    Support for specifying memreserve ranges in the source format, based on
    a patch by Jon Loeliger <jdl AT freescale.com>, although tweaked
    substantially.

commit 586606e35d1e72d3ee2073bca4247b340233af53
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Jul 14 11:27:24 2005 +1000

    Oops, fix stupid bug where we emitted padding before, rather than after
    the blob header.

commit 47f23dee09ffa076467128b0fd01ac9d5762829f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 17:19:26 2005 +1000

    Ensure that the reserve map is doubleword aligned in blob and asm output.

commit a6c69572a378d765a9bf28dd6c927b9c62521508
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 17:09:42 2005 +1000

    Remove inaccurate comment.

commit 03a9b9dcdc29df37e40d08aaa80f3274ffd56354
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 16:49:52 2005 +1000

    Use u8 instead of uint8_t, as we do with the other size types.

commit 7ee3ffd43f6b45178c5e73e9b666a836ee333143
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 16:45:57 2005 +1000

    Fix bug in error message.

commit 1cb934b3aa3eff2ee5a04808af52ed7933cf31bb
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 16:29:25 2005 +1000

    Add automatic dependency generation.

commit 5a446b0cd89166897d272d37e702b5827e7b3431
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 11 13:53:13 2005 +1000

    Add flex option to stop warning about unused yyunput().

commit c5c437e25b13d906715b4c608c363195873a1726
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 4 13:53:14 2005 +1000

    Oops.  Using %{  %} in the rules (rather than definitions) section of a
    lex file has undefined behaviour.  In fact it ends up including the stuff
    within the definition of the yylex() function, leading to strange warnings
    on gcc-3.4 and compile errors with gcc 4.

commit 363f1ea84688d68ed61155d88f335db20d530557
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Mon Jul 4 13:51:09 2005 +1000

    Add missing file.

commit ab870cadb4e0933e3fa6958c2b64f423c478c225
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Jun 23 15:45:13 2005 +1000

    First cut at a "libdt" set of routines for extracting things from the
    flattened tree.  Could be used in firmware.

commit 9ad4587c904ce0eb58e5e747b3f3d99f03e8d21f
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Fri Jun 17 14:32:32 2005 +1000

    Remove build_empty_property().  It wasn't useful.

commit 81f2e89c7551ef44a6203ab1cbb8228d09202572
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Jun 16 17:04:00 2005 +1000

    Rudimentary phandle reference support.

commit 4102d840d993e7cce7d5c5aea8ef696dc81236fc
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Thu Jun 16 14:36:37 2005 +1000

    Initial label support.  Also switch to glr-parser mode and get rid of
    hacks that were necessary without it.

commit fc14dad7692d84d5f0f547fd0456b3f98526b6cc
Author: David Gibson <dgibson@sneetch.(none)>
Date:   Wed Jun 8 17:18:34 2005 +1000

    Initial commit
